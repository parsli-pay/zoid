{"version":3,"sources":["webpack://zoid/webpack/universalModuleDefinition","webpack://zoid/webpack/bootstrap","webpack://zoid/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://zoid/./node_modules/zalgo-promise/src/utils.js","webpack://zoid/./node_modules/zalgo-promise/src/exceptions.js","webpack://zoid/./node_modules/zalgo-promise/src/flush.js","webpack://zoid/./node_modules/zalgo-promise/src/promise.js","webpack://zoid/./node_modules/cross-domain-utils/src/util.js","webpack://zoid/./node_modules/cross-domain-utils/src/constants.js","webpack://zoid/./node_modules/cross-domain-utils/src/utils.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/util.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/weakmap.js","webpack://zoid/./node_modules/belter/src/util.js","webpack://zoid/./node_modules/belter/src/dom.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/native.js","webpack://zoid/./node_modules/belter/src/css.js","webpack://zoid/./node_modules/post-robot/src/conf/config.js","webpack://zoid/./node_modules/post-robot/src/conf/constants.js","webpack://zoid/./node_modules/post-robot/src/global.js","webpack://zoid/./node_modules/post-robot/src/lib/hello.js","webpack://zoid/./node_modules/post-robot/src/lib/windows.js","webpack://zoid/./node_modules/universal-serialize/src/constants.js","webpack://zoid/./node_modules/universal-serialize/src/common.js","webpack://zoid/./node_modules/universal-serialize/src/serialize.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/function.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/error.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/promise.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/regex.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/date.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/array.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/object.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/string.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/number.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/boolean.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/null.js","webpack://zoid/./node_modules/universal-serialize/src/deserialize.js","webpack://zoid/./node_modules/post-robot/src/bridge/common.js","webpack://zoid/./node_modules/post-robot/src/bridge/parent.js","webpack://zoid/./node_modules/post-robot/src/bridge/setup.js","webpack://zoid/./node_modules/post-robot/src/bridge/bridge.js","webpack://zoid/./node_modules/post-robot/src/bridge/child.js","webpack://zoid/./node_modules/post-robot/src/serialize/window.js","webpack://zoid/./node_modules/post-robot/src/serialize/function.js","webpack://zoid/./node_modules/post-robot/src/serialize/serialize.js","webpack://zoid/./node_modules/post-robot/src/serialize/promise.js","webpack://zoid/./node_modules/post-robot/src/drivers/send/strategies.js","webpack://zoid/./node_modules/post-robot/src/drivers/send/index.js","webpack://zoid/./node_modules/post-robot/src/lib/compat.js","webpack://zoid/./node_modules/post-robot/src/drivers/listeners.js","webpack://zoid/./node_modules/post-robot/src/drivers/receive/types.js","webpack://zoid/./node_modules/post-robot/src/drivers/receive/index.js","webpack://zoid/./node_modules/post-robot/src/public/on.js","webpack://zoid/./node_modules/post-robot/src/public/send.js","webpack://zoid/./node_modules/post-robot/src/index.js","webpack://zoid/./node_modules/post-robot/src/setup.js","webpack://zoid/./node_modules/post-robot/src/clean.js","webpack://zoid/./src/lib/global.js","webpack://zoid/./src/lib/serialize.js","webpack://zoid/./src/constants.js","webpack://zoid/./src/child/props.js","webpack://zoid/./src/child/window.js","webpack://zoid/./src/child/index.js","webpack://zoid/./src/parent/drivers.js","webpack://zoid/./src/parent/props.js","webpack://zoid/./src/parent/index.js","webpack://zoid/./src/delegate/index.js","webpack://zoid/./src/component/templates/container.js","webpack://zoid/./src/component/templates/component.js","webpack://zoid/./src/component/props.js","webpack://zoid/./src/component/component.js","webpack://zoid/./src/component/validate.js","webpack://zoid/./src/index.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","hasOwnProperty","p","s","_extends","assign","target","arguments","length","source","apply","isPromise","item","Promise","window","Window","constructor","toString","then","err","flushPromise","dispatchedErrors","possiblyUnhandledPromiseHandlers","activeCount","flushActive","promise","resolve","startActive","endActive","ZalgoPromise","handler","_this","resolved","rejected","errorHandled","error","handlers","dispatching","stack","result","isAsync","res","reject","_proto","prototype","Error","dispatch","_this2","setTimeout","indexOf","push","j","dispatchPossiblyUnhandledError","asyncReject","_this3","_loop","_handlers$i","onSuccess","onError","catch","undefined","finally","onFinally","try","timeout","time","_this4","clearTimeout","toPromise","TypeError","all","promises","count","results","_loop2","prom","hash","keys","map","items","method","onPossiblyUnhandledException","cancel","splice","context","args","delay","flush","isRegex","PROTOCOL","MOCK","FILE","ABOUT","WILDCARD","WINDOW_TYPE","IFRAME","POPUP","IE_WIN_ACCESS_ERROR","isAboutProtocol","win","location","protocol","getParent","parent","getOpener","opener","canReadFromWindow","getActualDomain","host","getDomain","domain","mockDomain","isSameDomain","desc","getOwnPropertyDescriptor","isActuallySameDomain","assertSameDomain","isAncestorParent","child","childParent","getParents","getFrames","frames","len","frame","getAllChildFrames","_i3","_getFrames2","_i5","_getAllChildFrames2","getTop","top","_i7","_getAllChildFrames4","getAllFramesInWindow","concat","iframeWindows","iframeFrames","isWindowClosed","allowMock","closed","message","mockclosed","iframeIndex","collection","safeIndexOf","contentWindow","parentNode","doc","ownerDocument","documentElement","contains","isFrameWindowClosed","getUserAgent","navigator","mockUserAgent","userAgent","getFrameByName","winFrames","_i9","childFrame","isOpener","getAncestor","anyMatch","collection1","collection2","_i17","item1","_i19","getDistanceFromTop","distance","isSameTopWindow","win1","win2","top1","top2","allFrames1","allFrames2","opener1","opener2","matchDomain","pattern","origin","Array","isArray","Boolean","match","JSON","stringify","some","subpattern","getDomainFromUrl","url","split","slice","join","onCloseWindow","callback","maxtime","Infinity","check","isWindow","obj","__cross_domain_utils_window_check__","normalizeMockUrl","closeWindow","close","objectIDs","awaitFrameLoadPromises","counter","Date","now","CrossDomainSafeWeakMap","weakmap","values","Math","random","WeakMap","freeze","testWeakMap","testKey","set","hasNativeWeakMap","_cleanupClosedWindows","delete","isSafeToReadWrite","entry","writable","index","has","getOrSet","base64encode","str","btoa","Buffer","from","uniqueID","chars","replace","charAt","floor","toISOString","toLowerCase","serializeArgs","subkey","val","uid","getObjectID","memoizePromise","cache","memoizedPromiseFunction","_len2","_key2","reset","inlineMemoize","logic","__inline_memoize_cache__","noop","once","called","stringifyError","level","newErr","extend","safeInterval","loop","arrayFrom","isDefined","cleanup","tasks","cleaned","register","task","pop","assertExists","thing","isDocumentReady","document","body","readyState","urlEncode","waitForDocumentReady","interval","setInterval","clearInterval","parseQuery","queryString","params","_i2","_queryString$split2","pair","decodeURIComponent","extendQuery","originalQuery","props","filter","appendChild","container","isElement","element","Element","nodeType","style","getElementSafe","id","querySelector","elementReady","el","PopupOpenError","awaitFrameLoad","addEventListener","cleanIframes","linkFrameWindow","awaitFrameWindow","loadedFrame","iframe","options","tag","styleText","createElement","class","className","setAttribute","attributes","_i10","_Object$keys2","styleSheet","cssText","createTextNode","html","innerHTML","allowTransparency","backgroundColor","border","isIE","hasAttribute","getElement","event","removeEventListener","destroyElement","removeChild","isElementClosed","onResize","_temp","_ref2","_ref2$width","width","_ref2$height","height","_ref2$interval","_ref2$win","currentWidth","offsetWidth","currentHeight","offsetHeight","observer","newWidth","newHeight","ResizeObserver","observe","MutationObserver","childList","subtree","characterData","disconnect","isPerc","test","isPx","toNum","parseInt","toPx","toCSS","normalizeDimension","dim","max","MESSAGE_NAME","METHOD","HELLO","OPEN_TUNNEL","BRIDGE_NAME_PREFIX","SERIALIZATION_TYPE","CROSS_DOMAIN_ZALGO_PROMISE","CROSS_DOMAIN_FUNCTION","CROSS_DOMAIN_WINDOW","getGlobal","getObj","globalStore","defStore","store","storeKey","defVal","del","WildCard","getWildcard","global","WINDOW_WILDCARD","windowStore","winStore","getStore","getInstanceID","getHelloPromise","sayHello","_ref3","send","instanceID","_ref4","data","getWindowInstanceID","_ref5","_ref6","awaitWindowHello","markWindowKnown","TYPE","FUNCTION","ERROR","PROMISE","REGEX","DATE","ARRAY","OBJECT","STRING","NUMBER","BOOLEAN","NULL","UNDEFINED","isSerializedType","__type__","determineType","serializeType","type","__val__","SERIALIZER","_SERIALIZER","_ref","code","toJSON","defaultSerializers","DESERIALIZER","_DESERIALIZER","RegExp","defaultDeserializers","needsBridgeForBrowser","needsBridgeForWin","needsBridgeForDomain","needsBridge","getBridgeName","sanitizedDomain","isBridge","documentBodyReady","registerRemoteWindow","findRemoteWindow","remoteWinPromise","registerRemoteSendMessage","sendMessage","remoteWin","remoteDomain","fireAndForget","rejectRemoteSendMessage","linkWindow","popupWindowsByName","popupWindowsByWin","_popupWindowsByName$k2","winName","details","setupBridge","windowOpen","on","receiveMessage","open","last","bridgePromise","bridge","winDetails","listenForOpenTunnel","openTunnelToParent","canary","tunnelWindows","parentWindow","_tunnelWindows$keys2","cleanTunnelWindows","addTunnelWindow","tunnelWindow","setupOpenTunnelToParent","openTunnelToOpener","cleanupProxyWindows","idToProxyWindow","_idToProxyWindow$keys2","shouldClean","getSerializedWindow","windowName","getName","focus","isClosed","setLocation","href","setName","frameElement","ProxyWindow","serializedWindow","actualWindow","isProxyWindow","actualWindowPromise","setWindow","getType","isPopup","isIframe","getWindow","awaitWindow","matchWindow","_this5","proxyInstanceID","knownWindowInstanceID","unwrap","serialize","toProxyWindow","deserialize","realWin","proxyWindow","addMethod","methodStore","proxyWindowMethods","lookupMethod","serializeFunction","destination","meth","methodSource","listenForFunctionCalls","__id__","__name__","serializeMessage","_serialize","serializers","serializer","serializePromise","deserializeMessage","_deserialize","deserializers","parse","deserializer","serializedPromise","serializedFunction","getDeserializedFunction","opts","crossDomainFunctionWrapper","_arguments","__origin__","__source__","deserializeFunction","_ref8","SEND_MESSAGE_STRATEGIES","_serializeMessage","serializedMessage","strategies","errors","strategyName","dom","forEach","postMessage","messagingChild","messagingParent","sendBridgeMessage","foreignGlobal","__DOMAIN_REGEX__","getResponseListener","deleteResponseListener","isResponseListenerErrored","getRequestListener","requestListeners","_i4","winQualifier","nameListeners","domainListeners","_i6","_domainListeners$__DO2","_domainListeners$__DO3","listener","regex","RECEIVE_MESSAGE_TYPES","_RECEIVE_MESSAGE_TYPE","sendResponse","ack","response","pathname","handleError","receivedMessages","parsedMessage","parseMessage","requestListener","addRequestListener","listenersCollection","_i8","_win2","_i12","_domain2","_i14","existingListener","regexListeners","regexListener","strDomain","errorHandler","responseTimeout","childTimeout","validateOptions","actualParent","_i15","_getFrames8","isAncestor","normalizeDomain","targetDomain","logName","responseListener","addResponseListener","reqPromises","markResponseListenerErrored","totalAckTimeout","isWindowKnown","totalResTimeout","ackTimeout","resTimeout","cancelled","internalSerializeMessage","internalDeserializeMessage","cleanUpWindow","_requestPromises$get2","getProxyObject","openBridge","bridges","bridgeFrames","src","openBridgeFrame","linkUrl","hasBridge","destroyBridges","_bridgeFrames$keys2","ZOID","POST_MESSAGE","PROP_TYPE","PROP_SERIALIZATION","DOTIFY","BASE64","CONTEXT","DEFAULT_DIMENSIONS","WIDTH","HEIGHT","EVENT","RENDER","RENDERED","DISPLAY","CLOSE","PROPS","RESIZE","normalizeChildProp","component","helpers","prop","getPropDefinition","childDecorate","parseChildWindowName","_windowName$split","zoidcomp","encodedPayload","atob","base64decode","getChildPayload","ChildComponent","parentDomain","parentComponentWindow","onPropHandlers","autoResize","childPayload","__ZOID__","version","getParentComponentWindow","checkParentDomain","initialProps","getPropsByRef","setProps","watchForClose","init","buildExports","watchForResize","getHelpers","resize","onProps","getParentDomain","allowedParentDomains","ref","getNthParent","ancestor","_getAllFramesInWindow2","windows","getProps","isUpdate","existingProps","sameDomain","alias","_component$getPropNam2","getPropNames","normalizeChildProps","_this$onPropHandlers2","checkClose","destroy","getAutoResize","_ref3$width","_ref3$height","_ref3$element","_this4$getAutoResize","updateProps","_this6","RENDER_DRIVERS","getQueryParam","queryParam","getQueryValue","queryValue","openOnClick","openFrame","title","proxyFrame","frameWatcher","clean","openPrerenderFrame","openPrerender","proxyWin","proxyPrerenderFrame","prerenderFrame","prerenderFrameWindow","delegate","_this3$component$dime","dimensions","left","outerWidth","round","screenX","screen","outerHeight","screenY","status","toolbar","menubar","resizable","scrollbars","popup","ParentComponent","driver","initPromise","handledErrors","state","setupEvents","registerActiveComponent","destroyActiveComponent","watchForUnload","triggered","eventName","handlerList","trigger","_len3","_key3","triggerOnce","_len4","_key4","onRender","onDisplay","onRendered","onClose","render","log","childDomain","getChildDomain","checkAllowRender","buildUrl","getProxyContainer","renderContainer","proxyContainer","setState","setProxyWin","prerender","proxyPrerenderWin","buildWindowName","setWindowName","loadUrl","runTimeout","containerElement","buildChildPayload","getPropsRef","getPropsForChild","propRef","_ref7","_ref7$target","getWindowRef","buildParentExports","validate","inputProps","propNames","aliases","propDef","default","_Object$keys4","decorate","required","extendProps","propsDef","builtinProps","serialization","dotify","prefix","newobj","every","_Object$keys6","dotkey","query","originalUrl","originalHash","_url$split","_originalUrl$split","hashString","extendUrl","getUrl","sendToChild","_this7","_this8","_this9","_this10","windowProp","_this11","_this12","_this13","_this$component$getPr2","propName","allowDelegate","overridesPromise","overrides","_ref9","_this$driver$delegate2","_this14","_this15","_this16","unloadWindowListener","_this17","initChild","_this18","_this19","_ref10","_ref11","_this20","_this21","secondClosed","_this22","_ref12","_this23","prerenderTemplate","prerenderWindow","isBlankDomain","renderTemplate","tagName","_arrayFrom2","children","_arrayFrom4","writeElementToWindow","_ref13","_ref13$width","_ref13$height","_ref13$element","_ref14","renderer","_ref15","_this24","_ref16","_this25","_ref17","innerContainer","containerTemplate","_this26","_this27","_this28","bridgeUrl","getBridgeUrl","bridgeDomain","DelegateComponent","watchForSourceClose","getDelegate","getOverrides","closeSourceWindowListener","CLASS","VISIBLE","INVISIBLE","defaultContainerTemplate","_ref$dimensions","div","cspNonce","classList","add","remove","defaultPrerenderTemplate","spinner","defaultNoop","decorateOnce","Component","defaultContext","driverCache","xprops","logger","PROP_TYPE_LIST","validatePropDefinitions","components","_ref$width","_ref$height","debug","info","warn","registerChild","listenDelegate","dep","isChild","_ref2$data","canRenderTo","payload","getDefaultContainer","getDefaultContext","renderTo","instance","activeComponents","initialized","setupGlobalReceiveMessage","sourceElement","originalEvent","messageListener","initHello","destroyAll","destroyComponents","responseListeners","_responseListeners$ke2","cancelResponseListeners","__webpack_exports__","component_destroy","component_Component"],"mappings":"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","file":"zoid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"zoid\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"zoid\"] = factory();\n\telse\n\t\troot[\"zoid\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","/* @flow */\n\nexport function isPromise(item : mixed) : boolean {\n    try {\n        if (!item) {\n            return false;\n        }\n\n        if (typeof Promise !== 'undefined' && item instanceof Promise) {\n            return true;\n        }\n\n        if (typeof window !== 'undefined' && window.Window && item instanceof window.Window) {\n            return false;\n        }\n\n        if (typeof window !== 'undefined' && window.constructor && item instanceof window.constructor) {\n            return false;\n        }\n\n        let toString = ({}).toString;\n\n        if (toString) {\n            let name = toString.call(item);\n\n            if (name === '[object Window]' || name === '[object global]' || name === '[object DOMWindow]') {\n                return false;\n            }\n        }\n\n        if (typeof item.then === 'function') {\n            return true;\n        }\n    } catch (err) {\n        return false;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nconst dispatchedErrors = [];\nconst possiblyUnhandledPromiseHandlers : Array<(mixed, promise? : ZalgoPromise<mixed>) => void> = [];\n\nexport function dispatchPossiblyUnhandledError<T>(err : mixed, promise : ZalgoPromise<T>) {\n\n    if (dispatchedErrors.indexOf(err) !== -1) {\n        return;\n    }\n\n    dispatchedErrors.push(err);\n\n    setTimeout(() => {\n        if (__DEBUG__) {\n            // $FlowFixMe\n            throw new Error(`${ err.stack || err.toString() }\\n\\nFrom promise:\\n\\n${ promise.stack }`);\n        }\n\n        throw err;\n    }, 1);\n\n    for (let j = 0; j < possiblyUnhandledPromiseHandlers.length; j++) {\n        // $FlowFixMe\n        possiblyUnhandledPromiseHandlers[j](err, promise);\n    }\n}\n\nexport function onPossiblyUnhandledException(handler : (mixed, promise? : ZalgoPromise<mixed>) => void) : { cancel : () => void } {\n    possiblyUnhandledPromiseHandlers.push(handler);\n\n    return {\n        cancel() {\n            possiblyUnhandledPromiseHandlers.splice(possiblyUnhandledPromiseHandlers.indexOf(handler), 1);\n        }\n    };\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nlet activeCount = 0;\nlet flushPromise;\n\nfunction flushActive() {\n    if (!activeCount && flushPromise) {\n        const promise = flushPromise;\n        flushPromise = null;\n        promise.resolve();\n    }\n}\n\nexport function startActive() {\n    activeCount += 1;\n}\n\nexport function endActive() {\n    activeCount -= 1;\n    flushActive();\n}\n\nexport function awaitActive(Zalgo : Class<ZalgoPromise<*>>) : ZalgoPromise<void> { // eslint-disable-line no-undef\n    let promise = flushPromise = flushPromise || new Zalgo();\n    flushActive();\n    return promise;\n}\n","/* @flow */\n\nimport { isPromise } from './utils';\nimport { onPossiblyUnhandledException, dispatchPossiblyUnhandledError } from './exceptions';\nimport { startActive, endActive, awaitActive } from './flush';\n\nexport class ZalgoPromise<R : mixed> {\n\n    resolved : boolean\n    rejected : boolean\n    errorHandled : boolean\n    value : R\n    error : mixed\n    handlers : Array<{\n        promise : ZalgoPromise<*>,\n        onSuccess : void | (result : R) => mixed,\n        onError : void | (error : mixed) => mixed\n    }>\n    dispatching : boolean\n    stack : string\n\n    constructor(handler : ?(resolve : (result : R) => void, reject : (error : mixed) => void) => void) {\n\n        this.resolved = false;\n        this.rejected = false;\n        this.errorHandled = false;\n\n        this.handlers = [];\n\n        if (handler) {\n\n            let result;\n            let error;\n            let resolved = false;\n            let rejected = false;\n            let isAsync = false;\n\n            startActive();\n\n            try {\n                handler(res => {\n                    if (isAsync) {\n                        this.resolve(res);\n                    } else {\n                        resolved = true;\n                        result = res;\n                    }\n\n                }, err => {\n                    if (isAsync) {\n                        this.reject(err);\n                    } else {\n                        rejected = true;\n                        error = err;\n                    }\n                });\n\n            } catch (err) {\n                endActive();\n                this.reject(err);\n                return;\n            }\n\n            endActive();\n\n            isAsync = true;\n\n            if (resolved) {\n                // $FlowFixMe\n                this.resolve(result);\n            } else if (rejected) {\n                this.reject(error);\n            }\n        }\n\n        if (__DEBUG__) {\n            try {\n                throw new Error(`ZalgoPromise`);\n            } catch (err) {\n                this.stack = err.stack;\n            }\n        }\n    }\n\n    resolve(result : R) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(result)) {\n            throw new Error('Can not resolve promise with another promise');\n        }\n\n        this.resolved = true;\n        this.value = result;\n        this.dispatch();\n\n        return this;\n    }\n\n    reject(error : mixed) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(error)) {\n            throw new Error('Can not reject promise with another promise');\n        }\n\n        if (!error) {\n            // $FlowFixMe\n            let err = (error && typeof error.toString === 'function' ? error.toString() : Object.prototype.toString.call(error));\n            error = new Error(`Expected reject to be called with Error, got ${ err }`);\n        }\n\n        this.rejected = true;\n        this.error = error;\n\n        if (!this.errorHandled) {\n            setTimeout(() => {\n                if (!this.errorHandled) {\n                    dispatchPossiblyUnhandledError(error, this);\n                }\n            }, 1);\n        }\n\n        this.dispatch();\n\n        return this;\n    }\n\n    asyncReject(error : mixed) : ZalgoPromise<R> {\n        this.errorHandled = true;\n        this.reject(error);\n        return this;\n    }\n    \n    dispatch() {\n\n        let { dispatching, resolved, rejected, handlers } = this;\n\n        if (dispatching) {\n            return;\n        }\n\n        if (!resolved && !rejected) {\n            return;\n        }\n\n        this.dispatching = true;\n        startActive();\n\n        for (let i = 0; i < handlers.length; i++) {\n\n            let { onSuccess, onError, promise } = handlers[i];\n\n            let result;\n\n            if (resolved) {\n\n                try {\n                    result = onSuccess ? onSuccess(this.value) : this.value;\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n\n            } else if (rejected) {\n\n                if (!onError) {\n                    promise.reject(this.error);\n                    continue;\n                }\n\n                try {\n                    result = onError(this.error);\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n            }\n\n            if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n\n                if (result.resolved) {\n                    promise.resolve(result.value);\n                } else {\n                    promise.reject(result.error);\n                }\n\n                result.errorHandled = true;\n\n            } else if (isPromise(result)) {\n\n                if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n                    if (result.resolved) {\n                        promise.resolve(result.value);\n                    } else {\n                        promise.reject(result.error);\n                    }\n\n                } else {\n                    // $FlowFixMe\n                    result.then(res => {\n                        promise.resolve(res);\n                    }, err => {\n                        promise.reject(err);\n                    });\n                }\n\n            } else {\n\n                promise.resolve(result);\n            }\n        }\n\n        handlers.length = 0;\n        this.dispatching = false;\n        endActive();\n    }\n\n    then<X : mixed, Y : mixed>(onSuccess : void | (result : R) => (ZalgoPromise<X> | Y), onError : void | (error : mixed) => (ZalgoPromise<X> | Y)) : ZalgoPromise<X | Y> {\n\n        if (onSuccess && typeof onSuccess !== 'function' && !onSuccess.call) {\n            throw new Error('Promise.then expected a function for success handler');\n        }\n\n        if (onError && typeof onError !== 'function' && !onError.call) {\n            throw new Error('Promise.then expected a function for error handler');\n        }\n\n        let promise : ZalgoPromise<X | Y> = new ZalgoPromise();\n\n        this.handlers.push({\n            promise,\n            onSuccess,\n            onError\n        });\n\n        this.errorHandled = true;\n\n        this.dispatch();\n\n        return promise;\n    }\n\n    catch<X : mixed, Y : mixed>(onError : (error : mixed) => ZalgoPromise<X> | Y) : ZalgoPromise<X | Y> {\n        return this.then(undefined, onError);\n    }\n\n    finally(onFinally : () => mixed) : ZalgoPromise<R> {\n\n        if (onFinally && typeof onFinally !== 'function' && !onFinally.call) {\n            throw new Error('Promise.finally expected a function');\n        }\n\n        return this.then((result) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    return result;\n                });\n        }, (err) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    throw err;\n                });\n        });\n    }\n\n    timeout(time : number, err : ?Error) : ZalgoPromise<R> {\n\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        let timeout = setTimeout(() => {\n\n            if (this.resolved || this.rejected) {\n                return;\n            }\n\n            this.reject(err || new Error(`Promise timed out after ${ time }ms`));\n\n        }, time);\n\n        return this.then(result => {\n            clearTimeout(timeout);\n            return result;\n        });\n    }\n\n    // $FlowFixMe\n    toPromise() : Promise<R> {\n        // $FlowFixMe\n        if (typeof Promise === 'undefined') {\n            throw new TypeError(`Could not find Promise`);\n        }\n        // $FlowFixMe\n        return Promise.resolve(this); // eslint-disable-line compat/compat\n    }\n\n    static resolve<X : mixed>(value : X | ZalgoPromise<X>) : ZalgoPromise<X> {\n\n        if (value instanceof ZalgoPromise) {\n            return value;\n        }\n\n        if (isPromise(value)) {\n            // $FlowFixMe\n            return new ZalgoPromise((resolve, reject) => value.then(resolve, reject));\n        }\n\n        return new ZalgoPromise().resolve(value);\n    }\n\n    static reject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().reject(error);\n    }\n\n    static asyncReject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().asyncReject(error);\n    }\n\n    static all<X : Array<mixed>>(promises : X) : ZalgoPromise<$TupleMap<X, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n\n        let promise = new ZalgoPromise();\n        let count = promises.length;\n        let results = [];\n\n        if (!count) {\n            promise.resolve(results);\n            return promise;\n        }\n\n        for (let i = 0; i < promises.length; i++) {\n            let prom = promises[i];\n\n            if (prom instanceof ZalgoPromise) {\n                if (prom.resolved) {\n                    results[i] = prom.value;\n                    count -= 1;\n                    continue;\n                }\n            } else if (!isPromise(prom)) {\n                results[i] = prom;\n                count -= 1;\n                continue;\n            }\n\n            ZalgoPromise.resolve(prom).then(result => {\n                results[i] = result;\n                count -= 1;\n                if (count === 0) {\n                    promise.resolve(results);\n                }\n            }, err => {\n                promise.reject(err);\n            });\n        }\n\n        if (count === 0) {\n            promise.resolve(results);\n        }\n\n        return promise;\n    }\n\n    static hash<O : Object>(promises : O) : ZalgoPromise<$ObjMap<O, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n        let result = {};\n        \n        return ZalgoPromise.all(Object.keys(promises).map(key => {\n            return ZalgoPromise.resolve(promises[key]).then(value => {\n                result[key] = value;\n            });\n        })).then(() => {\n            return result;\n        });\n    }\n\n    static map<T, X>(items : Array<T>, method : (T) => (ZalgoPromise<X> | X)) : ZalgoPromise<Array<X>> {\n        // $FlowFixMe\n        return ZalgoPromise.all(items.map(method));\n    }\n\n    static onPossiblyUnhandledException(handler : (err : mixed) => void) : { cancel : () => void } {\n        return onPossiblyUnhandledException(handler);\n    }\n\n    static try<X : mixed, Y : mixed, C : mixed, A : Array<mixed>>(method : (...args : A) => (ZalgoPromise<X> | Y), context : ?C, args : ?A) : ZalgoPromise<X | Y> {\n\n        if (method && typeof method !== 'function' && !method.call) {\n            throw new Error('Promise.try expected a function');\n        }\n\n        let result;\n\n        startActive();\n        \n        try {\n            // $FlowFixMe\n            result = method.apply(context, args || []);\n        } catch (err) {\n            endActive();\n            return ZalgoPromise.reject(err);\n        }\n\n        endActive();\n\n        return ZalgoPromise.resolve(result);\n    }\n\n    static delay(delay : number) : ZalgoPromise<void> {\n        return new ZalgoPromise(resolve => {\n            setTimeout(resolve, delay);\n        });\n    }\n\n    static isPromise(value : mixed) : boolean {\n\n        if (value && value instanceof ZalgoPromise) {\n            return true;\n        }\n\n        return isPromise(value);\n    }\n\n    static flush() : ZalgoPromise<void> {\n        return awaitActive(ZalgoPromise);\n    }\n}\n","/* @flow */\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nexport const PROTOCOL = {\n    MOCK:  ('mock:' : 'mock:'),\n    FILE:  ('file:' : 'file:'),\n    ABOUT: ('about:' : 'about:')\n};\n\nexport const WILDCARD = '*';\n\nexport const WINDOW_TYPE = {\n    IFRAME: ('iframe' : 'iframe'),\n    POPUP:  ('popup' : 'popup')\n};\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isRegex, noop } from './util';\nimport type { CrossDomainWindowType, SameDomainWindowType, DomainMatcher } from './types';\nimport { PROTOCOL, WILDCARD } from './constants';\n\nlet IE_WIN_ACCESS_ERROR = 'Call was rejected by callee.\\r\\n';\n\nexport function isFileProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.FILE;\n}\n\nexport function isAboutProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.ABOUT;\n}\n\nexport function getParent(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.parent && win.parent !== win) {\n            return win.parent;\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    // Make sure we're not actually an iframe which has had window.open() called on us\n    if (getParent(win)) {\n        return;\n    }\n\n    try {\n        return win.opener;\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function canReadFromWindow(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        noop(win && win.location && win.location.href);\n        return true;\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function getActualDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let location = win.location;\n\n    if (!location) {\n        throw new Error(`Can not read window location`);\n    }\n\n    let protocol = location.protocol;\n\n    if (!protocol) {\n        throw new Error(`Can not read window protocol`);\n    }\n\n    if (protocol === PROTOCOL.FILE) {\n        return `${ PROTOCOL.FILE }//`;\n    }\n\n    if (protocol === PROTOCOL.ABOUT) {\n\n        let parent = getParent(win);\n        if (parent && canReadFromWindow(parent)) {\n            // $FlowFixMe\n            return getActualDomain(parent);\n        }\n\n        return `${ PROTOCOL.ABOUT }//`;\n    }\n\n    let host = location.host;\n\n    if (!host) {\n        throw new Error(`Can not read window host`);\n    }\n\n    return `${ protocol }//${ host }`;\n}\n\nexport function getDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let domain = getActualDomain(win);\n\n    if (domain && win.mockDomain && win.mockDomain.indexOf(PROTOCOL.MOCK) === 0) {\n        return win.mockDomain;\n    }\n\n    return domain;\n}\n\nexport function isBlankDomain(win : CrossDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        if (!win.location.href) {\n            return true;\n        }\n\n        if (win.location.href === 'about:blank') {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isActuallySameDomain(win : CrossDomainWindowType) : boolean {\n\n    try {\n        if (win === window) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        let desc = Object.getOwnPropertyDescriptor(win, 'location');\n\n        if (desc && desc.enumerable === false) {\n            return false;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (getActualDomain(win) === getActualDomain(window)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n\n    if (!isActuallySameDomain(win)) {\n        return false;\n    }\n\n    try {\n\n        if (win === window) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (getDomain(window) === getDomain(win)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\n\nexport function assertSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : SameDomainWindowType {\n    if (!isSameDomain(win)) {\n        throw new Error(`Expected window to be same domain`);\n    }\n\n    // $FlowFixMe\n    return win;\n}\n\nexport function getParents(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    try {\n\n        while (win.parent !== win) {\n            result.push(win.parent);\n            win = win.parent;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return result;\n}\n\nexport function isAncestorParent(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    if (!parent || !child) {\n        return false;\n    }\n\n    let childParent = getParent(child);\n\n    if (childParent) {\n        return childParent === parent;\n    }\n\n    if (getParents(child).indexOf(parent) !== -1) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    let frames;\n\n    try {\n        frames = win.frames;\n    } catch (err) {\n        frames = win;\n    }\n\n    let len;\n\n    try {\n        len = frames.length;\n    } catch (err) {\n        // pass\n    }\n\n    if (len === 0) {\n        return result;\n    }\n\n    if (len) {\n        for (let i = 0; i < len; i++) {\n\n            let frame;\n\n            try {\n                frame = frames[i];\n            } catch (err) {\n                continue;\n            }\n\n            result.push(frame);\n        }\n\n        return result;\n    }\n\n    for (let i = 0; i < 100; i++) {\n        let frame;\n\n        try {\n            frame = frames[i];\n        } catch (err) {\n            return result;\n        }\n\n        if (!frame) {\n            return result;\n        }\n\n        result.push(frame);\n    }\n\n    return result;\n}\n\n\nexport function getAllChildFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    for (let frame of getFrames(win)) {\n        result.push(frame);\n\n        for (let childFrame of getAllChildFrames(frame)) {\n            result.push(childFrame);\n        }\n    }\n\n    return result;\n}\n\nexport function getTop(win : CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.top) {\n            return win.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    if (getParent(win) === win) {\n        return win;\n    }\n\n    try {\n        if (isAncestorParent(window, win) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (isAncestorParent(win, window) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    for (let frame of getAllChildFrames(win)) {\n        try {\n            if (frame.top) {\n                return frame.top;\n            }\n        } catch (err) {\n            // pass\n        }\n\n        if (getParent(frame) === frame) {\n            return frame;\n        }\n    }\n}\n\nexport function getNextOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    return getOpener(getTop(win) || win);\n}\n\nexport function getUltimateTop(win? : CrossDomainWindowType = window) : CrossDomainWindowType {\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return getUltimateTop(opener);\n    }\n\n    return top;\n}\n\nexport function getAllFramesInWindow(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n    let top = getTop(win);\n\n    if (!top) {\n        throw new Error(`Can not determine top window`);\n    }\n\n    return [ ...getAllChildFrames(top), top ];\n}\n\nexport function getAllWindows(win? : CrossDomainWindowType = window) : $ReadOnlyArray<CrossDomainWindowType> {\n    let frames = getAllFramesInWindow(win);\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return [ ...getAllWindows(opener), ...frames ];\n    } else {\n        return frames;\n    }\n}\n\nexport function isTop(win : CrossDomainWindowType) : boolean {\n    return win === getTop(win);\n}\n\nexport function isFrameWindowClosed(frame : HTMLIFrameElement) : boolean {\n\n    if (!frame.contentWindow) {\n        return true;\n    }\n\n    if (!frame.parentNode) {\n        return true;\n    }\n\n    let doc = frame.ownerDocument;\n\n    if (doc && doc.documentElement && !doc.documentElement.contains(frame)) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\nlet iframeWindows = [];\nlet iframeFrames = [];\n\nexport function isWindowClosed(win : CrossDomainWindowType, allowMock : boolean = true) : boolean {\n\n    try {\n        if (win === window) {\n            return false;\n        }\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (!win) {\n            return true;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (win.closed) {\n            return true;\n        }\n\n    } catch (err) {\n\n        // I love you so much IE\n\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    if (allowMock && isSameDomain(win)) {\n        try {\n            // $FlowFixMe\n            if (win.mockclosed) {\n                return true;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    // Mobile safari\n\n    try {\n        if (!win.parent || !win.top) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    // Yes, this actually happens in IE. win === win errors out when the window\n    // is from an iframe, and the iframe was removed from the page.\n\n    try {\n        noop(win === win); // eslint-disable-line no-self-compare\n    } catch (err) {\n        return true;\n    }\n\n    // IE orphaned frame\n\n    let iframeIndex = safeIndexOf(iframeWindows, win);\n\n    if (iframeIndex !== -1) {\n        let frame = iframeFrames[iframeIndex];\n\n        if (frame && isFrameWindowClosed(frame)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction cleanIframes() {\n    for (let i = 0; i < iframeWindows.length; i++) {\n        let closed = false;\n\n        try {\n            closed = iframeWindows[i].closed;\n        } catch (err) {\n            // pass\n        }\n\n        if (closed) {\n            iframeFrames.splice(i, 1);\n            iframeWindows.splice(i, 1);\n        }\n    }\n}\n\nexport function linkFrameWindow(frame : HTMLIFrameElement) {\n\n    cleanIframes();\n\n    if (frame && frame.contentWindow) {\n        try {\n            iframeWindows.push(frame.contentWindow);\n            iframeFrames.push(frame);\n        } catch (err) {\n            // pass\n        }\n    }\n}\n\nexport function getUserAgent(win : ?SameDomainWindowType) : string {\n    win = win || window;\n    return win.navigator.mockUserAgent || win.navigator.userAgent;\n}\n\n\nexport function getFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let winFrames = getFrames(win);\n\n    for (let childFrame of winFrames) {\n        try {\n            // $FlowFixMe\n            if (isSameDomain(childFrame) && childFrame.name === name && winFrames.indexOf(childFrame) !== -1) {\n                return childFrame;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    try {\n        // $FlowFixMe\n        if (winFrames.indexOf(win.frames[name]) !== -1) {\n            // $FlowFixMe\n            return win.frames[name];\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (winFrames.indexOf(win[name]) !== -1) {\n            return win[name];\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function findChildFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        let namedFrame = findChildFrameByName(childFrame, name);\n\n        if (namedFrame) {\n            return namedFrame;\n        }\n    }\n}\n\nexport function findFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame;\n\n    frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    let top = getTop(win) || win;\n\n    return findChildFrameByName(top, name);\n}\n\nexport function isParent(win : CrossDomainWindowType, frame : CrossDomainWindowType) : boolean {\n\n    let frameParent = getParent(frame);\n\n    if (frameParent) {\n        return frameParent === win;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        if (childFrame === frame) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isOpener(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    return parent === getOpener(child);\n}\n\nexport function getAncestor(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    win = win || window;\n\n    let opener = getOpener(win);\n\n    if (opener) {\n        return opener;\n    }\n\n    let parent = getParent(win);\n\n    if (parent) {\n        return parent;\n    }\n}\n\nexport function getAncestors(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let results = [];\n\n    let ancestor = win;\n\n    while (ancestor) {\n        ancestor = getAncestor(ancestor);\n        if (ancestor) {\n            results.push(ancestor);\n        }\n    }\n\n    return results;\n}\n\n\nexport function isAncestor(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    let actualParent = getAncestor(child);\n\n    if (actualParent) {\n        if (actualParent === parent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    if (child === parent) {\n        return false;\n    }\n\n    if (getTop(child) === child) {\n        return false;\n    }\n\n    for (let frame of getFrames(parent)) {\n        if (frame === child) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isPopup() : boolean {\n    return Boolean(getOpener(window));\n}\n\nexport function isIframe() : boolean {\n    return Boolean(getParent(window));\n}\n\nexport function isFullpage() : boolean {\n    return Boolean(!isIframe() && !isPopup());\n}\n\nfunction anyMatch(collection1, collection2) : boolean {\n\n    for (let item1 of collection1) {\n        for (let item2 of collection2) {\n            if (item1 === item2) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport function getDistanceFromTop(win : CrossDomainWindowType = window) : number {\n    let distance = 0;\n    let parent = win;\n\n    while (parent) {\n        parent = getParent(parent);\n        if (parent) {\n            distance += 1;\n        }\n    }\n\n    return distance;\n}\n\nexport function getNthParent(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    let parent = win;\n\n    for (let i = 0; i < n; i++) {\n        if (!parent) {\n            return;\n        }\n\n        parent = getParent(parent);\n    }\n\n    return parent;\n}\n\nexport function getNthParentFromTop(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    return getNthParent(win, getDistanceFromTop(win) - n);\n}\n\nexport function isSameTopWindow(win1 : CrossDomainWindowType, win2 : CrossDomainWindowType) : boolean {\n\n    let top1 = getTop(win1) || win1;\n    let top2 = getTop(win2) || win2;\n\n    try {\n        if (top1 && top2) {\n            if (top1 === top2) {\n                return true;\n            }\n\n            return false;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    let allFrames1 = getAllFramesInWindow(win1);\n    let allFrames2 = getAllFramesInWindow(win2);\n\n    if (anyMatch(allFrames1, allFrames2)) {\n        return true;\n    }\n\n    let opener1 = getOpener(top1);\n    let opener2 = getOpener(top2);\n\n    if (opener1 && anyMatch(getAllFramesInWindow(opener1), allFrames2)) {\n        return false;\n    }\n\n    if (opener2 && anyMatch(getAllFramesInWindow(opener2), allFrames1)) {\n        return false;\n    }\n\n    return false;\n}\n\nexport function matchDomain(pattern : DomainMatcher, origin : DomainMatcher) : boolean {\n\n    if (typeof pattern === 'string') {\n\n        if (typeof origin === 'string') {\n            return pattern === WILDCARD || origin === pattern;\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n    }\n\n    if (isRegex(pattern)) {\n\n        if (isRegex(origin)) {\n            return pattern.toString() === origin.toString();\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n\n        // $FlowFixMe\n        return Boolean(origin.match(pattern));\n    }\n\n    if (Array.isArray(pattern)) {\n\n        if (Array.isArray(origin)) {\n            return JSON.stringify(pattern) === JSON.stringify(origin);\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        return pattern.some(subpattern => matchDomain(subpattern, origin));\n    }\n\n    return false;\n}\n\nexport function stringifyDomainPattern(pattern : DomainMatcher) : string {\n    if (Array.isArray(pattern)) {\n        return `(${ pattern.join(' | ') })`;\n    } else if (isRegex(pattern)) {\n        return `RegExp(${ pattern.toString() }`;\n    } else {\n        return pattern.toString();\n    }\n}\n\nexport function getDomainFromUrl(url : string) : string {\n\n    let domain;\n\n    if (url.match(/^(https?|mock|file):\\/\\//)) {\n        domain = url;\n    } else {\n        return getDomain();\n    }\n\n    domain = domain.split('/').slice(0, 3).join('/');\n\n    return domain;\n}\n\nexport function onCloseWindow(win : CrossDomainWindowType, callback : Function, delay : number = 1000, maxtime : number = Infinity) : { cancel : () => void } {\n\n    let timeout;\n\n    let check = () => {\n\n        if (isWindowClosed(win)) {\n\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n\n            return callback();\n        }\n\n        if (maxtime <= 0) {\n            clearTimeout(timeout);\n        } else {\n            maxtime -= delay;\n            timeout = setTimeout(check, delay);\n        }\n    };\n\n    check();\n\n    return {\n        cancel() {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n        }\n    };\n}\n\n// eslint-disable-next-line complexity\nexport function isWindow(obj : Object) : boolean {\n\n    try {\n        if (obj === window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (Object.prototype.toString.call(obj) === '[object Window]') {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (window.Window && obj instanceof window.Window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.self === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.parent === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.top === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (noop(obj === obj) === '__unlikely_value__') { // eslint-disable-line no-self-compare\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (obj && obj.__cross_domain_utils_window_check__ === '__unlikely_value__') {\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined' && typeof window.location !== 'undefined');\n}\n\nexport function isCurrentDomain(domain : string) : boolean {\n    if (!isBrowser()) {\n        return false;\n    }\n\n    return (getDomain() === domain);\n}\n\nexport function isMockDomain(domain : string) : boolean {\n    return domain.indexOf(PROTOCOL.MOCK) === 0;\n}\n\nexport function normalizeMockUrl(url : string) : string {\n    if (!isMockDomain(getDomainFromUrl(url))) {\n        return url;\n    }\n\n    if (!__TEST__) {\n        throw new Error(`Mock urls not supported out of test mode`);\n    }\n\n    return url.replace(/^mock:\\/\\/[^/]+/, getActualDomain(window));\n}\n\nexport function closeWindow(win : CrossDomainWindowType) {\n    try {\n        win.close();\n    } catch (err) {\n        // pass\n    }\n}\n","/* @flow */\n\nexport function safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nimport { isWindow, isWindowClosed } from 'cross-domain-utils/src';\n\nimport { hasNativeWeakMap } from './native';\nimport { noop, safeIndexOf } from './util';\n\nlet defineProperty = Object.defineProperty;\nlet counter = Date.now() % 1e9;\n\nexport class CrossDomainSafeWeakMap<K : Object, V : mixed> {\n\n    name : string\n    weakmap : WeakMap<K, V>\n    keys : Array<K>\n    values : Array<V>\n\n    constructor() {\n        counter += 1;\n\n        // eslint-disable-next-line no-bitwise\n        this.name = `__weakmap_${ Math.random() * 1e9 >>> 0 }__${ counter }`;\n\n        if (hasNativeWeakMap()) {\n            try {\n                this.weakmap = new WeakMap();\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this.keys  = [];\n        this.values = [];\n    }\n\n    _cleanupClosedWindows() {\n\n        let weakmap = this.weakmap;\n        let keys = this.keys;\n\n        for (let i = 0; i < keys.length; i++) {\n            let value = keys[i];\n\n            if (isWindow(value) && isWindowClosed(value)) {\n\n                if (weakmap) {\n                    try {\n                        weakmap.delete(value);\n                    } catch (err) {\n                        // pass\n                    }\n                }\n\n                keys.splice(i, 1);\n                this.values.splice(i, 1);\n\n                i -= 1;\n            }\n        }\n    }\n\n    isSafeToReadWrite(key : K) : boolean {\n\n        if (isWindow(key)) {\n            return false;\n        }\n\n        try {\n            noop(key && key.self);\n            noop(key && key[this.name]);\n        } catch (err) {\n            return false;\n        }\n\n        return true;\n    }\n\n    set(key : K, value : V) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.set(key, value);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let name = this.name;\n                let entry = key[name];\n\n                if (entry && entry[0] === key) {\n                    entry[1] = value;\n                } else {\n                    defineProperty(key, name, {\n                        value:    [ key, value ],\n                        writable: true\n                    });\n                }\n\n                return;\n\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let values = this.values;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            keys.push(key);\n            values.push(value);\n        } else {\n            values[index] = value;\n        }\n    }\n\n    get(key : K) : V | void {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return weakmap.get(key);\n                }\n                \n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return entry[1];\n                }\n\n                return;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            return;\n        }\n\n        return this.values[index];\n    }\n\n    delete(key : K) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.delete(key);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    entry[0] = entry[1] = undefined;\n                }\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index !== -1) {\n            keys.splice(index, 1);\n            this.values.splice(index, 1);\n        }\n    }\n\n    has(key : K) : boolean {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return true;\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return true;\n                }\n\n                return false;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let index = safeIndexOf(this.keys, key);\n        return index !== -1;\n    }\n\n    getOrSet(key : K, getter : () => V) : V {\n        if (this.has(key)) {\n            // $FlowFixMe\n            return this.get(key);\n        }\n\n        let value = getter();\n        this.set(key, value);\n        return value;\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport type { CancelableType } from './types';\n\nexport function base64encode(str : string) : string {\n    if (typeof btoa === 'function') {\n        return btoa(str);\n    } else if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'utf8').toString('base64');\n    }\n\n    throw new Error(`Can not find window.btoa or Buffer`);\n}\n\nexport function base64decode(str : string) : string {\n    if (typeof window !== 'undefined' && typeof window.atob === 'function') {\n        return window.atob(str);\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'base64').toString('utf8');\n    }\n\n    throw new Error(`Can not find window.atob or Buffer`);\n}\n\nexport function uniqueID() : string {\n\n    let chars = '0123456789abcdef';\n\n    let randomID = 'xxxxxxxxxx'.replace(/./g, () => {\n        return chars.charAt(Math.floor(Math.random() * chars.length));\n    });\n\n    let timeID = base64encode(\n        new Date().toISOString().slice(11, 19).replace('T', '.')\n    ).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n    return `${ randomID }_${ timeID }`;\n}\n\nexport function getGlobal() : Object {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    if (typeof __GLOBAL__ !== 'undefined') {\n        return __GLOBAL__;\n    }\n    throw new Error(`No global found`);\n}\n\nlet objectIDs;\n\nexport function getObjectID(obj : Object) : string {\n\n    objectIDs = objectIDs || new WeakMap();\n\n    if (obj === null || obj === undefined || (typeof obj !== 'object' && typeof obj !== 'function')) {\n        throw new Error(`Invalid object`);\n    }\n\n    let uid = objectIDs.get(obj);\n\n    if (!uid) {\n        uid = `${ typeof obj }:${ uniqueID() }`;\n        objectIDs.set(obj, uid);\n    }\n\n    return uid;\n}\n\nfunction serializeArgs<T>(args : Array<T>) : string {\n    try {\n        return JSON.stringify(Array.prototype.slice.call(args), (subkey, val) => {\n            if (typeof val === 'function') {\n                return `memoize[${ getObjectID(val) }]`;\n            }\n            return val;\n        });\n    } catch (err) {\n        throw new Error(`Arguments not serializable -- can not be used to memoize`);\n    }\n}\nexport function memoize<A, R, F : (...args : Array<A>) => R, X : { (...args : Array<A>) : R, displayName : string, reset : () => void }>(method : F, options : { time? : number, name? : string, thisNamespace? : boolean } = {}) : X {\n    let cacheMap = new WeakMap();\n\n    // $FlowFixMe\n    let memoizedFunction : X = function memoizedFunction(...args : Array<A>) : R {\n        let cache = cacheMap.getOrSet(options.thisNamespace ? this : method, () => ({}));\n\n        let key : string = serializeArgs(args);\n\n        let cacheTime = options.time;\n        if (cache[key] && cacheTime && (Date.now() - cache[key].time) < cacheTime) {\n            delete cache[key];\n        }\n\n        if (cache[key]) {\n            return cache[key].value;\n        }\n\n        let time  = Date.now();\n        let value = method.apply(this, arguments);\n\n        cache[key] = { time, value };\n\n        return cache[key].value;\n    };\n\n    memoizedFunction.reset = () => {\n        cacheMap.delete(options.thisNamespace ? this : method);\n    };\n\n    if (options.name) {\n        memoizedFunction.displayName = `${ options.name }:memoized`;\n    }\n\n    return memoizedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoizePromise<R>(method : (...args : Array<any>) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    let cache = {};\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedPromiseFunction(...args : Array<any>) : ZalgoPromise<R> {\n        let key : string = serializeArgs(args);\n\n        if (cache.hasOwnProperty(key)) {\n            return cache[key];\n        }\n\n        cache[key] = method.apply(this, arguments)\n            .finally(() => {\n                delete cache[key];\n            });\n\n        return cache[key];\n    }\n\n    memoizedPromiseFunction.reset = () => {\n        cache = {};\n    };\n\n    return memoizedPromiseFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function promisify<R>(method : (...args : Array<any>) => R, options : { name? : string } = {}) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    function promisifiedFunction() : ZalgoPromise<R> {\n        return ZalgoPromise.try(method, this, arguments);\n    }\n\n    if (options.name) {\n        promisifiedFunction.displayName = `${ options.name }:promisified`;\n    }\n\n    return promisifiedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function inlineMemoize<R>(method : (...args : Array<any>) => R, logic : (...args : Array<any>) => R, args : Array<any> = []) : R {\n    // $FlowFixMe\n    let cache = method.__inline_memoize_cache__ = method.__inline_memoize_cache__ || {};\n    let key = serializeArgs(args);\n\n    if (cache.hasOwnProperty(key)) {\n        return cache[key];\n    }\n    \n    let result = cache[key] = logic(...args);\n    return result;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\nexport function once(method : Function) : Function {\n    let called = false;\n\n    return function onceFunction() : mixed {\n        if (!called) {\n            called = true;\n            return method.apply(this, arguments);\n        }\n    };\n}\n\nexport function hashStr(str : string) : number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash += str[i].charCodeAt(0) * Math.pow((i % 10) + 1, 5);\n    }\n    return Math.floor(Math.pow(Math.sqrt(hash), 5));\n}\n\nexport function strHashStr(str : string) : string {\n    let hash = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let total = (str[i].charCodeAt(0) * i);\n\n        if (str[i + 1]) {\n            total += (str[i + 1].charCodeAt(0) * (i - 1));\n        }\n\n        hash += String.fromCharCode(97 + (Math.abs(total) % 26));\n    }\n\n    return hash;\n}\n\nexport function match(str : string, pattern : RegExp) : ?string {\n    let regmatch = str.match(pattern);\n    if (regmatch) {\n        return regmatch[1];\n    }\n}\n\nexport function awaitKey<T: mixed>(obj : Object, key : string) : ZalgoPromise<T> {\n    return new ZalgoPromise(resolve => {\n\n        let value = obj[key];\n\n        if (value) {\n            return resolve(value);\n        }\n\n        delete obj[key];\n\n        Object.defineProperty(obj, key, {\n\n            configurable: true,\n\n            set(item) {\n                value = item;\n\n                if (value) {\n                    resolve(value);\n                }\n            },\n\n            get() : mixed {\n                return value;\n            }\n        });\n    });\n}\n\nexport function stringifyError(err : mixed, level : number = 1) : string {\n\n    if (level >= 3) {\n        return 'stringifyError stack overflow';\n    }\n\n    try {\n        if (!err) {\n            return `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n        }\n\n        if (typeof err === 'string') {\n            return err;\n        }\n\n        if (err instanceof Error) {\n            let stack = err && err.stack;\n            let message = err && err.message;\n\n            if (stack && message) {\n                if (stack.indexOf(message) !== -1) {\n                    return stack;\n                } else {\n                    return `${ message }\\n${ stack }`;\n                }\n            } else if (stack) {\n                return stack;\n            } else if (message) {\n                return message;\n            }\n        }\n\n        if (err && err.toString && typeof err.toString === 'function') {\n            // $FlowFixMe\n            return err.toString();\n        }\n\n        return Object.prototype.toString.call(err);\n\n    } catch (newErr) { // eslint-disable-line unicorn/catch-error-name\n        return `Error while stringifying error: ${ stringifyError(newErr, level + 1) }`;\n    }\n}\n\nexport function stringifyErrorMessage(err : mixed) : string {\n\n    let defaultMessage = `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n\n    if (!err) {\n        return defaultMessage;\n    }\n\n    if (err instanceof Error) {\n        return err.message || defaultMessage;\n    }\n\n    if (typeof err.message === 'string') {\n        return err.message || defaultMessage;\n    }\n\n    return defaultMessage;\n}\n\nexport function stringify(item : mixed) : string {\n    if (typeof item === 'string') {\n        return item;\n    }\n\n    if (item && item.toString && typeof item.toString === 'function') {\n        // $FlowFixMe\n        return item.toString();\n    }\n\n    return Object.prototype.toString.call(item);\n}\n\nexport function domainMatches(hostname : string, domain : string) : boolean {\n    hostname = hostname.split('://')[1];\n    let index = hostname.indexOf(domain);\n    return (index !== -1 && hostname.slice(index) === domain);\n}\n\nexport function patchMethod(obj : Object, name : string, handler : Function) {\n    let original = obj[name];\n\n    obj[name] = function patchedMethod() : mixed {\n        return handler({\n            context:      this,\n            args:         Array.prototype.slice.call(arguments),\n            original,\n            callOriginal: () => original.apply(this, arguments)\n        });\n    };\n}\n\nexport function extend<T : Object | Function>(obj : T, source : Object) : T {\n    if (!source) {\n        return obj;\n    }\n\n    if (Object.assign) {\n        return Object.assign(obj, source);\n    }\n\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            obj[key] = source[key];\n        }\n    }\n\n    return obj;\n}\n\nexport function values<T>(obj : { [string] : T }) : Array<T> {\n    let result = [];\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result.push(obj[key]);\n        }\n    }\n    return result;\n}\n\nexport function perc(pixels : number, percentage : number) : number {\n    return Math.round((pixels * percentage) / 100);\n}\n\nexport function min(...args : Array<number>) : number {\n    return Math.min(...args);\n}\n\nexport function max(...args : Array<number>) : number {\n    return Math.max(...args);\n}\n\nexport function regexMap<T>(str : string, regexp : RegExp, handler : () => T) : Array<T> {\n    let results = [];\n\n    // $FlowFixMe\n    str.replace(regexp, function regexMapMatcher(item) {\n        results.push(handler ? handler.apply(null, arguments) : item);\n    });\n\n    // $FlowFixMe\n    return results;\n}\n\nexport function svgToBase64(svg : string) : string {\n    return `data:image/svg+xml;base64,${ base64encode(svg) }`;\n}\n\nexport function objFilter<T, R>(obj : { [string] : T }, filter? : (T, ?string) => mixed = Boolean) : { [string] : R } {\n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || !filter(obj[key], key)) {\n            continue;\n        }\n\n        result[key] = obj[key];\n    }\n\n    return result;\n}\n\nexport function identity <T>(item : T) : T {\n    return item;\n}\n\nexport function regexTokenize(text : string, regexp : RegExp) : Array<string> {\n    let result = [];\n    text.replace(regexp, token => {\n        result.push(token);\n        return '';\n    });\n    return result;\n}\n\nexport function promiseDebounce<T>(method : () => ZalgoPromise<T> | T, delay : number = 50) : () => ZalgoPromise<T> {\n\n    let promise;\n    let timeout;\n\n    return function promiseDebouncedMethod() : ZalgoPromise<T> {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        let localPromise = promise = promise || new ZalgoPromise();\n\n        timeout = setTimeout(() => {\n            promise = null;\n            timeout = null;\n\n            ZalgoPromise.try(method).then(\n                result => { localPromise.resolve(result); },\n                err => { localPromise.reject(err); }\n            );\n        }, delay);\n\n        return localPromise;\n    };\n}\n\nexport function safeInterval(method : Function, time : number) : { cancel : () => void } {\n\n    let timeout;\n\n    function loop() {\n        timeout = setTimeout(() => {\n            method();\n            loop();\n        }, time);\n    }\n\n    loop();\n\n    return {\n        cancel() {\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function isInteger(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+$/));\n}\n\nexport function isFloat(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+\\.[0-9]+$/));\n}\n\nexport function serializePrimitive(value : string | number | boolean) : string {\n    return value.toString();\n}\n\nexport function deserializePrimitive(value : string) : string | number | boolean {\n    if (value === 'true') {\n        return true;\n    } else if (value === 'false') {\n        return false;\n    } else if (isInteger(value)) {\n        return parseInt(value, 10);\n    } else if (isFloat(value)) {\n        return parseFloat(value);\n    } else {\n        return value;\n    }\n}\n\nexport function dotify(obj : Object, prefix : string = '', newobj : Object = {}) : { [string] : string } {\n    prefix = prefix ? `${ prefix }.` : prefix;\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || obj[key] === undefined || obj[key] === null || typeof obj[key] === 'function') {\n            continue;\n        } else if (obj[key] && Array.isArray(obj[key]) && obj[key].length && obj[key].every(val => typeof val !== 'object')) {\n            newobj[`${ prefix }${ key }[]`] = obj[key].join(',');\n        } else if (obj[key] && typeof obj[key] === 'object') {\n            newobj = dotify(obj[key], `${ prefix }${ key }`, newobj);\n        } else {\n            newobj[`${ prefix }${ key }`] = serializePrimitive(obj[key]);\n        }\n    }\n    return newobj;\n}\n\nexport function undotify(obj : { [string] : string }) : Object {\n    \n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || typeof obj[key] !== 'string') {\n            continue;\n        }\n\n        let value = obj[key];\n\n        if (key.match(/^.+\\[\\]$/)) {\n            key = key.slice(0, key.length - 2);\n            value = value.split(',').map(deserializePrimitive);\n        } else {\n            value = deserializePrimitive(value);\n        }\n\n        let keyResult = result;\n        let parts = key.split('.');\n        for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n            let isLast = (i + 1 === parts.length);\n            let isIndex = !isLast && isInteger(parts[i + 1]);\n\n            if (isLast) {\n                // $FlowFixMe\n                keyResult[part] = value;\n            } else {\n                // $FlowFixMe\n                keyResult = keyResult[part] = keyResult[part] || (isIndex ? [] : {});\n            }\n        }\n    }\n\n    return result;\n}\n\nexport type EventEmitterType = {\n    on : (eventName : string, handler : Function) => CancelableType,\n    once : (eventName : string, handler : Function) => CancelableType,\n    trigger : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    triggerOnce : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>\n};\n\nexport function eventEmitter() : EventEmitterType {\n    let triggered = {};\n    let handlers = {};\n\n    return {\n\n        on(eventName : string, handler : Function) : CancelableType {\n            let handlerList = handlers[eventName] = handlers[eventName] || [];\n\n            handlerList.push(handler);\n\n            let cancelled = false;\n\n            return {\n                cancel() {\n                    if (!cancelled) {\n                        cancelled = true;\n                        handlerList.splice(handlerList.indexOf(handler), 1);\n                    }\n\n                }\n            };\n        },\n\n        once(eventName : string, handler : Function) : CancelableType {\n\n            let listener = this.on(eventName, () => {\n                listener.cancel();\n                handler();\n            });\n\n            return listener;\n        },\n\n        trigger(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            let handlerList = handlers[eventName];\n            let promises = [];\n\n            if (handlerList) {\n                for (let handler of handlerList) {\n                    promises.push(ZalgoPromise.try(() => handler(...args)));\n                }\n            }\n\n            return ZalgoPromise.all(promises).then(noop);\n        },\n\n        triggerOnce(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            if (triggered[eventName]) {\n                return ZalgoPromise.resolve();\n            }\n\n            triggered[eventName] = true;\n            return this.trigger(eventName, ...args);\n        }\n    };\n}\n\nexport function camelToDasherize(string : string) : string {\n    return string.replace(/([A-Z])/g, (g) => {\n        return `-${ g.toLowerCase() }`;\n    });\n}\n\nexport function dasherizeToCamel(string : string) : string {\n    return string.replace(/-([a-z])/g, (g) => {\n        return g[1].toUpperCase();\n    });\n}\n\nexport function capitalizeFirstLetter(string : string) : string {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\n\nexport function get(item : Object, path : string, def : mixed) : mixed {\n\n    if (!path) {\n        return def;\n    }\n\n    let pathParts = path.split('.');\n\n    // Loop through each section of our key path\n\n    for (let i = 0; i < pathParts.length; i++) {\n\n        // If we have an object, we can get the key\n        if (typeof item === 'object' && item !== null) {\n            item = item[pathParts[i]];\n\n        // Otherwise, we should return the default (undefined if not provided)\n        } else {\n            return def;\n        }\n    }\n\n    // If our final result is undefined, we should return the default\n\n    return item === undefined ? def : item;\n}\n\nexport function safeTimeout(method : Function, time : number) {\n\n    let interval = safeInterval(() => {\n        time -= 100;\n        if (time <= 0) {\n            interval.cancel();\n            method();\n        }\n    }, 100);\n}\n\nexport function defineLazyProp<T>(obj : Object | Array<mixed>, key : string | number, getter : () => T) {\n    if (Array.isArray(obj)) {\n        if (typeof key !== 'number') {\n            throw new TypeError(`Array key must be number`);\n        }\n    } else if (typeof obj === 'object' && obj !== null) {\n        if (typeof key !== 'string') {\n            throw new TypeError(`Object key must be string`);\n        }\n    }\n    \n    Object.defineProperty(obj, key, {\n        configurable: true,\n        enumerable:   true,\n        get:          () => {\n            // $FlowFixMe\n            delete obj[key];\n            let value = getter();\n            // $FlowFixMe\n            obj[key] = value;\n            return value;\n        },\n        set: (value : T) => {\n            // $FlowFixMe\n            delete obj[key];\n            // $FlowFixMe\n            obj[key] = value;\n        }\n    });\n}\n\nexport function arrayFrom<T>(item : Iterable<T>) : Array<T> { // eslint-disable-line no-undef\n    return Array.prototype.slice.call(item);\n}\n\nexport function isObject(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null);\n}\n\nexport function isObjectObject(obj : mixed) : boolean {\n    return isObject(obj) && Object.prototype.toString.call(obj) === '[object Object]';\n}\n\nexport function isPlainObject(obj : mixed) : boolean {\n    if (!isObjectObject(obj)) {\n        return false;\n    }\n\n    // $FlowFixMe\n    let constructor = obj.constructor;\n\n    if (typeof constructor !== 'function') {\n        return false;\n    }\n\n    let prototype = constructor.prototype;\n\n    if (!isObjectObject(prototype)) {\n        return false;\n    }\n\n    if (!prototype.hasOwnProperty('isPrototypeOf')) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function replaceObject<T : Array<mixed> | Object> (item : T, replacer : (mixed, string | number, string) => mixed, fullKey : string = '') : T {\n\n    if (Array.isArray(item)) {\n        let length = item.length;\n        let result : Array<mixed> = [];\n\n        for (let i = 0; i < length; i++) {\n\n            \n            defineLazyProp(result, i, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ i }` : `${ i }`;\n                let el = item[i];\n\n                let child = replacer(el, i, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else if (isPlainObject(item)) {\n        let result = {};\n\n        for (let key in item) {\n            if (!item.hasOwnProperty(key)) {\n                continue;\n            }\n\n            defineLazyProp(result, key, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ key }` : `${ key }`;\n                // $FlowFixMe\n                let el = item[key];\n\n                let child = replacer(el, key, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else {\n        throw new Error(`Pass an object or array`);\n    }\n}\n\n\nexport function copyProp(source : Object, target : Object, name : string, def : mixed) {\n    if (source.hasOwnProperty(name)) {\n        let descriptor = Object.getOwnPropertyDescriptor(source, name);\n        // $FlowFixMe\n        Object.defineProperty(target, name, descriptor);\n\n    } else {\n        target[name] = def;\n    }\n}\n\ntype RegexResultType = {\n    text : string,\n    groups : Array<string>,\n    start : number,\n    end : number,\n    length : number,\n    replace : (text : string) => string\n};\n\nexport function regex(pattern : string | RegExp, string : string, start : number = 0) : ?RegexResultType {\n\n    if (typeof pattern === 'string') {\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        pattern = new RegExp(pattern);\n    }\n\n    let result = string.slice(start).match(pattern);\n\n    if (!result) {\n        return;\n    }\n\n    // $FlowFixMe\n    let index : number = result.index;\n    let regmatch = result[0];\n\n    return {\n        text:   regmatch,\n        groups: result.slice(1),\n        start:  start + index,\n        end:    start + index + regmatch.length,\n        length: regmatch.length,\n\n        replace(text : string) : string {\n\n            if (!regmatch) {\n                return '';\n            }\n\n            return `${ regmatch.slice(0, start + index) }${ text }${ regmatch.slice(index + regmatch.length) }`;\n        }\n    };\n}\n\nexport function regexAll(pattern : string | RegExp, string : string) : Array<RegexResultType> {\n\n    let matches = [];\n    let start = 0;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        let regmatch = regex(pattern, string, start);\n\n        if (!regmatch) {\n            break;\n        }\n\n        matches.push(regmatch);\n        start = match.end;\n    }\n\n    return matches;\n}\n\nexport function isDefined(value : ?mixed) : boolean {\n    return value !== null && value !== undefined;\n}\n\nexport function cycle(method : Function) : ZalgoPromise<void> {\n    return ZalgoPromise.try(method).then(() => cycle(method));\n}\n\nexport function debounce<T>(method : (...args : Array<mixed>) => T, time : number = 100) : (...args : Array<mixed>) => void {\n\n    let timeout;\n\n    return function debounceWrapper() {\n        clearTimeout(timeout);\n\n        timeout = setTimeout(() => {\n            return method.apply(this, arguments);\n        }, time);\n    };\n}\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\ntype FunctionProxy<T : Function> = (method : T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoize : FunctionProxy<*> = <R : mixed>(method : (arg : any) => R) : ((...args : Array<any>) => R) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoized(arg : any) : R {\n        return weakmap.getOrSet(arg, () => method.call(this, arg));\n    };\n};\n\ntype FunctionPromiseProxy<R : mixed, T : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<R>> = (T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoizePromise : FunctionPromiseProxy<*, *> = <R : mixed>(method : (arg : any) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoizedPromise(arg : any) : ZalgoPromise<R> {\n        return weakmap.getOrSet(arg, () =>\n            method.call(this, arg).finally(() => {\n                weakmap.delete(arg);\n            })\n        );\n    };\n};\n\nexport function getOrSet<O : Object, T : mixed>(obj : O, key : string, getter : () => T) : T {\n    if (obj.hasOwnProperty(key)) {\n        return obj[key];\n    }\n\n    const val = getter();\n    obj[key] = val;\n    return val;\n}\n\nexport type CleanupType = {|\n    set : <T : mixed>(string, T) => T, // eslint-disable-line no-undef\n    register : (Function) => void,\n    all : () => ZalgoPromise<void>\n|};\n\nexport function cleanup(obj : Object) : CleanupType {\n\n    const tasks = [];\n    let cleaned = false;\n\n    return {\n        set<T : mixed>(name : string, item : T) : T {\n            if (!cleaned) {\n                obj[name] = item;\n                this.register(() => {\n                    delete obj[name];\n                });\n            }\n            return item;\n        },\n\n        register(method : Function) {\n            if (cleaned) {\n                method();\n            } else {\n                tasks.push(once(method));\n            }\n        },\n\n        all() : ZalgoPromise<void> {\n            const results = [];\n            cleaned = true;\n\n            while (tasks.length) {\n                const task = tasks.pop();\n                results.push(task());\n            }\n\n            return ZalgoPromise.all(results).then(noop);\n        }\n    };\n}\n\nexport function tryCatch<T>(fn : () => T) : {| result : T, error : void |} | {| result : void, error : mixed |} {\n    let result;\n    let error;\n\n    try {\n        result = fn();\n    } catch (err) {\n        error = err;\n    }\n    \n    // $FlowFixMe\n    return { result, error };\n}\n\nexport function removeFromArray<X, T : Array<X>>(arr : T, item : X) {\n    const index = arr.indexOf(item);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n}\n\nexport function assertExists<T>(name : string, thing : void | null | T) : T {\n    if (thing === null || typeof thing === 'undefined') {\n        throw new Error(`Expected ${ name } to be present`);\n    }\n                            \n    return thing;\n}\n                            \nexport function unique(arr : $ReadOnlyArray<string>) : $ReadOnlyArray<string> {\n    const result = {};\n    for (const item of arr) {\n        // eslint-disable-next-line const-immutable/no-mutation\n        result[item] = true;\n    }\n    return Object.keys(result);\n}\n","/* @flow */\n/* eslint max-lines: off */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { linkFrameWindow, isWindowClosed,\n    type SameDomainWindowType, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport { inlineMemoize, noop, stringify, capitalizeFirstLetter,\n    once, extend, safeInterval, uniqueID, arrayFrom } from './util';\nimport { isDevice } from './device';\nimport { KEY_CODES } from './constants';\nimport type { CancelableType } from './types';\n\ntype ElementRefType = string | HTMLElement;\n\nexport function isDocumentReady() : boolean {\n    return Boolean(document.body) && document.readyState === 'complete';\n}\n\nexport function urlEncode(str : string) : string {\n    return str.replace(/\\?/g, '%3F').replace(/&/g, '%26').replace(/#/g, '%23').replace(/\\+/g, '%2B');\n}\n\nexport function waitForWindowReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForWindowReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n            if (isDocumentReady()) {\n                resolve();\n            }\n\n            window.addEventListener('load', () => resolve());\n        });\n    });\n}\n\nexport function waitForDocumentReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForDocumentReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n\n            if (isDocumentReady()) {\n                return resolve();\n            }\n\n            let interval = setInterval(() => {\n                if (isDocumentReady()) {\n                    clearInterval(interval);\n                    return resolve();\n                }\n            }, 10);\n        });\n    });\n}\n\nexport function waitForDocumentBody() : ZalgoPromise<HTMLBodyElement> {\n    return waitForDocumentReady().then(() => {\n        if (document.body) {\n            return document.body;\n        }\n\n        throw new Error('Document ready but document.body not present');\n    });\n}\n\nexport function parseQuery(queryString : string) : Object {\n    return inlineMemoize(parseQuery, () : Object => {\n        let params = {};\n\n        if (!queryString) {\n            return params;\n        }\n\n        if (queryString.indexOf('=') === -1) {\n            return params;\n        }\n\n        for (let pair of queryString.split('&')) {\n            pair = pair.split('=');\n\n            if (pair[0] && pair[1]) {\n                params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n            }\n        }\n\n        return params;\n    }, [ queryString ]);\n}\n\n\nexport function getQueryParam(name : string) : string {\n    return parseQuery(window.location.search.slice(1))[name];\n}\n\nexport function urlWillRedirectPage(url : string) : boolean {\n\n    if (url.indexOf('#') === -1) {\n        return true;\n    }\n\n    if (url.indexOf('#') === 0) {\n        return false;\n    }\n\n    if (url.split('#')[0] === window.location.href.split('#')[0]) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function formatQuery(obj : { [ string ] : string } = {}) : string {\n\n    return Object.keys(obj).filter(key => {\n        return typeof obj[key] === 'string';\n    }).map(key => {\n        return `${ urlEncode(key) }=${ urlEncode(obj[key]) }`;\n    }).join('&');\n}\n\nexport function extendQuery(originalQuery : string, props : { [ string ] : string } = {}) : string {\n\n    if (!props || !Object.keys(props).length) {\n        return originalQuery;\n    }\n\n    return formatQuery({\n        ...parseQuery(originalQuery),\n        ...props\n    });\n}\n\nexport function extendUrl(url : string, options : { query? : { [string] : string }, hash? : { [string] : string } } = {}) : string {\n\n    let query = options.query || {};\n    let hash = options.hash || {};\n\n    let originalUrl;\n    let originalQuery;\n    let originalHash;\n\n    [ originalUrl, originalHash ] = url.split('#');\n    [ originalUrl, originalQuery ] = originalUrl.split('?');\n\n    let queryString = extendQuery(originalQuery, query);\n    let hashString = extendQuery(originalHash, hash);\n\n    if (queryString) {\n        originalUrl = `${ originalUrl }?${ queryString }`;\n    }\n\n    if (hashString) {\n        originalUrl = `${ originalUrl }#${ hashString }`;\n    }\n\n    return originalUrl;\n}\n\nexport function redirect(url : string, win : CrossDomainWindowType = window) : ZalgoPromise<void> {\n    return new ZalgoPromise(resolve => {\n        win.location = url;\n        if (!urlWillRedirectPage(url)) {\n            resolve();\n        }\n    });\n}\n\nexport function hasMetaViewPort() : boolean {\n    let meta = document.querySelector('meta[name=viewport]');\n\n    if (isDevice() && window.screen.width < 660 && !meta) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function isElementVisible(el : HTMLElement) : boolean {\n    return Boolean(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n}\n\nexport function enablePerformance() : boolean {\n    return inlineMemoize(enablePerformance, () : boolean => {\n        /* eslint-disable compat/compat */\n        return Boolean(\n            window.performance &&\n            performance.now &&\n            performance.timing &&\n            performance.timing.connectEnd &&\n            performance.timing.navigationStart &&\n            (Math.abs(performance.now() - Date.now()) > 1000) &&\n            (performance.now() - (performance.timing.connectEnd - performance.timing.navigationStart)) > 0\n        );\n        /* eslint-enable compat/compat */\n    });\n}\n\nexport function getPageRenderTime() : ZalgoPromise<?number> {\n    return waitForDocumentReady().then(() => {\n\n        if (!enablePerformance()) {\n            return;\n        }\n\n        let timing = window.performance.timing;\n\n        if (timing.connectEnd && timing.domInteractive) {\n            return timing.domInteractive - timing.connectEnd;\n        }\n    });\n}\n\nexport function htmlEncode(html : string = '') : string {\n    return html.toString()\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\//g, '&#x2F;');\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined');\n}\n\nexport function querySelectorAll(selector : string, doc : HTMLElement = window.document) : Array<HTMLElement> {\n    return Array.prototype.slice.call(doc.querySelectorAll(selector));\n}\n\nexport function onClick(element : HTMLElement, handler : (Event) => void) {\n    element.addEventListener('touchstart', noop);\n    element.addEventListener('click', handler);\n    element.addEventListener('keypress', (event : Event) => {\n        // $FlowFixMe\n        if (event.keyCode === KEY_CODES.ENTER) {\n            return handler(event);\n        }\n    });\n}\n\nexport function getScript({ host = window.location.host, path } : { host? : string, path : string }) : ?HTMLScriptElement {\n    return inlineMemoize(getScript, () : ?HTMLScriptElement => {\n\n        let url = `${ host }${ path }`;\n        let scripts = Array.prototype.slice.call(document.getElementsByTagName('script'));\n\n        for (let script of scripts) {\n            if (!script.src) {\n                continue;\n            }\n\n            let src = script.src.replace(/^https?:\\/\\//, '').split('?')[0];\n\n            if (src === url) {\n                return script;\n            }\n        }\n    }, [ path ]);\n}\n\nexport function isLocalStorageEnabled() : boolean {\n    return inlineMemoize(isLocalStorageEnabled, () => {\n        try {\n            if (typeof window === 'undefined') {\n                return false;\n            }\n\n            if (window.localStorage) {\n                let value = Math.random().toString();\n                window.localStorage.setItem('__test__localStorage__', value);\n                let result = window.localStorage.getItem('__test__localStorage__');\n                window.localStorage.removeItem('__test__localStorage__');\n                if (value === result) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            // pass\n        }\n        return false;\n    });\n}\n\nexport function getBrowserLocales() : Array<{ country? : string, lang : string }> {\n    let nav = window.navigator;\n\n    let locales = nav.languages\n        ? Array.prototype.slice.apply(nav.languages)\n        : [];\n\n    if (nav.language) {\n        locales.push(nav.language);\n    }\n\n    if (nav.userLanguage) {\n        locales.push(nav.userLanguage);\n    }\n\n    return locales.map(locale => {\n\n        if (locale && locale.match(/^[a-z]{2}[-_][A-Z]{2}$/)) {\n            let [ lang, country ] = locale.split(/[-_]/);\n            return { country, lang };\n        }\n\n        if (locale && locale.match(/^[a-z]{2}$/)) {\n            return { lang: locale };\n        }\n\n        return null;\n\n    }).filter(Boolean);\n}\n\n\nexport function appendChild(container : HTMLElement, child : HTMLElement | Text) {\n    container.appendChild(child);\n}\n\nexport function isElement(element : mixed) : boolean {\n\n    if (element instanceof window.Element) {\n        return true;\n    }\n\n    if (element !== null && typeof element === 'object' && element.nodeType === 1 && typeof element.style === 'object' && typeof element.ownerDocument === 'object') {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getElementSafe(id : ElementRefType, doc : Document | HTMLElement = document) : ?HTMLElement {\n\n    if (isElement(id)) {\n        // $FlowFixMe\n        return id;\n    }\n\n    if (typeof id === 'string') {\n        return doc.querySelector(id);\n    }\n}\n\nexport function getElement(id : ElementRefType, doc : Document | HTMLElement = document) : HTMLElement {\n\n    let element = getElementSafe(id, doc);\n\n    if (element) {\n        return element;\n    }\n\n    throw new Error(`Can not find element: ${ stringify(id) }`);\n}\n\nexport function elementReady(id : ElementRefType) : ZalgoPromise<window.HTMLElement> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let name = stringify(id);\n        let el = getElementSafe(id);\n\n        if (el) {\n            return resolve(el);\n        }\n\n        if (isDocumentReady()) {\n            return reject(new Error(`Document is ready and element ${ name } does not exist`));\n        }\n\n        let interval = setInterval(() => {\n\n            el = getElementSafe(id);\n\n            if (el) {\n                clearInterval(interval);\n                return resolve(el);\n            }\n\n            if (isDocumentReady()) {\n                clearInterval(interval);\n                return reject(new Error(`Document is ready and element ${ name } does not exist`));\n            }\n        }, 10);\n    });\n}\n\nexport function PopupOpenError(message : string) {\n    this.message = message;\n}\n\nPopupOpenError.prototype = Object.create(Error.prototype);\n\ntype PopupOptions = {|\n    name? : string,\n    width? : number,\n    height? : number,\n    top? : number,\n    left? : number,\n    status? : 0 | 1,\n    resizable? : 0 | 1,\n    toolbar? : 0 | 1,\n    menubar? : 0 | 1,\n    scrollbars? : 0 | 1\n|};\n\nexport function popup(url : string, options? : PopupOptions) : CrossDomainWindowType {\n\n    // $FlowFixMe\n    options = options || {};\n\n    let { width, height } = options;\n\n    let top = 0;\n    let left = 0;\n\n    if (width) {\n        if (window.outerWidth) {\n            left = Math.round((window.outerWidth - width) / 2) + window.screenX;\n        } else if (window.screen.width) {\n            left = Math.round((window.screen.width - width) / 2);\n        }\n    }\n\n    if (height) {\n        if (window.outerHeight) {\n            top = Math.round((window.outerHeight - height) / 2) + window.screenY;\n        } else if (window.screen.height) {\n            top = Math.round((window.screen.height - height) / 2);\n        }\n    }\n\n    options = {\n        top,\n        left,\n        width,\n        height,\n        status:     1,\n        toolbar:    0,\n        menubar:    0,\n        resizable:  1,\n        scrollbars: 1,\n        ...options\n    };\n\n    let name = options.name || '';\n    delete options.name;\n\n    // eslint-disable-next-line array-callback-return\n    let params = Object.keys(options).map(key => {\n        // $FlowFixMe\n        if (options[key]) {\n            return `${ key }=${ stringify(options[key]) }`;\n        }\n    }).filter(Boolean).join(',');\n\n    let win;\n\n    try {\n        win = window.open(url, name, params, true);\n    } catch (err) {\n        throw new PopupOpenError(`Can not open popup window - ${ err.stack || err.message }`);\n    }\n\n    if (isWindowClosed(win)) {\n        let err = new PopupOpenError(`Can not open popup window - blocked`);\n        throw err;\n    }\n\n    window.addEventListener('unload', () => win.close());\n\n    return win;\n}\n\n\nexport function writeToWindow(win : SameDomainWindowType, html : string) {\n    try {\n        win.document.open();\n        win.document.write(html);\n        win.document.close();\n    } catch (err) {\n        try {\n            win.location = `javascript: document.open(); document.write(${ JSON.stringify(html) }); document.close();`;\n        } catch (err2) {\n            // pass\n        }\n    }\n}\n\nexport function writeElementToWindow(win : SameDomainWindowType, el : HTMLElement) {\n\n    let tag = el.tagName.toLowerCase();\n\n    if (tag !== 'html') {\n        throw new Error(`Expected element to be html, got ${ tag }`);\n    }\n\n    let documentElement = win.document.documentElement;\n\n    for (const child of arrayFrom(documentElement.children)) {\n        documentElement.removeChild(child);\n    }\n\n    for (const child of arrayFrom(el.children)) {\n        documentElement.appendChild(child);\n    }\n}\n\nexport function setStyle(el : HTMLElement, styleText : string, doc : Document = window.document) {\n    // $FlowFixMe\n    if (el.styleSheet) {\n        // $FlowFixMe\n        el.styleSheet.cssText = styleText;\n    } else {\n        el.appendChild(doc.createTextNode(styleText));\n    }\n}\n\nexport type ElementOptionsType = {\n    style? : { [ string ] : string },\n    id? : string,\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string\n};\n\nlet awaitFrameLoadPromises : WeakMap<HTMLIFrameElement, ZalgoPromise<HTMLIFrameElement>>;\n\nexport function awaitFrameLoad(frame : HTMLIFrameElement) : ZalgoPromise<HTMLIFrameElement> {\n    awaitFrameLoadPromises = awaitFrameLoadPromises || new WeakMap();\n\n    if (awaitFrameLoadPromises.has(frame)) {\n        let promise = awaitFrameLoadPromises.get(frame);\n        if (promise) {\n            return promise;\n        }\n    }\n\n    let promise = new ZalgoPromise((resolve, reject) => {\n        frame.addEventListener('load', () => {\n            linkFrameWindow(frame);\n            resolve(frame);\n        });\n\n        frame.addEventListener('error', (err : Event) => {\n            if (frame.contentWindow) {\n                resolve(frame);\n            } else {\n                reject(err);\n            }\n        });\n    });\n\n    awaitFrameLoadPromises.set(frame, promise);\n\n    return promise;\n}\n\nexport function awaitFrameWindow(frame : HTMLIFrameElement) : ZalgoPromise<CrossDomainWindowType> {\n    return awaitFrameLoad(frame).then(loadedFrame => {\n\n        if (!loadedFrame.contentWindow) {\n            throw new Error(`Could not find window in iframe`);\n        }\n\n        return loadedFrame.contentWindow;\n    });\n}\n\nexport function createElement(tag : string = 'div', options : ElementOptionsType = {}, container : ?HTMLElement) : HTMLElement {\n\n    tag = tag.toLowerCase();\n    let element = document.createElement(tag);\n\n    if (options.style) {\n        extend(element.style, options.style);\n    }\n\n    if (options.class) {\n        element.className = options.class.join(' ');\n    }\n\n    if (options.id) {\n        element.setAttribute('id', options.id);\n    }\n\n    if (options.attributes) {\n        for (let key of Object.keys(options.attributes)) {\n            element.setAttribute(key, options.attributes[key]);\n        }\n    }\n\n    if (options.styleSheet) {\n        setStyle(element, options.styleSheet);\n    }\n\n    if (container) {\n        appendChild(container, element);\n    }\n\n    if (options.html) {\n        if (tag === 'iframe') {\n            // $FlowFixMe\n            if (!container || !element.contentWindow) {\n                throw new Error(`Iframe html can not be written unless container provided and iframe in DOM`);\n            }\n\n            // $FlowFixMe\n            writeToWindow(element.contentWindow, options.html);\n\n        } else {\n            element.innerHTML = options.html;\n        }\n    }\n\n    return element;\n}\n\n\nexport type IframeElementOptionsType = {\n    style? : { [ string ] : string },\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string,\n    url? : ?string\n};\n\nexport function iframe(options : IframeElementOptionsType = {}, container : ?HTMLElement) : HTMLIFrameElement {\n\n    let attributes = options.attributes || {};\n    let style = options.style || {};\n\n    let frame = createElement('iframe', {\n        attributes: {\n            allowTransparency: 'true',\n            ...attributes\n        },\n        style: {\n            backgroundColor: 'transparent',\n            border:          'none',\n            ...style\n        },\n        html:  options.html,\n        class: options.class\n    });\n\n    const isIE = window.navigator.userAgent.match(/MSIE|Edge/i);\n    \n    if (!frame.hasAttribute('id')) {\n        frame.setAttribute('id', uniqueID());\n    }\n\n    // $FlowFixMe\n    awaitFrameLoad(frame);\n\n    if (container) {\n        let el = getElement(container);\n        el.appendChild(frame);\n    }\n\n    if (options.url || isIE) {\n        frame.setAttribute('src', options.url || 'about:blank');\n    }\n\n    // $FlowFixMe\n    return frame;\n}\n\nexport function addEventListener(obj : HTMLElement, event : string, handler : (event : Event) => void) : CancelableType {\n    obj.addEventListener(event, handler);\n    return {\n        cancel() {\n            obj.removeEventListener(event, handler);\n        }\n    };\n}\n\nexport function bindEvents(element : HTMLElement, eventNames : Array<string>, handler : (event : Event) => void) : CancelableType {\n\n    handler = once(handler);\n\n    for (let eventName of eventNames) {\n        element.addEventListener(eventName, handler);\n    }\n\n    return {\n        cancel: once(() => {\n            for (let eventName of eventNames) {\n                element.removeEventListener(eventName, handler);\n            }\n        })\n    };\n}\n\nconst VENDOR_PREFIXES = [ 'webkit', 'moz', 'ms', 'o' ];\n\nexport function setVendorCSS(element : HTMLElement, name : string, value : string) {\n\n    // $FlowFixMe\n    element.style[name] = value;\n\n    let capitalizedName = capitalizeFirstLetter(name);\n\n    for (let prefix of VENDOR_PREFIXES) {\n        // $FlowFixMe\n        element.style[`${ prefix }${ capitalizedName }`] = value;\n    }\n}\n\nconst ANIMATION_START_EVENTS = [ 'animationstart', 'webkitAnimationStart', 'oAnimationStart', 'MSAnimationStart' ];\nconst ANIMATION_END_EVENTS   = [ 'animationend', 'webkitAnimationEnd', 'oAnimationEnd', 'MSAnimationEnd' ];\n\nexport function animate(element : ElementRefType, name : string, clean : (Function) => void, timeout : number = 1000) : ZalgoPromise<void> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let el = getElement(element);\n\n        if (!el) {\n            return resolve();\n        }\n\n        let hasStarted = false;\n\n        let startTimeout;\n        let endTimeout;\n        let startEvent;\n        let endEvent;\n\n        function cleanUp() {\n            clearTimeout(startTimeout);\n            clearTimeout(endTimeout);\n            startEvent.cancel();\n            endEvent.cancel();\n        }\n\n        startEvent = bindEvents(el, ANIMATION_START_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            clearTimeout(startTimeout);\n\n            event.stopPropagation();\n\n            startEvent.cancel();\n            hasStarted = true;\n\n            endTimeout = setTimeout(() => {\n                cleanUp();\n                resolve();\n            }, timeout);\n        });\n\n        endEvent = bindEvents(el, ANIMATION_END_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            cleanUp();\n\n            // $FlowFixMe\n            if (typeof event.animationName === 'string' && event.animationName !== name) {\n                return reject(`Expected animation name to be ${ name }, found ${ event.animationName }`);\n            }\n\n            return resolve();\n        });\n\n        setVendorCSS(el, 'animationName', name);\n\n        startTimeout = setTimeout(() => {\n            if (!hasStarted) {\n                cleanUp();\n                return resolve();\n            }\n        }, 200);\n\n        if (clean) {\n            clean(cleanUp);\n        }\n    });\n}\n\nconst STYLE = {\n\n    DISPLAY: {\n        NONE:  'none',\n        BLOCK: 'block'\n    },\n\n    VISIBILITY: {\n        VISIBLE: 'visible',\n        HIDDEN:  'hidden'\n    },\n\n    IMPORTANT: 'important'\n};\n\nexport function makeElementVisible(element : HTMLElement) {\n    element.style.setProperty('visibility', '');\n}\n\nexport function makeElementInvisible(element : HTMLElement) {\n    element.style.setProperty('visibility', STYLE.VISIBILITY.HIDDEN, STYLE.IMPORTANT);\n}\n\n\nexport function showElement(element : HTMLElement) {\n    element.style.setProperty('display', '');\n}\n\nexport function hideElement(element : HTMLElement) {\n    element.style.setProperty('display', STYLE.DISPLAY.NONE, STYLE.IMPORTANT);\n}\n\nexport function destroyElement(element : HTMLElement) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n\nexport function showAndAnimate(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    let animation = animate(element, name, clean);\n    showElement(element);\n    return animation;\n}\n\nexport function animateAndHide(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    return animate(element, name, clean).then(() => {\n        hideElement(element);\n    });\n}\n\nexport function addClass(element : HTMLElement, name : string) {\n    element.classList.add(name);\n}\n\nexport function removeClass(element : HTMLElement, name : string) {\n    element.classList.remove(name);\n}\n\nexport function isElementClosed(el : HTMLElement) : boolean {\n    if (!el || !el.parentNode) {\n        return true;\n    }\n    return false;\n}\n\nexport function watchElementForClose(element : HTMLElement, handler : () => mixed) : CancelableType {\n    handler = once(handler);\n\n    let interval;\n\n    if (isElementClosed(element)) {\n        handler();\n    } else {\n        interval = safeInterval(() => {\n            if (isElementClosed(element)) {\n                interval.cancel();\n                handler();\n            }\n        }, 50);\n    }\n\n    return {\n        cancel() {\n            if (interval) {\n                interval.cancel();\n            }\n        }\n    };\n}\n\nexport function fixScripts(el : HTMLElement, doc : Document = window.document) {\n    for (let script of querySelectorAll('script', el)) {\n        let parentNode = script.parentNode;\n\n        if (!parentNode) {\n            continue;\n        }\n\n        let newScript = doc.createElement('script');\n        newScript.text = script.textContent;\n        parentNode.replaceChild(newScript, script);\n    }\n}\n\ntype OnResizeOptions = {|\n    width? : boolean,\n    height? : boolean,\n    interval? : number,\n    win? : SameDomainWindowType\n|};\n\nexport function onResize(el : HTMLElement, handler : ({ width : number, height : number }) => void, { width = true, height = true, interval = 100, win = window } : OnResizeOptions = {}) : {} {\n    let currentWidth = el.offsetWidth;\n    let currentHeight = el.offsetHeight;\n\n    handler({ width: currentWidth, height: currentHeight });\n\n    let check = () => {\n        let newWidth = el.offsetWidth;\n        let newHeight = el.offsetHeight;\n\n        if ((width && newWidth !== currentWidth) || (height && newHeight !== currentHeight)) {\n            handler({ width: newWidth, height: newHeight });\n        }\n\n        currentWidth = newWidth;\n        currentHeight = newHeight;\n    };\n\n    let observer;\n    let timeout;\n\n    if (typeof win.ResizeObserver !== 'undefined') {\n        observer = new win.ResizeObserver(check);\n        observer.observe(el);\n\n    } else if (typeof win.MutationObserver !== 'undefined') {\n        observer = new win.MutationObserver(check);\n        observer.observe(el, {\n            attributes:    true,\n            childList:     true,\n            subtree:       true,\n            characterData: false\n        });\n        win.addEventListener('resize', check);\n    } else {\n        let loop = () => {\n            check();\n            timeout = setTimeout(loop, interval);\n        };\n        loop();\n    }\n\n    return {\n        cancel: () => {\n            observer.disconnect();\n            window.removeEventListener('resize', check);\n            clearTimeout(timeout);\n        }\n    };\n}\n","/* @flow */\n\nexport function hasNativeWeakMap() : boolean {\n\n    if (typeof WeakMap === 'undefined') {\n        return false;\n    }\n\n    if (typeof Object.freeze === 'undefined') {\n        return false;\n    }\n\n    try {\n\n        let testWeakMap = new WeakMap();\n        let testKey = {};\n        let testValue = '__testvalue__';\n\n        Object.freeze(testKey);\n\n        testWeakMap.set(testKey, testValue);\n\n        if (testWeakMap.get(testKey) === testValue) {\n            return true;\n        }\n\n        return false;\n\n    } catch (err) {\n\n        return false;\n    }\n}\n","/* @flow */\n\nexport function isPerc(str : string) : boolean {\n    return typeof str === 'string' && (/^[0-9]+%$/).test(str);\n}\n\nexport function isPx(str : string) : boolean {\n    return typeof str === 'string' && (/^[0-9]+px$/).test(str);\n}\n\nexport function toNum(val : string | number) : number {\n\n    if (typeof val === 'number') {\n        return val;\n    }\n\n    let match = val.match(/^([0-9]+)(px|%)$/);\n\n    if (!match) {\n        throw new Error(`Could not match css value from ${ val }`);\n    }\n\n    return parseInt(match[1], 10);\n}\n\nexport function toPx(val : number | string) : string {\n    return `${ toNum(val) }px`;\n}\n\nexport function toCSS(val : number | string) : string {\n\n    if (typeof val === 'number') {\n        return toPx(val);\n    }\n\n    return isPerc(val) ? val : toPx(val);\n}\n\nexport function percOf(num : number, perc : string) : number {\n    return parseInt(num * toNum(perc)  / 100, 10);\n}\n\nexport function normalizeDimension(dim : string | number, max : number) : number {\n    if (typeof dim === 'number') {\n        return dim;\n    } else if (isPerc(dim)) {\n        return percOf(max, dim);\n    } else if (isPx(dim)) {\n        return toNum(dim);\n    } else {\n        throw new Error(`Can not normalize dimension: ${ dim }`);\n    }\n}\n","/* @flow */\n\nexport const BRIDGE_TIMEOUT = 5000;\nexport const CHILD_WINDOW_TIMEOUT = 5000;\n\nexport const ACK_TIMEOUT = 2000;\nexport const ACK_TIMEOUT_KNOWN = 10000;\nexport const RES_TIMEOUT = __TEST__ ? 2000 : -1;\nexport const RESPONSE_CYCLE_TIME = 500;\n","/* @flow */\n\nexport const MESSAGE_TYPE = {\n    REQUEST:  ('postrobot_message_request' : 'postrobot_message_request'),\n    RESPONSE: ('postrobot_message_response' : 'postrobot_message_response'),\n    ACK:      ('postrobot_message_ack' : 'postrobot_message_ack')\n};\n\nexport const MESSAGE_ACK = {\n    SUCCESS: ('success' : 'success'),\n    ERROR:   ('error' : 'error')\n};\n\nexport const MESSAGE_NAME = {\n    METHOD:      ('postrobot_method' : 'postrobot_method'),\n    HELLO:       ('postrobot_hello' : 'postrobot_hello'),\n    OPEN_TUNNEL: ('postrobot_open_tunnel' : 'postrobot_open_tunnel')\n};\n\nexport const SEND_STRATEGY = {\n    POST_MESSAGE: ('postrobot_post_message' : 'postrobot_post_message'),\n    BRIDGE:       ('postrobot_bridge' : 'postrobot_bridge'),\n    GLOBAL:       ('postrobot_global' : 'postrobot_global')\n};\n\nexport const BRIDGE_NAME_PREFIX = '__postrobot_bridge__';\nexport const POSTROBOT_PROXY =    '__postrobot_proxy__';\n\nexport const WILDCARD = '*';\n\nexport const SERIALIZATION_TYPE = {\n    CROSS_DOMAIN_ZALGO_PROMISE: ('cross_domain_zalgo_promise' : 'cross_domain_zalgo_promise'),\n    CROSS_DOMAIN_FUNCTION:      ('cross_domain_function' : 'cross_domain_function'),\n    CROSS_DOMAIN_WINDOW:        ('cross_domain_window' : 'cross_domain_window')\n};\n","/* @flow */\n\nimport { type CrossDomainWindowType, type SameDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { getOrSet } from 'belter/src';\n\nexport function getGlobal(win : SameDomainWindowType = window) : Object {\n    if (win !== window) {\n        return win[__POST_ROBOT__.__GLOBAL_KEY__];\n    }\n    const global : Object = win[__POST_ROBOT__.__GLOBAL_KEY__] = win[__POST_ROBOT__.__GLOBAL_KEY__] || {};\n    return global;\n}\n\nexport function deleteGlobal() {\n    delete window[__POST_ROBOT__.__GLOBAL_KEY__];\n}\n\ntype ObjectGetter = () => Object;\nconst getObj : ObjectGetter = () => ({});\n\ntype GetOrSet<T> = ((string, () => T) => T) & ((string, () => void) => void);\n\ntype GlobalStore<T> = {|\n    get : ((string, T) => T) & ((string, void) => T | void),\n    set : (string, T) => T,\n    has : (string) => boolean,\n    del : (string) => void,\n    getOrSet : GetOrSet<T>,\n    reset : () => void,\n    keys : () => $ReadOnlyArray<string>\n|};\n\n// $FlowFixMe\nexport function globalStore<T : mixed>(key? : string = 'store', defStore? : ObjectGetter = getObj) : GlobalStore<T> {\n    return getOrSet(getGlobal(), key, () => {\n        let store = defStore();\n\n        return {\n            has: (storeKey) => {\n                return store.hasOwnProperty(storeKey);\n            },\n            get: (storeKey, defVal) => {\n                // $FlowFixMe\n                return store.hasOwnProperty(storeKey) ? store[storeKey] : defVal;\n            },\n            set: (storeKey, val) => {\n                store[storeKey] = val;\n                return val;\n            },\n            del: (storeKey) => {\n                delete store[storeKey];\n            },\n            getOrSet: (storeKey, getter) => {\n                // $FlowFixMe\n                return getOrSet(store, storeKey, getter);\n            },\n            reset: () => {\n                store = defStore();\n            },\n            keys: () => {\n                return Object.keys(store);\n            }\n        };\n    });\n}\n\nexport class WildCard {}\n\nexport function getWildcard() : WildCard {\n    const global = getGlobal();\n    global.WINDOW_WILDCARD = global.WINDOW_WILDCARD || new WildCard();\n    return global.WINDOW_WILDCARD;\n}\n\ntype WindowStore<T> = {|\n    get : ((CrossDomainWindowType | WildCard, T) => T) & ((CrossDomainWindowType | WildCard, void) => T | void),\n    set : (CrossDomainWindowType | WildCard, T) => T,\n    has : (CrossDomainWindowType | WildCard) => boolean,\n    del : (CrossDomainWindowType | WildCard) => void,\n    getOrSet : (CrossDomainWindowType | WildCard, () => T) => T\n|};\n\n// $FlowFixMe\nexport function windowStore<T>(key? : string = 'store', defStore? : ObjectGetter = getObj) : WindowStore<T> {\n    return globalStore('windowStore').getOrSet(key, () => {\n        const winStore = new WeakMap();\n\n        const getStore = (win : CrossDomainWindowType | WildCard) : ObjectGetter => {\n            return winStore.getOrSet(win, defStore);\n        };\n    \n        return {\n            has: (win) => {\n                const store = getStore(win);\n                return store.hasOwnProperty(key);\n            },\n            get: (win, defVal) => {\n                const store = getStore(win);\n                // $FlowFixMe\n                return store.hasOwnProperty(key) ? store[key] : defVal;\n            },\n            set: (win, val) => {\n                const store = getStore(win);\n                store[key] = val;\n                return val;\n            },\n            del: (win) => {\n                const store = getStore(win);\n                delete store[key];\n            },\n            getOrSet: (win, getter) => {\n                const store = getStore(win);\n                return getOrSet(store, key, getter);\n            }\n        };\n    });\n}\n","/* @flow */\n\nimport { getAncestor, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { noop, uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nfunction getInstanceID() : string {\n    return globalStore('instance').getOrSet('instanceID', uniqueID);\n}\n\nfunction getHelloPromise(win : CrossDomainWindowType) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string }> {\n    const helloPromises = windowStore('helloPromises');\n    return helloPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nfunction listenForHello({ on } : { on : OnType }) : CancelableType {\n    return on(MESSAGE_NAME.HELLO, { domain: WILDCARD }, ({ source, origin }) => {\n        getHelloPromise(source).resolve({ win: source, domain: origin });\n        return { instanceID: getInstanceID() };\n    });\n}\n\nexport function sayHello(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string, instanceID : string }> {\n    return send(win, MESSAGE_NAME.HELLO, { instanceID: getInstanceID() }, { domain: WILDCARD, timeout: -1 })\n        .then(({ origin, data: { instanceID } }) => {\n            getHelloPromise(win).resolve({ win, domain: origin });\n            return { win, domain: origin, instanceID };\n        });\n}\n\nexport function getWindowInstanceID(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<string> {\n    return windowStore('windowInstanceIDPromises').getOrSet(win, () => {\n        return sayHello(win, { send }).then(({ instanceID }) => instanceID);\n    });\n}\n\nexport function initHello({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('helloListener', () => {\n        const listener = listenForHello({ on });\n\n        const parent = getAncestor();\n        if (parent) {\n            sayHello(parent, { send }).catch(noop);\n        }\n\n        return listener;\n    });\n}\n\nexport function awaitWindowHello(win : CrossDomainWindowType, timeout : number = 5000, name : string = 'Window') : ZalgoPromise<{ win : CrossDomainWindowType, domain : string }> {\n    let promise = getHelloPromise(win);\n\n    if (timeout !== -1) {\n        promise = promise.timeout(timeout, new Error(`${ name } did not load after ${ timeout }ms`));\n    }\n\n    return promise;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { windowStore } from '../global';\n\nexport function markWindowKnown(win : CrossDomainWindowType) {\n    const knownWindows = windowStore('knownWindows');\n    knownWindows.set(win, true);\n}\n\nexport function isWindowKnown(win : CrossDomainWindowType) : boolean {\n    const knownWindows = windowStore('knownWindows');\n    return knownWindows.get(win, false);\n}\n","/* @flow */\n\nexport const TYPE = {\n    FUNCTION:  ('function' : 'function'),\n    ERROR:     ('error' : 'error'),\n    PROMISE:   ('promise' : 'promise'),\n    REGEX:     ('regex' : 'regex'),\n    DATE:      ('date' : 'date'),\n    ARRAY:     ('array' : 'array'),\n    OBJECT:    ('object' : 'object'),\n    STRING:    ('string' : 'string'),\n    NUMBER:    ('number' : 'number'),\n    BOOLEAN:   ('boolean' : 'boolean'),\n    NULL:      ('null' : 'null'),\n    UNDEFINED: ('undefined' : 'undefined')\n};\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { CustomSerializedType } from './types';\n\nexport function isSerializedType(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null && typeof item.__type__ === 'string');\n}\n\nexport function determineType(val : mixed) : $Values<typeof TYPE> | void {\n    if (typeof val === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    if (val === null) {\n        return TYPE.NULL;\n    }\n\n    if (Array.isArray(val)) {\n        return TYPE.ARRAY;\n    }\n\n    if (typeof val === 'function') {\n        return TYPE.FUNCTION;\n    }\n\n    if (typeof val === 'object') {\n\n        if (val instanceof Error) {\n            return TYPE.ERROR;\n        }\n\n        if (typeof val.then === 'function') {\n            return TYPE.PROMISE;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object RegExp]') {\n            return TYPE.REGEX;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object Date]') {\n            return TYPE.DATE;\n        }\n\n        return TYPE.OBJECT;\n    }\n\n    if (typeof val === 'string') {\n        return TYPE.STRING;\n    }\n\n    if (typeof val === 'number') {\n        return TYPE.NUMBER;\n    }\n\n    if (typeof val === 'boolean') {\n        return TYPE.BOOLEAN;\n    }\n}\n\nexport function serializeType<T : string, V : mixed>(type : T, val : V) : CustomSerializedType<T, V> {\n    return {\n        __type__: type,\n        __val__:  val\n    };\n}\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { Thenable, CustomSerializedType, NativeSerializedType } from './types';\nimport { determineType, isSerializedType } from './common';\nimport {\n    serializeFunction,\n    serializeError, type SerializedError,\n    serializePromise,\n    serializeRegex, type SerializedRegex,\n    serializeDate, type SerializedDate,\n    serializeArray,\n    serializeObject,\n    serializeString,\n    serializeNumber,\n    serializeBoolean,\n    serializeNull\n} from './serializers';\n\ntype NativeSerializer<V : mixed, S : mixed, T : $Values<typeof TYPE>> = (value : V, key : string) => NativeSerializedType<T, S>;\ntype CustomSerializer<V : mixed, S : mixed, T : string> = (value : V, key : string) => CustomSerializedType<T, S>;\ntype PrimitiveSerializer<V : mixed, S : mixed> = (value : V, key : string) => S;\ntype CustomOrPrimitiveSerializer<V : mixed, T : string> = CustomSerializer<V, *, T> | PrimitiveSerializer<V, *>;\ntype NativeOrCustomOrPrimitiveSerializer<V : mixed, S : mixed, T : string> = NativeSerializer<V, S, T> | CustomOrPrimitiveSerializer<V, T>;\n\ntype Serializers = {|\n    function? : CustomOrPrimitiveSerializer<Function, typeof TYPE.FUNCTION>,\n    error? : NativeOrCustomOrPrimitiveSerializer<Error, SerializedError, typeof TYPE.ERROR>,\n    promise? : CustomOrPrimitiveSerializer<Thenable, typeof TYPE.PROMISE>,\n    regex? : NativeOrCustomOrPrimitiveSerializer<RegExp, SerializedRegex, typeof TYPE.REGEX>,\n    date? : NativeOrCustomOrPrimitiveSerializer<Date, SerializedDate, typeof TYPE.DATE>,\n    array? : CustomOrPrimitiveSerializer<$ReadOnlyArray<mixed>, typeof TYPE.ARRAY>,\n    object? : CustomOrPrimitiveSerializer<Object, typeof TYPE.OBJECT>,\n    string? : CustomOrPrimitiveSerializer<string, typeof TYPE.STRING>,\n    number? : CustomOrPrimitiveSerializer<number, typeof TYPE.NUMBER>,\n    boolean? : CustomOrPrimitiveSerializer<boolean, typeof TYPE.BOOLEAN>,\n    null? : CustomOrPrimitiveSerializer<null, typeof TYPE.NULL>\n|};\n\nconst SERIALIZER : Serializers = {\n    [ TYPE.FUNCTION ]:  serializeFunction,\n    [ TYPE.ERROR ]:     serializeError,\n    [ TYPE.PROMISE ]:   serializePromise,\n    [ TYPE.REGEX ]:     serializeRegex,\n    [ TYPE.DATE ]:      serializeDate,\n    [ TYPE.ARRAY ]:     serializeArray,\n    [ TYPE.OBJECT ]:    serializeObject,\n    [ TYPE.STRING ]:    serializeString,\n    [ TYPE.NUMBER ]:    serializeNumber,\n    [ TYPE.BOOLEAN ]:   serializeBoolean,\n    [ TYPE.NULL ]:      serializeNull\n};\n\n// $FlowFixMe\nconst defaultSerializers : Serializers = {};\n\nexport function serialize<T : mixed>(obj : T, serializers : Serializers = defaultSerializers) : string {\n\n    function replacer(key) : ?mixed {\n        const val = this[key];\n\n        if (isSerializedType(this)) {\n            return val;\n        }\n        \n        const type = determineType(val);\n\n        if (!type) {\n            return val;\n        }\n\n        // $FlowFixMe\n        const serializer = serializers[type] || SERIALIZER[type];\n\n        if (!serializer) {\n            return val;\n        }\n\n        return serializer(val, key);\n    }\n\n    const result = JSON.stringify(obj, replacer);\n\n    if (typeof result === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    return result;\n}\n","/* @flow */\n\nexport type SerializedFunction = void;\n\nexport function serializeFunction() : SerializedFunction {\n    // pass\n}\n\nexport function deserializeFunction() {\n    throw new Error(`Function serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedError = {|\n    message : string,\n    stack : string,\n    code : string | number | void\n|};\n\n// $FlowFixMe\nexport function serializeError({ message, stack, code } : Error) : NativeSerializedType<typeof TYPE.ERROR, SerializedError> {\n    return serializeType(TYPE.ERROR, { message, stack, code });\n}\n\nexport function deserializeError({ message, stack, code } : SerializedError) : Error {\n    const error = new Error(message);\n    // $FlowFixMe\n    error.code = code;\n    error.stack = `${ stack }\\n\\n${ error.stack }`;\n    return error;\n}\n","/* @flow */\n\nexport type SerializedPromise = void;\n\nexport function serializePromise() : SerializedPromise {\n    // pass\n}\n\nexport function deserializePromise() {\n    throw new Error(`Promise serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedRegex = string;\n\nexport function serializeRegex(val : RegExp) : NativeSerializedType<typeof TYPE.REGEX, SerializedRegex> {\n    return serializeType(TYPE.REGEX, val.source);\n}\n\nexport function deserializeRegex(val : string) : RegExp {\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    return new RegExp(val);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedDate = string;\n\nexport function serializeDate(val : Date) : NativeSerializedType<typeof TYPE.DATE, SerializedDate> {\n    return serializeType(TYPE.DATE, val.toJSON());\n}\n\nexport function deserializeDate(val : string) : Date {\n    return new Date(val);\n}\n","/* @flow */\n\nexport type SerializedArray<T : mixed = mixed> = $ReadOnlyArray<T>;\n\nexport function serializeArray<T : mixed>(val : $ReadOnlyArray<T>) : SerializedArray<T> {\n    return val;\n}\n\nexport function deserializeArray<T : mixed>(val : SerializedArray<T>) : $ReadOnlyArray<T> {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedObject = Object;\n\nexport function serializeObject(val : Object) : SerializedObject {\n    return val;\n}\n\nexport function deserializeObject(val : SerializedObject) : Object {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedString = string;\n\nexport function serializeString(val : string) : SerializedString {\n    return val;\n}\n\nexport function deserializeString(val : SerializedString) : string {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNumber = number;\n\nexport function serializeNumber(val : number) : SerializedNumber {\n    return val;\n}\n\nexport function deserializeNumber(val : SerializedNumber) : number {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedBoolean = boolean;\n\nexport function serializeBoolean(val : boolean) : SerializedBoolean {\n    return val;\n}\n\nexport function deserializeBoolean(val : SerializedBoolean) : boolean {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNull = null;\n\nexport function serializeNull(val : null) : SerializedNull {\n    return val;\n}\n\nexport function deserializeNull(val : SerializedNull) : null {\n    return val;\n}\n","/* @flow */\n\nimport type { Thenable } from './types';\nimport { TYPE } from './constants';\nimport { determineType, isSerializedType } from './common';\nimport {\n    deserializeFunction,\n    deserializeError, type SerializedError,\n    deserializePromise,\n    deserializeRegex, type SerializedRegex,\n    deserializeDate, type SerializedDate,\n    deserializeArray,\n    deserializeObject,\n    deserializeString,\n    deserializeNumber,\n    deserializeBoolean,\n    deserializeNull\n} from './serializers';\n\ntype Deserializer<V : mixed, S : mixed> = (serializedValue : S, key : string) => V;\ntype PrimitiveDeserializer<V, S = V> = (serializedValue : S, key : string) => V;\n\ntype Deserializers = {\n    function? : Deserializer<Function, *>,\n    error? : Deserializer<Error, SerializedError>,\n    promise? : Deserializer<Thenable, *>,\n    regex? : Deserializer<RegExp, SerializedRegex>,\n    date? : Deserializer<Date, SerializedDate>,\n    array? : PrimitiveDeserializer<$ReadOnlyArray<mixed>>,\n    object? : PrimitiveDeserializer<Object>,\n    string? : PrimitiveDeserializer<string>,\n    number? : PrimitiveDeserializer<number>,\n    boolean? : PrimitiveDeserializer<boolean>,\n    null? : PrimitiveDeserializer<null>,\n    [string] : Deserializer<mixed, *>\n};\n\n// $FlowFixMe\nconst DESERIALIZER : Deserializers = {\n    [ TYPE.FUNCTION ]:  deserializeFunction,\n    [ TYPE.ERROR ]:     deserializeError,\n    [ TYPE.PROMISE ]:   deserializePromise,\n    [ TYPE.REGEX ]:     deserializeRegex,\n    [ TYPE.DATE ]:      deserializeDate,\n    [ TYPE.ARRAY ]:     deserializeArray,\n    [ TYPE.OBJECT ]:    deserializeObject,\n    [ TYPE.STRING ]:    deserializeString,\n    [ TYPE.NUMBER ]:    deserializeNumber,\n    [ TYPE.BOOLEAN ]:   deserializeBoolean,\n    [ TYPE.NULL ]:      deserializeNull\n};\n\n// $FlowFixMe\nconst defaultDeserializers : Deserializers = {};\n\nexport function deserialize<T : mixed | null | void>(str : string, deserializers : Deserializers = defaultDeserializers) : T {\n    if (str === TYPE.UNDEFINED) {\n        // $FlowFixMe\n        return;\n    }\n\n    function replacer(key, val) : ?mixed {\n        if (isSerializedType(this)) {\n            return val;\n        }\n\n        let type;\n        let value;\n\n        if (isSerializedType(val)) {\n            type = val.__type__;\n            value = val.__val__;\n        } else {\n            type = determineType(val);\n            value = val;\n        }\n\n        if (!type) {\n            return value;\n        }\n\n        // $FlowFixMe\n        const deserializer = deserializers[type] || DESERIALIZER[type];\n\n        if (!deserializer) {\n            return value;\n        }\n\n        return deserializer(value, key);\n    }\n\n    return JSON.parse(str, replacer);\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, isSameDomain, isOpener, isSameTopWindow, matchDomain, getUserAgent, getDomainFromUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { BRIDGE_NAME_PREFIX } from '../conf';\nimport { windowStore } from '../global';\n\nexport function needsBridgeForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForWin(win : CrossDomainWindowType) : boolean {\n\n    if (!isSameTopWindow(window, win)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForDomain(domain : ?string, win : ?CrossDomainWindowType) : boolean {\n\n    if (domain) {\n        if (getDomain() !== getDomainFromUrl(domain)) {\n            return true;\n        }\n    } else if (win) {\n        if (!isSameDomain(win))  {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function needsBridge({ win, domain } : { win? : CrossDomainWindowType, domain? : string }) : boolean {\n\n    if (!needsBridgeForBrowser()) {\n        return false;\n    }\n\n    if (domain && !needsBridgeForDomain(domain, win)) {\n        return false;\n    }\n\n    if (win && !needsBridgeForWin(win)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function getBridgeName(domain : string) : string {\n\n    domain = domain || getDomainFromUrl(domain);\n\n    const sanitizedDomain = domain.replace(/[^a-zA-Z0-9]+/g, '_');\n\n    const id = `${ BRIDGE_NAME_PREFIX }_${ sanitizedDomain }`;\n\n    return id;\n}\n\nexport function isBridge() : boolean {\n    return Boolean(window.name && window.name === getBridgeName(getDomain()));\n}\n\nexport const documentBodyReady = new ZalgoPromise(resolve => {\n\n    if (window.document && window.document.body) {\n        return resolve(window.document.body);\n    }\n\n    const interval = setInterval(() => {\n        if (window.document && window.document.body) {\n            clearInterval(interval);\n            return resolve(window.document.body);\n        }\n    }, 10);\n});\n\nexport function registerRemoteWindow(win : CrossDomainWindowType) {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    remoteWindowPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nexport function findRemoteWindow(win : CrossDomainWindowType) : ZalgoPromise<(remoteWin : CrossDomainWindowType, message : string, remoteDomain : string) => void> {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    const remoteWinPromise = remoteWindowPromises.get(win);\n\n    if (!remoteWinPromise) {\n        throw new Error(`Remote window promise not found`);\n    }\n\n    return remoteWinPromise;\n}\n\ntype SendMessageType = {|\n    (string) : void,\n    fireAndForget : (string) => void\n|};\n\nexport function registerRemoteSendMessage(win : CrossDomainWindowType, domain : string, sendMessage : SendMessageType) {\n    const sendMessageWrapper = (remoteWin : CrossDomainWindowType, remoteDomain : string, message : string) => {\n        if (remoteWin !== win) {\n            throw new Error(`Remote window does not match window`);\n        }\n\n        if (!matchDomain(remoteDomain, domain)) {\n            throw new Error(`Remote domain ${ remoteDomain } does not match domain ${ domain }`);\n        }\n\n        sendMessage.fireAndForget(message);\n    };\n\n    findRemoteWindow(win).resolve(sendMessageWrapper);\n}\n\nexport function rejectRemoteSendMessage(win : CrossDomainWindowType, err : Error) {\n    findRemoteWindow(win).reject(err).catch(noop);\n}\n\nexport function sendBridgeMessage(win : CrossDomainWindowType, domain : string, message : string) : ZalgoPromise<void> {\n\n    const messagingChild  = isOpener(window, win);\n    const messagingParent = isOpener(win, window);\n\n    if (!messagingChild && !messagingParent) {\n        throw new Error(`Can only send messages to and from parent and popup windows`);\n    }\n\n    return findRemoteWindow(win).then(sendMessage => {\n        return sendMessage(win, domain, message);\n    });\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, getFrameByName, isWindowClosed, getDomainFromUrl, normalizeMockUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { BRIDGE_TIMEOUT, MESSAGE_NAME } from '../conf';\nimport { awaitWindowHello } from '../lib';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { getBridgeName, documentBodyReady, registerRemoteSendMessage, registerRemoteWindow } from './common';\n\nexport function listenForOpenTunnel({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) {\n    const popupWindowsByName = globalStore('popupWindowsByName');\n\n    on(MESSAGE_NAME.OPEN_TUNNEL, ({ source, origin, data }) => {\n        const bridgePromise = globalStore('bridges').get(origin);\n\n        if (!bridgePromise) {\n            throw new Error(`Can not find bridge promise for domain ${ origin }`);\n        }\n\n        return bridgePromise.then(bridge => {\n\n            // $FlowFixMe\n            if (source !== bridge) {\n                // $FlowFixMe\n                throw new Error(`Message source does not matched registered bridge for domain ${ origin }`);\n            }\n\n            if (!data.name) {\n                throw new Error(`Register window expected to be passed window name`);\n            }\n\n            if (!data.sendMessage) {\n                throw new Error(`Register window expected to be passed sendMessage method`);\n            }\n\n            if (!popupWindowsByName.has(data.name)) {\n                throw new Error(`Window with name ${ data.name } does not exist, or was not opened by this window`);\n            }\n\n            // $FlowFixMe\n            if (!popupWindowsByName.get(data.name).domain) {\n                throw new Error(`We do not have a registered domain for window ${ data.name }`);\n            }\n\n            // $FlowFixMe\n            if (popupWindowsByName.get(data.name).domain !== origin) {\n                // $FlowFixMe\n                throw new Error(`Message origin ${ origin } does not matched registered window origin ${ popupWindowsByName.get(data.name).domain }`);\n            }\n\n            // $FlowFixMe\n            registerRemoteSendMessage(popupWindowsByName.get(data.name).win, origin, data.sendMessage);\n\n            return {\n                sendMessage(message) {\n\n                    if (!window || window.closed) {\n                        return;\n                    }\n\n                    const winDetails = popupWindowsByName.get(data.name);\n\n                    if (!winDetails) {\n                        return;\n                    }\n\n                    try {\n                        receiveMessage({\n                            data:   message,\n                            origin: winDetails.domain,\n                            source: winDetails.win\n                        }, { on, send });\n                    } catch (err) {\n                        ZalgoPromise.reject(err);\n                    }\n                }\n            };\n        });\n    });\n}\n\nfunction openBridgeFrame(name : string, url : string) : HTMLIFrameElement {\n\n    const iframe = document.createElement(`iframe`);\n\n    iframe.setAttribute(`name`, name);\n    iframe.setAttribute(`id`,   name);\n\n    iframe.setAttribute(`style`, `display: none; margin: 0; padding: 0; border: 0px none; overflow: hidden;`);\n    iframe.setAttribute(`frameborder`, `0`);\n    iframe.setAttribute(`border`, `0`);\n    iframe.setAttribute(`scrolling`, `no`);\n    iframe.setAttribute(`allowTransparency`, `true`);\n\n    iframe.setAttribute(`tabindex`, `-1`);\n    iframe.setAttribute(`hidden`, `true`);\n    iframe.setAttribute(`title`, ``);\n    iframe.setAttribute(`role`, `presentation`);\n\n    iframe.src = url;\n\n    return iframe;\n}\n\nexport function hasBridge(url : string, domain : string) : boolean {\n    const bridges = globalStore('bridges');\n    return bridges.has(domain || getDomainFromUrl(url));\n}\n\nexport function openBridge(url : string, domain : string) : ZalgoPromise<CrossDomainWindowType> {\n    const bridges = globalStore('bridges');\n    const bridgeFrames = globalStore('bridgeFrames');\n    \n    domain = domain || getDomainFromUrl(url);\n    \n    return bridges.getOrSet(domain, () => ZalgoPromise.try(() => {\n\n        if (getDomain() === domain) {\n            throw new Error(`Can not open bridge on the same domain as current domain: ${ domain }`);\n        }\n\n        const name  = getBridgeName(domain);\n        const frame = getFrameByName(window, name);\n\n        if (frame) {\n            throw new Error(`Frame with name ${ name } already exists on page`);\n        }\n\n        const iframe = openBridgeFrame(name, url);\n        bridgeFrames.set(domain, iframe);\n\n        return documentBodyReady.then(body => {\n\n            body.appendChild(iframe);\n            const bridge = iframe.contentWindow;\n\n            return new ZalgoPromise((resolve, reject) => {\n\n                iframe.addEventListener('load', resolve);\n                iframe.addEventListener('error', reject);\n\n            }).then(() => {\n\n                return awaitWindowHello(bridge, BRIDGE_TIMEOUT, `Bridge ${ url }`);\n\n            }).then(() => {\n\n                return bridge;\n            });\n        });\n    }));\n}\n\ntype WinDetails = {|\n    win : CrossDomainWindowType,\n    domain? : ?string,\n    name? : ?string\n|};\n\nexport function linkWindow({ win, name, domain } : WinDetails) : WinDetails {\n    const popupWindowsByName = globalStore('popupWindowsByName');\n    const popupWindowsByWin = windowStore('popupWindowsByWin');\n\n    for (const winName of popupWindowsByName.keys()) {\n        // $FlowFixMe\n        if (isWindowClosed(popupWindowsByName.get(winName).win)) {\n            popupWindowsByName.del(winName);\n        }\n    }\n\n    const details : WinDetails = popupWindowsByWin.getOrSet(win, () => {\n        if (!name) {\n            return { win };\n        }\n        \n        return popupWindowsByName.getOrSet(name, () => {\n            return { win, name };\n        });\n    });\n\n    if (details.win && details.win !== win) {\n        throw new Error(`Different window already linked for window: ${ name || 'undefined' }`);\n    }\n\n    if (name) {\n        if (details.name && details.name !== name) {\n            throw new Error(`Different window already linked for name ${ name }: ${ details.name }`);\n        }\n\n        details.name = name;\n        popupWindowsByName.set(name, details);\n    }\n\n    if (domain) {\n        details.domain = domain;\n        registerRemoteWindow(win);\n    }\n\n    popupWindowsByWin.set(win, details);\n    \n    return details;\n}\n\nexport function linkUrl(win : CrossDomainWindowType, url : string) {\n    linkWindow({ win, domain: getDomainFromUrl(url) });\n}\n\nexport function listenForWindowOpen() {\n    const windowOpen = window.open;\n\n    window.open = function windowOpenWrapper(url : string, name : string, options : string, last : mixed) : mixed {\n        const win = windowOpen.call(this, normalizeMockUrl(url), name, options, last);\n    \n        if (!win) {\n            return win;\n        }\n    \n        linkWindow({ win, name, domain: url ? getDomainFromUrl(url) : null });\n    \n        return win;\n    };\n}\n\nexport function destroyBridges() {\n    const bridges = globalStore('bridges');\n    const bridgeFrames = globalStore('bridgeFrames');\n\n    for (const domain of bridgeFrames.keys()) {\n        const frame = bridgeFrames.get(domain);\n        if (frame && frame.parentNode) {\n            frame.parentNode.removeChild(frame);\n        }\n    }\n    bridgeFrames.reset();\n    bridges.reset();\n}\n","/* @flow */\n\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { listenForWindowOpen, listenForOpenTunnel } from './parent';\nimport { setupOpenTunnelToParent } from './bridge';\nimport { openTunnelToOpener } from './child';\n\nexport function setupBridge({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) {\n    listenForWindowOpen();\n    listenForOpenTunnel({ on, send, receiveMessage });\n    setupOpenTunnelToParent({ on, send });\n    openTunnelToOpener({ on, send, receiveMessage });\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { getParent, isWindowClosed, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop, uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { getGlobal, globalStore } from '../global';\nimport type { SendType, ResponseMessageEvent } from '../types';\n\nfunction cleanTunnelWindows() {\n    const tunnelWindows = globalStore('tunnelWindows');\n\n    for (const key of tunnelWindows.keys()) {\n        const tunnelWindow = tunnelWindows[key];\n\n        try {\n            noop(tunnelWindow.source);\n        } catch (err) {\n            tunnelWindows.del(key);\n            continue;\n        }\n\n        if (isWindowClosed(tunnelWindow.source)) {\n            tunnelWindows.del(key);\n        }\n    }\n}\n\ntype TunnelWindowDataType = {|\n    name : string,\n    source : CrossDomainWindowType,\n    canary : () => void,\n    sendMessage : (message : string) => void\n|};\n\nfunction addTunnelWindow({ name, source, canary, sendMessage } : TunnelWindowDataType) : string {\n    cleanTunnelWindows();\n    const id = uniqueID();\n    const tunnelWindows = globalStore('tunnelWindows');\n    tunnelWindows.set(id, { name, source, canary, sendMessage });\n    return id;\n}\n\nexport function setupOpenTunnelToParent({ send } : { send : SendType }) {\n    getGlobal(window).openTunnelToParent = function openTunnelToParent({ name, source, canary, sendMessage } : TunnelWindowDataType) : ZalgoPromise<ResponseMessageEvent> {\n\n        const tunnelWindows = globalStore('tunnelWindows');\n        const parentWindow = getParent(window);\n    \n        if (!parentWindow) {\n            throw new Error(`No parent window found to open tunnel to`);\n        }\n    \n        const id = addTunnelWindow({ name, source, canary, sendMessage });\n    \n        return send(parentWindow, MESSAGE_NAME.OPEN_TUNNEL, {\n    \n            name,\n    \n            sendMessage() {\n    \n                const tunnelWindow = tunnelWindows.get(id);\n    \n                try {\n                    // IE gets antsy if you try to even reference a closed window\n                    noop(tunnelWindow && tunnelWindow.source);\n                } catch (err) {\n                    tunnelWindows.del(id);\n                    return;\n                }\n    \n                if (!tunnelWindow || !tunnelWindow.source || isWindowClosed(tunnelWindow.source)) {\n                    return;\n                }\n    \n                try {\n                    tunnelWindow.canary();\n                } catch (err) {\n                    return;\n                }\n    \n                tunnelWindow.sendMessage.apply(this, arguments);\n            }\n    \n        }, { domain: WILDCARD });\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isSameDomain, getOpener, getDomain, getFrameByName, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { getGlobal, windowStore } from '../global';\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { needsBridge, registerRemoteWindow, rejectRemoteSendMessage, registerRemoteSendMessage, getBridgeName } from './common';\n\nfunction awaitRemoteBridgeForWindow (win : CrossDomainWindowType) : ZalgoPromise<?CrossDomainWindowType> {\n    return windowStore('remoteBridgeAwaiters').getOrSet(win, () => {\n        return ZalgoPromise.try(() => {\n            const frame = getFrameByName(win, getBridgeName(getDomain()));\n\n            if (!frame) {\n                return;\n            }\n\n            // $FlowFixMe\n            if (isSameDomain(frame) && isSameDomain(frame) && getGlobal(frame)) {\n                return frame;\n            }\n\n            return new ZalgoPromise(resolve => {\n\n                let interval;\n                let timeout; // eslint-disable-line prefer-const\n\n                interval = setInterval(() => { // eslint-disable-line prefer-const\n                    // $FlowFixMe\n                    if (frame && isSameDomain(frame) && getGlobal(frame)) {\n                        clearInterval(interval);\n                        clearTimeout(timeout);\n                        return resolve(frame);\n                    }\n                }, 100);\n\n                timeout = setTimeout(() => {\n                    clearInterval(interval);\n                    return resolve();\n                }, 2000);\n            });\n        });\n    });\n}\n\nexport function openTunnelToOpener({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) : ZalgoPromise<void> {\n    return ZalgoPromise.try(() => {\n        const opener = getOpener(window);\n        \n        if (!opener || !needsBridge({ win: opener })) {\n            return;\n        }\n\n        registerRemoteWindow(opener);\n\n        return awaitRemoteBridgeForWindow(opener).then(bridge => {\n\n            if (!bridge) {\n                return rejectRemoteSendMessage(opener, new Error(`Can not register with opener: no bridge found in opener`));\n            }\n\n            if (!window.name) {\n                return rejectRemoteSendMessage(opener, new Error(`Can not register with opener: window does not have a name`));\n            }\n\n            // $FlowFixMe\n            return getGlobal(bridge).openTunnelToParent({\n\n                name: window.name,\n\n                source: window,\n\n                canary() {\n                    // pass\n                },\n\n                sendMessage(message) {\n\n                    try {\n                        noop(window);\n                    } catch (err) {\n                        return;\n                    }\n\n                    if (!window || window.closed) {\n                        return;\n                    }\n\n                    try {\n                        receiveMessage({\n                            data:   message,\n                            origin: this.origin,\n                            source: this.source\n                        }, { on, send });\n                    } catch (err) {\n                        ZalgoPromise.reject(err);\n                    }\n                }\n\n            }).then(({ source, origin, data }) => {\n\n                if (source !== opener) {\n                    throw new Error(`Source does not match opener`);\n                }\n\n                registerRemoteSendMessage(source, origin, data.sendMessage);\n\n            }).catch(err => {\n\n                rejectRemoteSendMessage(opener, err);\n                throw err;\n            });\n        });\n    });\n}\n","/* @flow */\n\nimport { isSameDomain, isWindowClosed, type CrossDomainWindowType, closeWindow,\n    type DomainMatcher, getOpener, WINDOW_TYPE, isWindow, assertSameDomain } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, memoizePromise } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport { getWindowInstanceID } from '../lib';\nimport { linkWindow } from '../bridge';\nimport type { OnType, SendType } from '../types';\n\nfunction cleanupProxyWindows() {\n    const idToProxyWindow = globalStore('idToProxyWindow');\n    for (const id of idToProxyWindow.keys()) {\n        // $FlowFixMe\n        if (idToProxyWindow.get(id).shouldClean()) {\n            idToProxyWindow.del(id);\n        }\n    }\n}\n\ntype SerializedProxyWindow = {|\n    id : string,\n    type : $Values<typeof WINDOW_TYPE>,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    isClosed : () => ZalgoPromise<boolean>,\n    setLocation : (string) => ZalgoPromise<void>,\n    getName : () => ZalgoPromise<?string>,\n    setName : (string) => ZalgoPromise<void>,\n    getInstanceID : () => ZalgoPromise<string>\n|};\n\nfunction getSerializedWindow(id : string, win : CrossDomainWindowType, { send } : { send : SendType }) : SerializedProxyWindow {\n    let windowName;\n    \n    return {\n        id,\n        type:          getOpener(win) ? WINDOW_TYPE.POPUP : WINDOW_TYPE.IFRAME,\n        getInstanceID: memoizePromise(() => getWindowInstanceID(win, { send })),\n        close:         () => ZalgoPromise.try(() => {\n            closeWindow(win);\n        }),\n        getName: () => ZalgoPromise.try(() => {\n            if (isWindowClosed(win)) {\n                return;\n            }\n\n            return windowName;\n        }),\n        focus:   () => ZalgoPromise.try(() => {\n            win.focus();\n        }),\n        isClosed: () => ZalgoPromise.try(() => {\n            return isWindowClosed(win);\n        }),\n        setLocation: (href) => ZalgoPromise.try(() => {\n            if (isSameDomain(win)) {\n                try {\n                    if (win.location && typeof win.location.replace === 'function') {\n                        // $FlowFixMe\n                        win.location.replace(href);\n                        return;\n                    }\n                } catch (err) {\n                    // pass\n                }\n            }\n\n            win.location = href;\n        }),\n        setName: (name) => ZalgoPromise.try(() => {\n            if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                linkWindow({ win, name });\n            }\n\n            win = assertSameDomain(win);\n\n            win.name = name;\n\n            if (win.frameElement) {\n                win.frameElement.setAttribute('name', name);\n            }\n\n            windowName = name;\n        })\n    };\n}\n\nexport class ProxyWindow {\n\n    isProxyWindow : true = true\n    serializedWindow : SerializedProxyWindow\n    actualWindow : CrossDomainWindowType\n    actualWindowPromise : ZalgoPromise<CrossDomainWindowType>\n    send : SendType\n    name : string\n\n    constructor(serializedWindow : SerializedProxyWindow, actualWindow? : ?CrossDomainWindowType, { send } : { send : SendType }) {\n        this.serializedWindow = serializedWindow;\n        this.actualWindowPromise = new ZalgoPromise();\n        this.send = send;\n        if (actualWindow) {\n            this.setWindow(actualWindow);\n        }\n    }\n\n    getType() : $Values<typeof WINDOW_TYPE> {\n        return this.serializedWindow.type;\n    }\n\n    isPopup() : boolean {\n        return this.getType() === WINDOW_TYPE.POPUP;\n    }\n\n    isIframe() : boolean {\n        return this.getType() === WINDOW_TYPE.IFRAME;\n    }\n\n    setLocation(href : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setLocation(href).then(() => this);\n    }\n\n    setName(name : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setName(name).then(() => this);\n    }\n\n    close() : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.close().then(() => this);\n    }\n\n    focus() : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            return ZalgoPromise.all([\n                this.isPopup() && this.serializedWindow.getName().then(name => {\n                    if (name) {\n                        window.open('', name);\n                    }\n                }),\n                this.serializedWindow.focus()\n            ]);\n        }).then(() => this);\n    }\n\n    isClosed() : ZalgoPromise<boolean> {\n        return this.serializedWindow.isClosed();\n    }\n\n    getWindow() : ?CrossDomainWindowType {\n        return this.actualWindow;\n    }\n\n    setWindow(win : CrossDomainWindowType) {\n        this.actualWindow = win;\n        this.serializedWindow = getSerializedWindow(this.serializedWindow.id, win, { send: this.send });\n        this.actualWindowPromise.resolve(win);\n    }\n\n    awaitWindow() : ZalgoPromise<CrossDomainWindowType> {\n        return this.actualWindowPromise;\n    }\n\n    matchWindow(win : CrossDomainWindowType) : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return win === this.actualWindow;\n            }\n            \n            return ZalgoPromise.hash({\n                proxyInstanceID:       this.getInstanceID(),\n                knownWindowInstanceID: getWindowInstanceID(win, { send: this.send })\n            }).then(({ proxyInstanceID, knownWindowInstanceID }) => {\n                const match = proxyInstanceID === knownWindowInstanceID;\n\n                if (match) {\n                    this.setWindow(win);\n                }\n\n                return match;\n            });\n        });\n    }\n\n    unwrap() : CrossDomainWindowType | ProxyWindow {\n        return this.actualWindow || this;\n    }\n\n    getInstanceID() : ZalgoPromise<string> {\n        return this.serializedWindow.getInstanceID();\n    }\n\n    serialize() : SerializedProxyWindow {\n        return this.serializedWindow;\n    }\n\n    shouldClean() : boolean {\n        return this.actualWindow && isWindowClosed(this.actualWindow);\n    }\n\n    static unwrap(win : CrossDomainWindowType | ProxyWindow) : CrossDomainWindowType | ProxyWindow {\n        return ProxyWindow.isProxyWindow(win)\n            // $FlowFixMe\n            ? win.unwrap()\n            : win;\n    }\n\n    static serialize(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : SerializedProxyWindow {\n        cleanupProxyWindows();\n\n        return ProxyWindow.toProxyWindow(win, { send }).serialize();\n    }\n\n    static deserialize(serializedWindow : SerializedProxyWindow, { on, send } : { on : OnType, send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n        \n        return globalStore('idToProxyWindow').getOrSet(serializedWindow.id, () => {\n            return new ProxyWindow(serializedWindow, null, { on, send });\n        });\n    }\n\n    static isProxyWindow(obj : CrossDomainWindowType | ProxyWindow) : boolean {\n        // $FlowFixMe\n        return Boolean(obj && !isWindow(obj) && obj.isProxyWindow);\n    }\n\n    static toProxyWindow(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n\n        if (ProxyWindow.isProxyWindow(win)) {\n            // $FlowFixMe\n            return win;\n        }\n\n        // $FlowFixMe\n        const realWin : CrossDomainWindowType = win;\n\n        // $FlowFixMe\n        return windowStore('winToProxyWindow').getOrSet(win, () => {\n            const id = uniqueID();\n            const serializedWindow = getSerializedWindow(id, realWin, { send });\n            const proxyWindow = new ProxyWindow(serializedWindow, realWin, { send });\n\n            return globalStore('idToProxyWindow').set(id, proxyWindow);\n        });\n    }\n}\n\nexport type SerializedWindow = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, SerializedProxyWindow>;\n\nexport function serializeWindow(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, win : CrossDomainWindowType, { send } : { send : SendType }) : SerializedWindow {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, ProxyWindow.serialize(win, { send }));\n}\n\nexport function deserializeWindow(source : CrossDomainWindowType | ProxyWindow, origin : string, win : SerializedProxyWindow, { on, send } : { on : OnType, send : SendType }) : ProxyWindow {\n    return ProxyWindow.deserialize(win, { on, send });\n}\n","/* @flow */\n\nimport { matchDomain, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, isRegex } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { MESSAGE_NAME, WILDCARD, SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nimport { ProxyWindow } from './window';\n\ntype StoredMethod = {|\n    name : string,\n    domain : DomainMatcher,\n    val : Function,\n    source : CrossDomainWindowType | ProxyWindow\n|};\n\nfunction addMethod(id : string, val : Function, name : string, source : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher) {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    \n    if (ProxyWindow.isProxyWindow(source)) {\n        proxyWindowMethods.set(id, { val, name, domain, source });\n    } else {\n        proxyWindowMethods.del(id);\n        // $FlowFixMe\n        const methods = methodStore.getOrSet(source, () => ({}));\n        methods[id] = { domain, name, val, source };\n    }\n}\n\nfunction lookupMethod(source : CrossDomainWindowType, id : string) : ?StoredMethod {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    const methods = methodStore.getOrSet(source, () => ({}));\n    return methods[id] || proxyWindowMethods.get(id);\n}\n\nfunction listenForFunctionCalls({ on } : { on : OnType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('functionCalls', () => {\n        return on(MESSAGE_NAME.METHOD, { domain: WILDCARD }, ({ source, origin, data } : { source : CrossDomainWindowType, origin : string, data : Object }) => {\n            const { id, name } = data;\n\n            const meth = lookupMethod(source, id);\n    \n            if (!meth) {\n                throw new Error(`Could not find method '${ data.name }' with id: ${ data.id } in ${ getDomain(window) }`);\n            }\n\n            const { source: methodSource, domain, val } = meth;\n            \n            return ZalgoPromise.try(() => {\n                if (!matchDomain(domain, origin)) {\n                    // $FlowFixMe\n                    throw new Error(`Method '${ data.name }' domain ${ JSON.stringify(isRegex(meth.domain) ? meth.domain.source : meth.domain) } does not match origin ${ origin } in ${ getDomain(window) }`);\n                }\n                \n                if (ProxyWindow.isProxyWindow(methodSource)) {\n                    // $FlowFixMe\n                    return methodSource.matchWindow(source).then(match => {\n                        if (!match) {\n                            throw new Error(`Method call '${ data.name }' failed - proxy window does not match source in ${ getDomain(window) }`);\n                        }\n                    });\n                }\n            }).then(() => {\n                return val.apply({ source, origin }, data.args);\n            }, err => {\n                return ZalgoPromise.try(() => {\n                    if (val.onError) {\n                        return val.onError(err);\n                    }\n                }).then(() => {\n                    // $FlowFixMe\n                    if (err.stack) {\n                        // $FlowFixMe\n                        err.stack = `Remote call to ${ name }()\\n\\n${ err.stack }`;\n                    }\n\n                    throw err;\n                });\n            }).then(result => {\n                return { result, id, name };\n            });\n        });\n    });\n}\n\nexport type SerializedFunction = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, {\n    id : string,\n    name : string\n}>;\n\n// eslint-disable-next-line flowtype/require-exact-type\ntype SerializableFunction<T> = {\n    () : ZalgoPromise<T> | T,\n    __id__? : string,\n    __name__? : string\n};\n\nexport function serializeFunction<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : SerializableFunction<T>, key : string, { on } : { on : OnType }) : SerializedFunction {\n    listenForFunctionCalls({ on });\n    \n    const id = val.__id__ || uniqueID();\n    destination = ProxyWindow.unwrap(destination);\n    const name = val.__name__ || val.name || key;\n\n    if (ProxyWindow.isProxyWindow(destination)) {\n        addMethod(id, val, name, destination, domain);\n\n        // $FlowFixMe\n        destination.awaitWindow().then(win => {\n            addMethod(id, val, name, win, domain);\n        });\n    } else {\n        addMethod(id, val, name, destination, domain);\n    }\n\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, { id, name });\n}\n\nexport function deserializeFunction<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { id, name } : { id : string, name : string }, { send } : { send : SendType }) : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<T> {\n    const getDeserializedFunction = (opts? : Object = {}) => {\n        function crossDomainFunctionWrapper<X : mixed>() : ZalgoPromise<X> {\n            let originalStack;\n    \n            if (__DEBUG__) {\n                originalStack = (new Error(`Original call to ${ name }():`)).stack;\n            }\n    \n            return ProxyWindow.toProxyWindow(source, { send }).awaitWindow().then(win => {\n                const meth = lookupMethod(win, id);\n    \n                if (meth && meth.val !== crossDomainFunctionWrapper) {\n                    return meth.val.apply({ source: window, origin: getDomain() }, arguments);\n                } else {\n                    // $FlowFixMe\n                    const options = { domain: origin, fireAndForget: opts.fireAndForget };\n                    const args = Array.prototype.slice.call(arguments);\n\n                    return send(win, MESSAGE_NAME.METHOD, { id, name, args }, options)\n                        .then(res => {\n                            if (!opts.fireAndForget) {\n                                return res.data.result;\n                            }\n                        });\n                }\n    \n            }).catch(err => {\n                // $FlowFixMe\n                if (__DEBUG__ && originalStack && err.stack) {\n                    // $FlowFixMe\n                    err.stack = `${ err.stack }\\n\\n${ originalStack }`;\n                }\n                throw err;\n            });\n        }\n\n        crossDomainFunctionWrapper.__name__ = name;\n        crossDomainFunctionWrapper.__origin__ = origin;\n        crossDomainFunctionWrapper.__source__ = source;\n        crossDomainFunctionWrapper.__id__ = id;\n\n        crossDomainFunctionWrapper.origin = origin;\n\n        return crossDomainFunctionWrapper;\n    };\n\n    const crossDomainFunctionWrapper = getDeserializedFunction();\n    crossDomainFunctionWrapper.fireAndForget = getDeserializedFunction({ fireAndForget: true });\n\n    return crossDomainFunctionWrapper;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, isWindow, type DomainMatcher } from 'cross-domain-utils/src';\nimport { TYPE, serialize, deserialize, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, deserializeFunction, type SerializedFunction } from './function';\nimport { serializePromise, deserializePromise, type SerializedPromise } from './promise';\nimport { serializeWindow, deserializeWindow, type SerializedWindow, ProxyWindow } from './window';\n\nexport function serializeMessage<T : mixed>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T, { on, send } : { on : OnType, send : SendType }) : string {\n    return serialize(obj, {\n        [ TYPE.PROMISE ]:  (val : Thenable, key : string) : SerializedPromise => serializePromise(destination, domain, val, key, { on, send }),\n        [ TYPE.FUNCTION ]: (val : Function, key : string) : SerializedFunction => serializeFunction(destination, domain, val, key, { on, send }),\n        [ TYPE.OBJECT ]:   (val : CrossDomainWindowType) : Object | SerializedWindow => {\n            return (isWindow(val) || ProxyWindow.isProxyWindow(val)) ? serializeWindow(destination, domain, val, { on, send }) : val;\n        }\n    });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string, { on, send } : { on : OnType, send : SendType }) : T {\n    return deserialize(message, {\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE ]: (serializedPromise)  => deserializePromise(source, origin, serializedPromise),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION ]:      (serializedFunction) => deserializeFunction(source, origin, serializedFunction, { on, send }),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW ]:        (serializedWindow)   => deserializeWindow(source, origin, serializedWindow, { on, send })\n    });\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { serializeType, type CustomSerializedType, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, type SerializedFunction } from './function';\nimport { ProxyWindow } from './window';\n\nexport type SerializedPromise = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n    then : SerializedFunction\n}>;\n\nexport function serializePromise(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : Thenable, key : string, { on, send } : { on : OnType, send : SendType }) : SerializedPromise {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n        then: serializeFunction(destination, domain, (resolve, reject) => val.then(resolve, reject), key, { on, send })\n    });\n}\n\nexport function deserializePromise<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { then } : { then : Function }) : ZalgoPromise<T> {\n    return new ZalgoPromise(then);\n}\n","/* @flow */\n\nimport { isSameDomain, isSameTopWindow, isActuallySameDomain, getActualDomain,\n    getDomain, type CrossDomainWindowType, type DomainMatcher, PROTOCOL } from 'cross-domain-utils/src';\n\nimport { SEND_STRATEGY, WILDCARD } from '../../conf';\nimport { needsGlobalMessagingForBrowser } from '../../lib';\nimport { getGlobal } from '../../global';\nimport { sendBridgeMessage, needsBridgeForBrowser, isBridge } from '../../bridge';\n\nexport const SEND_MESSAGE_STRATEGIES = {};\n\nSEND_MESSAGE_STRATEGIES[SEND_STRATEGY.POST_MESSAGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : DomainMatcher) => {\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(window, win) === false) {\n            return;\n        }\n    }\n\n    let domains;\n\n    if (Array.isArray(domain)) {\n        domains = domain;\n    } else if (typeof domain === 'string') {\n        domains = [ domain ];\n    } else {\n        domains = [ WILDCARD ];\n    }\n\n    domains = domains.map(dom => {\n\n        if (__TEST__) {\n            if (dom.indexOf(PROTOCOL.MOCK) === 0) {\n                if (window.location.protocol === PROTOCOL.FILE) {\n                    return WILDCARD;\n                }\n\n                if (!isActuallySameDomain(win)) {\n                    throw new Error(`Attempting to send messsage to mock domain ${ dom }, but window is actually cross-domain`);\n                }\n\n                // $FlowFixMe\n                return getActualDomain(win);\n\n            }\n        }\n        \n        if (dom.indexOf(PROTOCOL.FILE) === 0) {\n            return WILDCARD;\n        }\n\n        return dom;\n    });\n\n    domains.forEach(dom => {\n        win.postMessage(serializedMessage, dom);\n    });\n};\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n\n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.BRIDGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : string) => {\n\n        if (!needsBridgeForBrowser() && !isBridge()) {\n            return;\n        }\n\n        if (isSameDomain(win)) {\n            throw new Error(`Post message through bridge disabled between same domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use bridge to communicate between two different windows, not between frames`);\n        }\n\n        sendBridgeMessage(win, domain, serializedMessage);\n    };\n}\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__ || __POST_ROBOT__.__GLOBAL_MESSAGE_SUPPORT__) {\n    \n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.GLOBAL] = (win : CrossDomainWindowType, serializedMessage : string) => {\n\n        if (!needsGlobalMessagingForBrowser()) {\n            return;\n        }\n\n        if (!isSameDomain(win)) {\n            throw new Error(`Post message through global disabled between different domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use global to communicate between two different windows, not between frames`);\n        }\n\n        // $FlowFixMe\n        const foreignGlobal = getGlobal(win);\n\n        if (!foreignGlobal) {\n            throw new Error(`Can not find postRobot global on foreign window`);\n        }\n\n        foreignGlobal.receiveMessage({\n            source: window,\n            origin: getDomain(),\n            data:   serializedMessage\n        });\n    };\n}\n","/* @flow */\n\nimport { isWindowClosed, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, stringifyError } from 'belter/src';\n\nimport { serializeMessage } from '../../serialize';\nimport type { Message } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nimport { SEND_MESSAGE_STRATEGIES } from './strategies';\n\nexport function sendMessage(win : CrossDomainWindowType, domain : DomainMatcher, message : Message, { on, send } : { on : OnType, send : SendType }) {\n    if (isWindowClosed(win)) {\n        throw new Error('Window is closed');\n    }\n    \n    const serializedMessage = serializeMessage(win, domain, {\n        [ __POST_ROBOT__.__GLOBAL_KEY__ ]: {\n            id:     uniqueID(),\n            origin: getDomain(window),\n            ...message\n        }\n    }, { on, send });\n\n    const strategies = Object.keys(SEND_MESSAGE_STRATEGIES);\n    const errors = [];\n\n    for (const strategyName of strategies) {\n        try {\n            SEND_MESSAGE_STRATEGIES[strategyName](win, serializedMessage, domain);\n        } catch (err) {\n            errors.push(err);\n        }\n    }\n\n    if (errors.length === strategies.length) {\n        throw new Error(`All post-robot messaging strategies failed:\\n\\n${ errors.map(stringifyError).join('\\n\\n') }`);\n    }\n}\n","/* @flow */\n\nimport { getUserAgent } from 'cross-domain-utils/src';\n\nexport function needsGlobalMessagingForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|rv:11|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { isRegex, getOrSet } from 'belter/src';\n\nimport { getWildcard, type WildCard, globalStore, windowStore } from '../global';\nimport { WILDCARD } from '../conf';\n\nexport function resetListeners() {\n    const responseListeners = globalStore('responseListeners');\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    responseListeners.reset();\n    erroredResponseListeners.reset();\n}\n\nconst __DOMAIN_REGEX__ = '__domain_regex__';\n\nexport type RequestListenerType = {|\n    handler : ({ source : CrossDomainWindowType, origin : string, data : mixed }) => (mixed | ZalgoPromise<mixed>),\n    handleError : (err : mixed) => void,\n    window : ?CrossDomainWindowType,\n    name : string,\n    domain : DomainMatcher\n|};\n\nexport type ResponseListenerType = {|\n    name : string,\n    win : CrossDomainWindowType,\n    domain : DomainMatcher,\n    promise : ZalgoPromise<*>,\n    ack? : ?boolean,\n    cancelled? : ?boolean\n|};\n\nexport function addResponseListener(hash : string, listener : ResponseListenerType) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.set(hash, listener);\n}\n\nexport function getResponseListener(hash : string) : ?ResponseListenerType {\n    const responseListeners = globalStore('responseListeners');\n    return responseListeners.get(hash);\n}\n\nexport function deleteResponseListener(hash : string) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.del(hash);\n}\n\nexport function cancelResponseListeners() {\n    const responseListeners = globalStore('responseListeners');\n    for (const hash of responseListeners.keys()) {\n        const listener = responseListeners.get(hash);\n        if (listener) {\n            listener.cancelled = true;\n        }\n        responseListeners.del(hash);\n    }\n}\n\nexport function markResponseListenerErrored(hash : string) {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    erroredResponseListeners.set(hash, true);\n}\n\nexport function isResponseListenerErrored(hash : string) : boolean {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    return erroredResponseListeners.has(hash);\n}\n\nexport function getRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?(string | RegExp) }) : ?RequestListenerType {\n    const requestListeners = windowStore('requestListeners');\n\n    if (win === WILDCARD) {\n        win = null;\n    }\n\n    if (domain === WILDCARD) {\n        domain = null;\n    }\n\n    if (!name) {\n        throw new Error(`Name required to get request listener`);\n    }\n\n    for (const winQualifier of [ win, getWildcard() ]) {\n        if (!winQualifier) {\n            continue;\n        }\n\n        const nameListeners = requestListeners.get(winQualifier);\n\n        if (!nameListeners) {\n            continue;\n        }\n\n        const domainListeners = nameListeners[name];\n\n        if (!domainListeners) {\n            continue;\n        }\n\n        if (domain && typeof domain === 'string') {\n            if (domainListeners[domain]) {\n                return domainListeners[domain];\n            }\n\n            if (domainListeners[__DOMAIN_REGEX__]) {\n                for (const { regex, listener } of domainListeners[__DOMAIN_REGEX__]) {\n                    if (matchDomain(regex, domain)) {\n                        return listener;\n                    }\n                }\n            }\n        }\n\n        if (domainListeners[WILDCARD]) {\n            return domainListeners[WILDCARD];\n        }\n    }\n}\n\nexport function addRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?DomainMatcher }, listener : RequestListenerType) : { cancel : () => void } {\n    const requestListeners = windowStore('requestListeners');\n\n    if (!name || typeof name !== 'string') {\n        throw new Error(`Name required to add request listener`);\n    }\n\n    if (Array.isArray(win)) {\n        const listenersCollection = [];\n\n        for (const item of win) {\n            listenersCollection.push(addRequestListener({ name, domain, win: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    if (Array.isArray(domain)) {\n        const listenersCollection = [];\n\n        for (const item of domain) {\n            listenersCollection.push(addRequestListener({ name, win, domain: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    const existingListener = getRequestListener({ name, win, domain });\n\n    if (!win || win === WILDCARD) {\n        win = getWildcard();\n    }\n\n    domain = domain || WILDCARD;\n\n    if (existingListener) {\n        if (win && domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (win) {\n            throw new Error(`Request listener already exists for ${ name } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() }`);\n        } else {\n            throw new Error(`Request listener already exists for ${ name }`);\n        }\n    }\n\n    const nameListeners = requestListeners.getOrSet(win, () => ({}));\n    // $FlowFixMe\n    const domainListeners = getOrSet(nameListeners, name, () => ({}));\n\n    const strDomain = domain.toString();\n\n    let regexListeners;\n    let regexListener;\n\n    if (isRegex(domain)) {\n        regexListeners = getOrSet(domainListeners, __DOMAIN_REGEX__, () => []);\n        regexListener = { regex: domain, listener };\n        regexListeners.push(regexListener);\n    } else {\n        domainListeners[strDomain] = listener;\n    }\n\n    return {\n        cancel() {\n            delete domainListeners[strDomain];\n\n            if (regexListener) {\n                regexListeners.splice(regexListeners.indexOf(regexListener, 1));\n\n                if (!regexListeners.length) {\n                    delete domainListeners[__DOMAIN_REGEX__];\n                }\n            }\n\n            if (!Object.keys(domainListeners).length) {\n                // $FlowFixMe\n                delete nameListeners[name];\n            }\n\n            // $FlowFixMe\n            if (win && !Object.keys(nameListeners).length) {\n                requestListeners.del(win);\n            }\n        }\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindowClosed, matchDomain, stringifyDomainPattern, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { MESSAGE_TYPE, MESSAGE_ACK, MESSAGE_NAME } from '../../conf';\nimport { sendMessage } from '../send';\nimport { getRequestListener, getResponseListener, deleteResponseListener, isResponseListenerErrored } from '../listeners';\nimport type { RequestMessage, AckResponseMessage, SuccessResponseMessage, ErrorResponseMessage } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nexport const RECEIVE_MESSAGE_TYPES = {\n\n    [ MESSAGE_TYPE.REQUEST ](source : CrossDomainWindowType, origin : string, message : RequestMessage, { on, send } : { on : OnType, send : SendType }) : ZalgoPromise<void> {\n\n        const options = getRequestListener({ name: message.name, win: source, domain: origin });\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (__DEBUG__) {\n            // eslint-disable-next-line no-console\n            console.info('receive::req', logName, origin, '\\n\\n', message.data);\n        }\n\n        function sendResponse(type : $Values<typeof MESSAGE_TYPE>, ack? : $Values<typeof MESSAGE_ACK>, response = {}) {\n\n            if (message.fireAndForget || isWindowClosed(source)) {\n                return;\n            }\n\n            if (__DEBUG__ && type !== MESSAGE_TYPE.ACK) {\n                if (ack === MESSAGE_ACK.SUCCESS) {\n                    // $FlowFixMe\n                    console.info('respond::res', logName, origin, '\\n\\n', response.data);  // eslint-disable-line no-console\n                } else if (ack === MESSAGE_ACK.ERROR) {\n                    // $FlowFixMe\n                    console.error('respond::err', logName, origin, '\\n\\n', response.error); // eslint-disable-line no-console\n                }\n            }\n\n            // $FlowFixMe\n            sendMessage(source, origin, {\n                type,\n                ack,\n                hash:   message.hash,\n                name:   message.name,\n                ...response\n            }, { on, send });\n        }\n\n        return ZalgoPromise.all([\n\n            sendResponse(MESSAGE_TYPE.ACK),\n\n            ZalgoPromise.try(() => {\n\n                if (!options) {\n                    throw new Error(`No handler found for post message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n                }\n\n                if (!matchDomain(options.domain, origin)) {\n                    throw new Error(`Request origin ${ origin } does not match domain ${ options.domain.toString() }`);\n                }\n\n                const data = message.data;\n\n                return options.handler({ source, origin, data });\n\n            }).then(data => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.SUCCESS, { data });\n\n            }, error => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.ERROR, { error });\n            })\n\n        ]).then(noop).catch(err => {\n            if (options && options.handleError) {\n                return options.handleError(err);\n            } else {\n                throw err;\n            }\n        });\n    },\n\n    [ MESSAGE_TYPE.ACK ](source : CrossDomainWindowType, origin : string, message : AckResponseMessage) {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message ack for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Ack origin ${ origin } does not match domain ${ options.domain.toString() }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Ack source does not match registered window`);\n        }\n\n        options.ack = true;\n    },\n\n    [ MESSAGE_TYPE.RESPONSE ](source : CrossDomainWindowType, origin : string, message : SuccessResponseMessage | ErrorResponseMessage) : void | ZalgoPromise<void> {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message response for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Response origin ${ origin } does not match domain ${ stringifyDomainPattern(options.domain) }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Response source does not match registered window`);\n        }\n\n        deleteResponseListener(message.hash);\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (message.ack === MESSAGE_ACK.ERROR) {\n            if (__DEBUG__) {\n                console.error('receive::err', logName, origin, '\\n\\n', message.error); // eslint-disable-line no-console\n            }\n\n            options.promise.reject(message.error);\n\n        } else if (message.ack === MESSAGE_ACK.SUCCESS) {\n            if (__DEBUG__) {\n                console.info('receive::res', logName, origin, '\\n\\n', message.data); // eslint-disable-line no-console\n            }\n\n            options.promise.resolve({ source, origin, data: message.data });\n        }\n    }\n};\n","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType, getDomain, isSameTopWindow, PROTOCOL  } from 'cross-domain-utils/src';\nimport { addEventListener, noop } from 'belter/src';\n\nimport { markWindowKnown, needsGlobalMessagingForBrowser } from '../../lib';\nimport { deserializeMessage } from '../../serialize';\nimport { getGlobal, globalStore } from '../../global';\nimport type { OnType, SendType, MessageEvent, CancelableType } from '../../types';\n\nimport { RECEIVE_MESSAGE_TYPES } from './types';\n\nfunction parseMessage(message : string, source : CrossDomainWindowType, origin : string, { on, send } : { on : OnType, send : SendType }) : ?Object {\n    let parsedMessage;\n\n    try {\n        parsedMessage = deserializeMessage(source, origin, message, { on, send });\n    } catch (err) {\n        return;\n    }\n\n    if (!parsedMessage) {\n        return;\n    }\n\n    if (typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    parsedMessage = parsedMessage[__POST_ROBOT__.__GLOBAL_KEY__];\n\n    if (!parsedMessage || typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    if (!parsedMessage.type || typeof parsedMessage.type !== 'string') {\n        return;\n    }\n\n    if (!RECEIVE_MESSAGE_TYPES[parsedMessage.type]) {\n        return;\n    }\n\n    return parsedMessage;\n}\n\nexport function receiveMessage(event : MessageEvent, { on, send } : { on : OnType, send : SendType }) {\n    const receivedMessages = globalStore('receivedMessages');\n\n    if (!window || window.closed) {\n        throw new Error(`Message recieved in closed window`);\n    }\n\n    try {\n        if (!event.source) {\n            return;\n        }\n    } catch (err) {\n        return;\n    }\n\n    let { source, origin, data } = event;\n\n    if (__TEST__) {\n        // $FlowFixMe\n        origin = getDomain(source);\n    }\n\n    const message = parseMessage(data, source, origin, { on, send });\n\n    if (!message) {\n        return;\n    }\n\n    markWindowKnown(source);\n\n    if (receivedMessages.has(message.id)) {\n        return;\n    }\n\n    receivedMessages.set(message.id, true);\n\n    if (isWindowClosed(source) && !message.fireAndForget) {\n        return;\n    }\n\n    if (message.origin.indexOf(PROTOCOL.FILE) === 0) {\n        origin = `${ PROTOCOL.FILE }//`;\n    }\n\n    RECEIVE_MESSAGE_TYPES[message.type](source, origin, message, { on, send });\n}\n\nexport function setupGlobalReceiveMessage({ on, send } : { on : OnType, send : SendType }) {\n    const global = getGlobal();\n    global.receiveMessage = global.receiveMessage || (message => receiveMessage(message, { on, send }));\n}\n\ntype ListenerEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string,\n    sourceElement : CrossDomainWindowType,\n    originalEvent? : { origin : string }\n|};\n\nexport function messageListener(event : ListenerEvent, { on, send } : { on : OnType, send : SendType }) {\n\n    try {\n        noop(event.source);\n    } catch (err) {\n        return;\n    }\n\n    const source = event.source || event.sourceElement;\n    let origin = event.origin || (event.originalEvent && event.originalEvent.origin);\n    const data = event.data;\n\n    if (origin === 'null') {\n        origin = `${ PROTOCOL.FILE }//`;\n    }\n\n    if (!source) {\n        return;\n    }\n\n    if (!origin) {\n        throw new Error(`Post message did not have origin domain`);\n    }\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(source, window) === false) {\n            return;\n        }\n    }\n\n    receiveMessage({ source, origin, data }, { on, send });\n}\n\nexport function listenForMessages({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore().getOrSet('postMessageListener', () => {\n        // $FlowFixMe\n        return addEventListener(window, 'message', event => {\n            // $FlowFixMe\n            messageListener(event, { on, send });\n        });\n    });\n}\n\nexport function stopListenForMessages() {\n    const listener = globalStore().get('postMessageListener');\n    if (listener) {\n        listener.cancel();\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nimport { addRequestListener, type RequestListenerType } from '../drivers';\nimport { WILDCARD } from '../conf';\nimport type { ServerOptionsType, HandlerType, CancelableType } from '../types';\n\nexport function on(name : string, options : ServerOptionsType | HandlerType, handler : ?HandlerType) : CancelableType {\n\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    if (!handler) {\n        throw new Error('Expected handler');\n    }\n\n    options = options || {};\n    options.name = name;\n    options.handler = handler || options.handler;\n\n    const win = options.window;\n    const domain = options.domain;\n\n    const listenerOptions : RequestListenerType = {\n        handler:     options.handler,\n        handleError: options.errorHandler || (err => {\n            throw err;\n        }),\n        window: win,\n        domain: domain || WILDCARD,\n        name\n    };\n\n    const requestListener = addRequestListener({ name, win, domain }, listenerOptions);\n\n    return {\n        cancel() {\n            requestListener.cancel();\n        }\n    };\n}\n\nexport function once(name : string, options? : ServerOptionsType | HandlerType, handler? : HandlerType) : ZalgoPromise<{ source : mixed, origin : string, data : Object }> {\n    \n    // $FlowFixMe\n    options = options || {};\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    const promise = new ZalgoPromise();\n    let listener; // eslint-disable-line prefer-const\n\n    options.errorHandler = (err) => {\n        listener.cancel();\n        promise.reject(err);\n    };\n\n    listener = on(name, options, event => {\n        listener.cancel();\n        promise.resolve(event);\n        if (handler) {\n            return handler(event);\n        }\n    });\n\n    promise.cancel = listener.cancel;\n    return promise;\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isAncestor, isWindowClosed, getDomain, matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, isRegex, noop, safeInterval, stringify } from 'belter/src';\n\n\nimport { CHILD_WINDOW_TIMEOUT, MESSAGE_TYPE, WILDCARD, MESSAGE_NAME, ACK_TIMEOUT, RES_TIMEOUT, ACK_TIMEOUT_KNOWN, RESPONSE_CYCLE_TIME } from '../conf';\nimport { sendMessage, addResponseListener, deleteResponseListener, markResponseListenerErrored, type ResponseListenerType } from '../drivers';\nimport { awaitWindowHello, sayHello, isWindowKnown } from '../lib';\nimport { windowStore } from '../global';\nimport type { SendType } from '../types';\n\nimport { on } from './on';\n\nfunction validateOptions(name : string, win : CrossDomainWindowType, domain : ?DomainMatcher) {\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (domain) {\n        if (typeof domain !== 'string' && !Array.isArray(domain) && !isRegex(domain)) {\n            throw new TypeError(`Expected domain to be a string, array, or regex`);\n        }\n    }\n\n    if (isWindowClosed(win)) {\n        throw new Error('Target window is closed');\n    }\n}\n\nfunction normalizeDomain(win : CrossDomainWindowType, domain : DomainMatcher, childTimeout : number, { send } : { send : SendType }) : ZalgoPromise<string | $ReadOnlyArray<string>> {\n    return ZalgoPromise.try(() => {\n        if (isAncestor(window, win)) {\n            return awaitWindowHello(win, childTimeout);\n        } else if (isRegex(domain)) {\n            // $FlowFixMe\n            return sayHello(win, { send });\n        } else {\n            return { domain };\n        }\n    // $FlowFixMe\n    }).then(({ domain: normalizedDomain }) => {\n\n        // $FlowFixMe\n        return normalizedDomain;\n    });\n}\n\nexport const send : SendType = (win, name, data, options) => {\n\n    // $FlowFixMe\n    options = options || {};\n    let domain = options.domain || WILDCARD;\n    const responseTimeout = options.timeout || RES_TIMEOUT;\n    const childTimeout = options.timeout || CHILD_WINDOW_TIMEOUT;\n    const fireAndForget = options.fireAndForget || false;\n\n    // $FlowFixMe\n    return ZalgoPromise.try(() => {\n        validateOptions(name, win, domain);\n        return normalizeDomain(win, domain, childTimeout, { send });\n    }).then(targetDomain => {\n\n        if (!matchDomain(domain, targetDomain)) {\n            throw new Error(`Domain ${ stringify(domain) } does not match ${ stringify(targetDomain) }`);\n        }\n\n        domain = targetDomain;\n\n        const logName = (name === MESSAGE_NAME.METHOD && data && typeof data.name === 'string') ? `${ data.name }()` : name;\n\n        if (__DEBUG__) {\n            console.info('send::req', logName, domain, '\\n\\n', data); // eslint-disable-line no-console\n        }\n\n        const promise = new ZalgoPromise();\n        const hash = `${ name }_${ uniqueID() }`;\n\n        if (!fireAndForget) {\n            const responseListener : ResponseListenerType = { name, win, domain, promise };\n            addResponseListener(hash, responseListener);\n\n            const reqPromises = windowStore('requestPromises').getOrSet(win, () => []);\n            reqPromises.push(promise);\n\n            promise.catch(() => {\n                markResponseListenerErrored(hash);\n                deleteResponseListener(hash);\n            });\n\n            const totalAckTimeout = isWindowKnown(win) ? ACK_TIMEOUT_KNOWN : ACK_TIMEOUT;\n            const totalResTimeout = responseTimeout;\n\n            let ackTimeout = totalAckTimeout;\n            let resTimeout = totalResTimeout;\n        \n            const interval = safeInterval(() => {\n                if (isWindowClosed(win)) {\n                    return promise.reject(new Error(`Window closed for ${ name } before ${ responseListener.ack ? 'response' : 'ack' }`));\n                }\n\n                if (responseListener.cancelled) {\n                    return promise.reject(new Error(`Response listener was cancelled for ${ name }`));\n                }\n\n                ackTimeout = Math.max(ackTimeout - RESPONSE_CYCLE_TIME, 0);\n                if (resTimeout !== -1) {\n                    resTimeout = Math.max(resTimeout - RESPONSE_CYCLE_TIME, 0);\n                }\n\n                if (!responseListener.ack && ackTimeout === 0) {\n                    return promise.reject(new Error(`No ack for postMessage ${ logName } in ${ getDomain() } in ${ totalAckTimeout }ms`));\n\n                } else if (resTimeout === 0) {\n                    return promise.reject(new Error(`No response for postMessage ${ logName } in ${ getDomain() } in ${ totalResTimeout }ms`));\n                }\n            }, RESPONSE_CYCLE_TIME);\n\n            promise.finally(() => {\n                interval.cancel();\n                reqPromises.splice(reqPromises.indexOf(promise, 1));\n            }).catch(noop);\n        }\n\n        sendMessage(win, domain, {\n            type: MESSAGE_TYPE.REQUEST,\n            hash,\n            name,\n            data,\n            fireAndForget\n        }, { on, send });\n    \n        return fireAndForget ? promise.resolve() : promise;\n    });\n};\n","/* @flow */\n\nimport { setup } from './setup';\nimport { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge, needsBridgeForBrowser, hasBridge,\n    needsBridgeForWin, needsBridgeForDomain, destroyBridges } from './bridge';\n\nexport { ZalgoPromise as Promise } from 'zalgo-promise/src';\n\nexport * from './types';\nexport { ProxyWindow } from './serialize';\nexport { setup, destroy, serializeMessage, deserializeMessage, toProxyWindow } from './setup';\nexport { on, once, send } from './public';\nexport { markWindowKnown } from './lib';\nexport { cleanUpWindow } from './clean';\nexport let bridge;\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n    bridge = { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge,\n        needsBridgeForBrowser, hasBridge, needsBridgeForWin, needsBridgeForDomain, destroyBridges };\n}\n\nif (__POST_ROBOT__.__AUTO_SETUP__) {\n    setup();\n}\n","/* @flow */\n\nimport type { CrossDomainWindowType, DomainMatcher } from 'cross-domain-utils/src';\n\nimport { initHello } from './lib';\nimport { listenForMessages, stopListenForMessages, receiveMessage, setupGlobalReceiveMessage, cancelResponseListeners } from './drivers';\nimport { getGlobal, deleteGlobal } from './global';\nimport { on, send } from './public';\nimport { setupBridge } from './bridge';\nimport { serializeMessage as internalSerializeMessage, deserializeMessage as internalDeserializeMessage, ProxyWindow } from './serialize';\n\nexport function serializeMessage<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T) : string {\n    return internalSerializeMessage(destination, domain, obj, { on, send });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string) : T {\n    return internalDeserializeMessage(source, origin, message, { on, send });\n}\n\nexport function toProxyWindow(win : CrossDomainWindowType | ProxyWindow) : ProxyWindow {\n    return ProxyWindow.toProxyWindow(win, { send });\n}\n\nexport function setup() {\n    if (!getGlobal().initialized) {\n        getGlobal().initialized = true;\n    \n        setupGlobalReceiveMessage({ on, send });\n        listenForMessages({ on, send });\n    \n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            setupBridge({ on, send, receiveMessage });\n        }\n\n        initHello({ on, send });\n    }\n}\n\nexport function destroy() {\n    cancelResponseListeners();\n    stopListenForMessages();\n    deleteGlobal();\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { windowStore } from './global';\n\nexport function cleanUpWindow(win : CrossDomainWindowType) {\n    const requestPromises = windowStore('requestPromises');\n    for (const promise of requestPromises.get(win, [])) {\n        promise.reject(new Error(`Window cleaned up before response`)).catch(noop);\n    }\n}\n","/* @flow */\n\nimport { isSameDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nexport function getGlobal(win? : CrossDomainWindowType = window) : Object {\n\n    if (!isSameDomain(win)) {\n        throw new Error(`Can not get global for window on different domain`);\n    }\n\n    if (!win[__ZOID__.__GLOBAL_KEY__]) {\n        win[__ZOID__.__GLOBAL_KEY__] = {};\n    }\n\n    return win[__ZOID__.__GLOBAL_KEY__];\n}\n\nexport function destroyGlobal() {\n    delete window[__ZOID__.__GLOBAL_KEY__];\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nexport type ProxyObject<T> = {|\n    get : () => ZalgoPromise<T>\n|};\n\nexport function getProxyObject<T>(obj : T) : ProxyObject<T> {\n    return {\n        get() : ZalgoPromise<T> {\n            return ZalgoPromise.try(() => {\n                if (this.source && this.source !== window) {\n                    throw new Error(`Can not call get on proxy object from a remote window`);\n                }\n    \n                return obj;\n            });\n        }\n    };\n}\n","/* @flow */\n\nimport { WINDOW_TYPE } from 'cross-domain-utils/src';\n\nexport const ZOID = `zoid`;\n\nexport const POST_MESSAGE = {\n    DELEGATE:       `${ ZOID }_delegate`,\n    ALLOW_DELEGATE: `${ ZOID }_allow_delegate`\n};\n\nexport const PROP_TYPE = {\n    STRING:   `string`,\n    OBJECT:   `object`,\n    FUNCTION: `function`,\n    BOOLEAN:  `boolean`,\n    NUMBER:   `number`,\n    ARRAY:    `array`\n};\n\nexport const INITIAL_PROPS = {\n    RAW: 'raw',\n    UID: 'uid'\n};\n\nexport const WINDOW_REFERENCES = {\n    OPENER: ('opener' : 'opener'),\n    PARENT: ('parent' : 'parent'),\n    GLOBAL: ('global' : 'global')\n};\n\nexport const PROP_SERIALIZATION = {\n    JSON:   ('json' : 'json'),\n    DOTIFY: ('dotify' : 'dotify'),\n    BASE64: ('base64' : 'base64')\n};\n\nexport const CONTEXT = WINDOW_TYPE;\n\nexport const WILDCARD = '*';\n\nexport const DEFAULT_DIMENSIONS = {\n    WIDTH:  '300px',\n    HEIGHT: '150px'\n};\n\nexport const EVENT = {\n    RENDER:   'zoid-render',\n    RENDERED: 'zoid-rendered',\n    DISPLAY:  'zoid-display',\n    ERROR:    'zoid-error',\n    CLOSE:    'zoid-close',\n    PROPS:    'zoid-props',\n    RESIZE:   'zoid-resize'\n};\n","/* @flow */\n\nimport { getDomain, isSameDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport type { Component } from '../component';\nimport type { PropsType, MixedPropDefinitionType } from '../component/props';\n\nimport type { ChildHelpers } from './index';\n\nexport function normalizeChildProp<T, P>(component : Component<P>, props : (PropsType<P>), key : string, value : T, helpers : ChildHelpers<P>) : ?T  {\n\n    // $FlowFixMe\n    const prop : MixedPropDefinitionType<P> = component.getPropDefinition(key);\n\n    if (!prop) {\n        return value;\n    }\n\n    if (typeof prop.childDecorate === 'function') {\n        return prop.childDecorate({ value, ...helpers });\n    }\n\n    return value;\n}\n\n// eslint-disable-next-line max-params\nexport function normalizeChildProps<P>(parentComponentWindow : CrossDomainWindowType, component : Component<P>, props : (PropsType<P>), origin : string, helpers : ChildHelpers<P>, isUpdate : boolean = false) : (PropsType<P>) {\n\n    const result = {};\n\n    for (const key of Object.keys(props)) {\n        const prop = component.getPropDefinition(key);\n\n        if (prop && prop.sameDomain && (origin !== getDomain(window) || !isSameDomain(parentComponentWindow))) {\n            continue;\n        }\n\n        // $FlowFixMe\n        const value = normalizeChildProp(component, props, key, props[key], helpers);\n\n        result[key] = value;\n        if (prop && prop.alias && !result[prop.alias]) {\n            result[prop.alias] = value;\n        }\n    }\n\n    if (!isUpdate) {\n        for (const key of component.getPropNames()) {\n            if (!props.hasOwnProperty(key)) {\n                result[key] = normalizeChildProp(component, props, key, props[key], helpers);\n            }\n        }\n    }\n\n    // $FlowFixMe\n    return result;\n}\n","/* @flow */\n\nimport { inlineMemoize, stringifyError, base64decode } from 'belter/src';\n\nimport { ZOID } from '../constants';\nimport type { ChildPayload } from '../parent';\n\nfunction parseChildWindowName(windowName : string) : ChildPayload {\n    return inlineMemoize(parseChildWindowName, () => {\n        if (!windowName) {\n            throw new Error(`No window name`);\n        }\n    \n        const [ , zoidcomp, name, encodedPayload ] = windowName.split('__');\n    \n        if (zoidcomp !== ZOID) {\n            throw new Error(`Window not rendered by zoid - got ${ zoidcomp }`);\n        }\n    \n        if (!name) {\n            throw new Error(`Expected component name`);\n        }\n    \n        if (!encodedPayload) {\n            throw new Error(`Expected encoded payload`);\n        }\n    \n        try {\n            return JSON.parse(base64decode(encodedPayload));\n        } catch (err) {\n            throw new Error(`Can not decode window name payload: ${ encodedPayload }: ${ stringifyError(err) }`);\n        }\n    }, [ windowName ]);\n}\n\nexport function getChildPayload() : ?ChildPayload {\n    try {\n        return parseChildWindowName(window.name);\n    } catch (err) {\n        // pass\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isSameDomain, matchDomain, getDomain, getOpener,\n    getNthParentFromTop, getAncestor, getAllFramesInWindow,\n    type CrossDomainWindowType, onCloseWindow } from 'cross-domain-utils/src';\nimport { markWindowKnown, deserializeMessage, type CrossDomainFunctionType } from 'post-robot/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { extend, waitForDocumentBody, onResize, getElementSafe, assertExists } from 'belter/src';\n\nimport { getGlobal } from '../lib';\nimport { CONTEXT, INITIAL_PROPS, WINDOW_REFERENCES } from '../constants';\nimport type { Component } from '../component';\nimport type { PropsType } from '../component/props';\nimport type { WindowRef, PropRef, ParentExportsType } from '../parent';\n\nimport { normalizeChildProps } from './props';\nimport { getChildPayload } from './window';\n\nexport * from './window';\n\nexport type ChildExportsType<P> = {|\n    updateProps : CrossDomainFunctionType<[ PropsType<P> ], void>,\n    close : CrossDomainFunctionType<[], void>\n|};\n\nexport type ChildHelpers<P> = {|\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void>,\n    onError : (mixed) => ZalgoPromise<void>,\n    onProps : ((PropsType<P>) => void) => void,\n    getParent : () => CrossDomainWindowType,\n    getParentDomain : () => string\n|};\n\n/*  Child Component\n    ---------------\n\n    This is the portion of code which runs inside the frame or popup window containing the component's implementation.\n\n    When the component author calls myComponent.attach(), it creates a new instance of ChildComponent, which is then\n    responsible for managing the state and messaging back up to the parent, and providing props for the component to\n    utilize.\n*/\n\nexport class ChildComponent<P> {\n\n    component : Component<P>\n    props : PropsType<P>\n    context : string\n    parent : ParentExportsType<P>\n    parentDomain : string\n    parentComponentWindow : CrossDomainWindowType\n\n    onPropHandlers : Array<(PropsType<P>) => void> // eslint-disable-line flowtype/no-mutable-array\n    autoResize : { width : boolean, height : boolean, element? : string }\n\n    constructor(component : Component<P>) {\n        ZalgoPromise.try(() => {\n            this.component = component;\n            this.onPropHandlers = [];\n            \n            const childPayload = getChildPayload();\n\n            if (!childPayload) {\n                throw new Error(`No child payload found`);\n            }\n\n            if (childPayload.version !== __ZOID__.__VERSION__) {\n                throw new Error(`Parent window has zoid version ${ childPayload.version }, child window has version ${ __ZOID__.__VERSION__ }`);\n            }\n\n            const { parent, parentDomain, exports, context, props } = childPayload;\n\n            this.context = context;\n            this.parentComponentWindow = this.getParentComponentWindow(parent);\n            this.parentDomain = parentDomain;\n            this.parent = deserializeMessage(this.parentComponentWindow, parentDomain, exports);\n\n            this.checkParentDomain(parentDomain);\n\n            const initialProps = this.getPropsByRef(this.parentComponentWindow, parentDomain, props);\n            this.setProps(initialProps, parentDomain);\n            markWindowKnown(this.parentComponentWindow);\n            \n            this.watchForClose();\n\n            return this.parent.init(this.buildExports());\n\n        }).then(() => {\n            return this.watchForResize();\n\n        }).catch(err => {\n            this.onError(err);\n        });\n    }\n\n    getHelpers() : ChildHelpers<P> {\n        return {\n            focus:           () => this.focus(),\n            close:           () => this.close(),\n            resize:          ({ width, height }) => this.resize({ width, height }),\n            onError:         (err) => this.onError(err),\n            onProps:         (handler) => this.onProps(handler),\n            getParent:       () => this.parentComponentWindow,\n            getParentDomain: () => this.parentDomain\n        };\n    }\n\n    checkParentDomain(domain : string) {\n        if (!matchDomain(this.component.allowedParentDomains, domain)) {\n            throw new Error(`Can not be rendered by domain: ${ domain }`);\n        }\n    }\n\n    onProps(handler : Function) {\n        this.onPropHandlers.push(handler);\n    }\n\n    getPropsByRef(parentComponentWindow : CrossDomainWindowType, domain : string, { type, value, uid } : PropRef) : (PropsType<P>) {\n        let props;\n\n        if (type === INITIAL_PROPS.RAW) {\n            props = value;\n        } else if (type === INITIAL_PROPS.UID) {\n            if (!isSameDomain(parentComponentWindow)) {\n                throw new Error(`Parent component window is on a different domain - expected ${ getDomain() } - can not retrieve props`);\n            }\n\n            const global = getGlobal(parentComponentWindow);\n            props = assertExists('props', global && global.props[uid]);\n        }\n\n        if (!props) {\n            throw new Error(`Could not find props`);\n        }\n\n        return deserializeMessage(parentComponentWindow, domain, props);\n    }\n\n    getParentComponentWindow(ref : WindowRef) : CrossDomainWindowType {\n        const { type } = ref;\n    \n        if (type === WINDOW_REFERENCES.OPENER) {\n            return assertExists('opener', getOpener(window));\n    \n        } else if (type === WINDOW_REFERENCES.PARENT && typeof ref.distance === 'number') {\n            return assertExists('parent', getNthParentFromTop(window, ref.distance));\n\n        } else if (type === WINDOW_REFERENCES.GLOBAL && ref.uid && typeof ref.uid === 'string') {\n            const { uid } = ref;\n            const ancestor = getAncestor(window);\n\n            if (!ancestor) {\n                throw new Error(`Can not find ancestor window`);\n            }\n\n            for (const frame of getAllFramesInWindow(ancestor)) {\n                if (isSameDomain(frame)) {\n                    const global = getGlobal(frame);\n\n                    if (global && global.windows && global.windows[uid]) {\n                        return global.windows[uid];\n                    }\n                }\n            }\n        }\n    \n        throw new Error(`Unable to find ${ type } parent component window`);\n    }\n\n    getProps() : PropsType<P> {\n        // $FlowFixMe\n        this.props = this.props || {};\n        return this.props;\n    }\n\n    setProps(props : PropsType<P>, origin : string, isUpdate : boolean = false) {\n        const helpers = this.getHelpers();\n        const existingProps = this.getProps();\n        const normalizedProps = normalizeChildProps(this.parentComponentWindow, this.component, props, origin, helpers, isUpdate);\n\n        extend(existingProps, normalizedProps);\n\n        for (const handler of this.onPropHandlers) {\n            handler.call(this, existingProps);\n        }\n    }\n\n    watchForClose() {\n        window.addEventListener('beforeunload', () => {\n            this.parent.checkClose.fireAndForget();\n        });\n\n        window.addEventListener('unload', () => {\n            this.parent.checkClose.fireAndForget();\n        });\n\n        onCloseWindow(this.parentComponentWindow, () => {\n            this.destroy();\n        });\n    }\n\n    getAutoResize() : { width : boolean, height : boolean, element : ?HTMLElement } {\n        let { width = false, height = false, element = 'body' } = this.autoResize || this.component.autoResize || {};\n        element = getElementSafe(element);\n        return { width, height, element };\n    }\n\n    watchForResize() : ?ZalgoPromise<void> {\n        return waitForDocumentBody().then(() => {\n            const { width, height, element } = this.getAutoResize();\n\n            if (!element || (!width && !height) || this.context === CONTEXT.POPUP) {\n                return;\n            }\n\n            onResize(element, ({ width: newWidth, height: newHeight }) => {\n                this.resize({\n                    width:  width ? newWidth : undefined,\n                    height: height ? newHeight : undefined\n                });\n            }, { width, height });\n        });\n    }\n\n    buildExports() : ChildExportsType<P> {\n\n        const self = this;\n\n        return {\n            updateProps(props : (PropsType<P>)) : ZalgoPromise<void> {\n                return ZalgoPromise.try(() => self.setProps(props, this.__origin__, true));\n            },\n\n            close() : ZalgoPromise<void> {\n                return ZalgoPromise.try(() => self.destroy());\n            }\n        };\n    }\n\n    resize({ width, height } : { width : ?number, height : ?number }) : ZalgoPromise<void> {\n        return this.parent.resize.fireAndForget({ width, height });\n    }\n\n    close() : ZalgoPromise<void> {\n        return this.parent.close();\n    }\n    \n    destroy() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            window.close();\n        });\n    }\n\n    focus() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            window.focus();\n        });\n    }\n\n    onError(err : mixed) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (this.parent && this.parent.onError) {\n                return this.parent.onError(err);\n            } else {\n                throw err;\n            }\n        });\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { cleanUpWindow, ProxyWindow, toProxyWindow } from 'post-robot/src';\nimport { assertSameDomain, closeWindow } from 'cross-domain-utils/src';\nimport { iframe, popup, destroyElement, normalizeDimension, watchElementForClose,\n    awaitFrameWindow, uniqueID } from 'belter/src';\n\nimport { CONTEXT } from '../constants';\nimport { getProxyObject, type ProxyObject } from '../lib';\n\n\nexport type ContextDriverType = {|\n    openOnClick : boolean,\n    openFrame? : () => ProxyObject<HTMLIFrameElement>,\n    open : (?ProxyObject<HTMLIFrameElement>) => ZalgoPromise<ProxyWindow>,\n    openPrerenderFrame? : () => ProxyObject<HTMLIFrameElement>,\n    openPrerender : (ProxyWindow, ?ProxyObject<HTMLIFrameElement>) => ZalgoPromise<ProxyWindow>,\n    resize? : ({ width : ?number, height : ?number }) => void,\n    delegate : $ReadOnlyArray<string>\n|};\n\nexport const RENDER_DRIVERS : { [string] : ContextDriverType } = {};\n\nRENDER_DRIVERS[CONTEXT.IFRAME] = {\n    openOnClick: false,\n\n    openFrame() : ProxyObject<HTMLIFrameElement> {\n        return getProxyObject(iframe({\n            attributes: {\n                title: this.component.name,\n                ...this.component.attributes.iframe\n            }\n        }));\n    },\n\n    open(proxyFrame : ?ProxyObject<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        if (!proxyFrame) {\n            throw new Error(`Expected proxy frame to be passed`);\n        }\n\n        return proxyFrame.get().then(frame => {\n            return awaitFrameWindow(frame).then(win => {\n\n                const frameWatcher = watchElementForClose(frame, () => this.close());\n                this.clean.register(() => frameWatcher.cancel());\n                this.clean.register(() => destroyElement(frame));\n                this.clean.register(() => cleanUpWindow(win));\n\n                return toProxyWindow(win);\n            });\n        });\n    },\n\n    openPrerenderFrame() : ProxyObject<HTMLIFrameElement> {\n        return getProxyObject(iframe({\n            attributes: {\n                name:  `__zoid_prerender_frame__${ this.component.name }_${ uniqueID() }__`,\n                title: `prerender__${ this.component.name }`,\n                ...this.component.attributes.iframe\n            }\n        }));\n    },\n\n    openPrerender(proxyWin : ProxyWindow, proxyPrerenderFrame : ?ProxyObject<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        if (!proxyPrerenderFrame) {\n            throw new Error(`Expected proxy frame to be passed`);\n        }\n        \n        return proxyPrerenderFrame.get().then(prerenderFrame => {\n            this.clean.register(() => destroyElement(prerenderFrame));\n\n            return awaitFrameWindow(prerenderFrame).then(prerenderFrameWindow => {\n                return assertSameDomain(prerenderFrameWindow);\n            }).then(win => {\n                return toProxyWindow(win);\n            });\n        });\n    },\n\n    delegate: [\n        'getProxyContainer',\n        'renderContainer',\n        'openFrame',\n        'openPrerenderFrame',\n        'prerender',\n        'open',\n        'openPrerender'\n    ]\n};\n\nif (__ZOID__.__POPUP_SUPPORT__) {\n    RENDER_DRIVERS[CONTEXT.POPUP] = {\n        openOnClick: true,\n\n        open() : ZalgoPromise<ProxyWindow> {\n            return ZalgoPromise.try(() => {\n                let { width, height } = this.component.dimensions;\n\n                width = normalizeDimension(width, window.outerWidth);\n                height = normalizeDimension(height, window.outerWidth);\n\n                const win = popup('', {\n                    width,\n                    height,\n                    ...this.component.attributes.popup\n                });\n\n                this.clean.register(() => {\n                    closeWindow(win);\n                    cleanUpWindow(win);\n                });\n\n                return toProxyWindow(win);\n            });\n        },\n\n        openPrerender(proxyWin : ProxyWindow) : ZalgoPromise<ProxyWindow> {\n            return ZalgoPromise.try(() => {\n                return proxyWin;\n            });\n        },\n\n        delegate: [\n            'getProxyContainer',\n            'renderContainer',\n            'setProxyWin'\n        ]\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { dotify, isDefined, extend } from 'belter/src';\n\nimport type { Component } from '../component';\nimport type { BuiltInPropsDefinitionType, PropsInputType, PropsType, MixedPropDefinitionType } from '../component/props';\nimport { PROP_SERIALIZATION } from '../constants';\n\nimport type { ParentHelpers } from './index';\n\n/*  Normalize Props\n    ---------------\n\n    Turn props into normalized values, using defaults, function options, etc.\n*/\n\nexport function extendProps<P>(component : Component<P>, props : PropsType<P>, inputProps : PropsInputType<P>, helpers : ParentHelpers<P>, isUpdate : boolean = false) { // eslint-disable-line complexity\n\n    // $FlowFixMe\n    inputProps = inputProps || {};\n    extend(props, inputProps);\n\n    const propNames = isUpdate ? [] : [ ...component.getPropNames() ];\n\n    for (const key of Object.keys(inputProps)) {\n        if (propNames.indexOf(key) === -1) {\n            propNames.push(key);\n        }\n    }\n\n    const aliases = [];\n\n    const { state, close, focus, onError } = helpers;\n\n    for (const key of propNames) {\n        const propDef = component.getPropDefinition(key);\n        let value = inputProps[key];\n\n        if (!propDef) {\n            continue;\n        }\n\n        const alias = propDef.alias;\n        if (alias) {\n            if (!isDefined(value) && isDefined(inputProps[alias])) {\n                value = inputProps[alias];\n            }\n            aliases.push(alias);\n        }\n\n        if (propDef.value) {\n            value = propDef.value({ props, state, close, focus, onError });\n        }\n\n        if (!isDefined(value) && propDef.default) {\n            value = propDef.default({ props, state, close, focus, onError });\n        }\n\n        if (isDefined(value)) {\n            if (propDef.type === 'array' ? !Array.isArray(value) : (typeof value !== propDef.type)) {\n                throw new TypeError(`Prop is not of type ${ propDef.type }: ${ key }`);\n            }\n        }\n        \n        // $FlowFixMe\n        props[key] = value;\n    }\n\n    for (const alias of aliases) {\n        delete props[alias];\n    }\n\n    // $FlowFixMe\n    for (const key of Object.keys(props)) {\n        const propDef = component.getPropDefinition(key);\n        const value = props[key];\n\n        if (!propDef) {\n            continue;\n        }\n\n        if (isDefined(value) && propDef.validate) {\n            // $FlowFixMe\n            propDef.validate({ value, props });\n        }\n\n        if (isDefined(value) && propDef.decorate) {\n            props[key] = propDef.decorate({ value, props, state, close, focus, onError });\n        }\n    }\n\n    for (const key of component.getPropNames()) {\n        const propDef = component.getPropDefinition(key);\n        if (propDef.required !== false && !isDefined(props[key])) {\n            throw new Error(`Expected prop \"${ key }\" to be defined`);\n        }\n    }\n}\n\n// $FlowFixMe\nfunction getQueryParam<T, P>(prop : MixedPropDefinitionType<P>, key : string, value : T) : ZalgoPromise<string> {\n    return ZalgoPromise.try(() => {\n        if (typeof prop.queryParam === 'function') {\n            return prop.queryParam({ value });\n        } else if (typeof prop.queryParam === 'string') {\n            return prop.queryParam;\n        } else {\n            return key;\n        }\n    });\n}\n\n// $FlowFixMe\nfunction getQueryValue<T, P>(prop : MixedPropDefinitionType<P>, key : string, value : T) : ZalgoPromise<mixed> {\n    return ZalgoPromise.try(() => {\n        if (typeof prop.queryValue === 'function' && isDefined(value)) {\n            return prop.queryValue({ value });\n        } else {\n            return value;\n        }\n    });\n}\n\nexport function propsToQuery<P>(propsDef : BuiltInPropsDefinitionType<P>, props : (PropsType<P>)) : ZalgoPromise<{ [string] : string }> {\n\n    const params = {};\n\n    // $FlowFixMe\n    const keys = Object.keys(props);\n    \n    return ZalgoPromise.all(keys.map(key => {\n\n        const prop = propsDef[key];\n\n        if (!prop) {\n            return; // eslint-disable-line array-callback-return\n        }\n\n        return ZalgoPromise.resolve().then(() => {\n\n            const value = props[key];\n\n            if (!value) {\n                return;\n            }\n\n            if (!prop.queryParam) {\n                return;\n            }\n\n            return value;\n\n        }).then(value => {\n\n            if (value === null || typeof value === 'undefined') {\n                return;\n            }\n\n            return ZalgoPromise.all([\n                getQueryParam(prop, key, value),\n                getQueryValue(prop, key, value)\n            ]).then(([ queryParam, queryValue ]) => {\n\n                let result;\n\n                if (typeof queryValue === 'boolean') {\n                    result = queryValue.toString();\n                } else if (typeof queryValue === 'string') {\n                    result = queryValue.toString();\n                } else if (typeof queryValue === 'object' && queryValue !== null) {\n\n                    if (prop.serialization === PROP_SERIALIZATION.JSON) {\n                        result = JSON.stringify(queryValue);\n                    } else if (prop.serialization === PROP_SERIALIZATION.BASE64) {\n                        result = btoa(JSON.stringify(queryValue));\n                    } else if (prop.serialization === PROP_SERIALIZATION.DOTIFY || !prop.serialization) {\n                        result = dotify(queryValue, key);\n\n                        for (const dotkey of Object.keys(result)) {\n                            params[dotkey] = result[dotkey];\n                        }\n\n                        return;\n                    }\n\n                } else if (typeof queryValue === 'number') {\n                    result = queryValue.toString();\n                }\n\n                params[queryParam] = result;\n            });\n        });\n\n    })).then(() => {\n        return params;\n    });\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { send, bridge, serializeMessage, ProxyWindow, toProxyWindow, type CrossDomainFunctionType } from 'post-robot/src';\nimport { isSameDomain, matchDomain, getDomainFromUrl, isBlankDomain,\n    getDomain, type CrossDomainWindowType,\n    getDistanceFromTop, normalizeMockUrl, assertSameDomain } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { addEventListener, uniqueID, elementReady, writeElementToWindow, eventEmitter, type EventEmitterType,\n    noop, onResize, extendUrl, appendChild, cleanup, type CleanupType, base64encode,\n    once, stringifyError, destroyElement, getElementSafe } from 'belter/src';\n\nimport { ZOID, POST_MESSAGE, CONTEXT, EVENT,\n    INITIAL_PROPS, WINDOW_REFERENCES } from '../constants';\nimport type { Component, onErrorPropType } from '../component';\nimport { getGlobal, getProxyObject, type ProxyObject } from '../lib';\nimport type { PropsInputType, PropsType } from '../component/props';\nimport type { ChildExportsType } from '../child';\nimport type { DimensionsType } from '../types';\n\nimport { RENDER_DRIVERS, type ContextDriverType } from './drivers';\nimport { propsToQuery, extendProps } from './props';\n\nexport type RenderOptionsType<P> = {|\n    uid : string,\n    props : PropsInputType<P>,\n    tag : string,\n    context : string,\n    close : (?string) => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<ProxyWindow>,\n    doc : Document,\n    container? : HTMLElement,\n    dimensions : DimensionsType,\n    state : Object,\n    event : EventEmitterType,\n    frame : ?HTMLIFrameElement,\n    prerenderFrame : ?HTMLIFrameElement\n|};\n\nexport type ParentExportsType<P> = {|\n    init : (ChildExportsType<P>) => ZalgoPromise<void>,\n    close : () => ZalgoPromise<void>,\n    checkClose : CrossDomainFunctionType<[], void>,\n    resize : CrossDomainFunctionType<[{ width? : ?number, height? : ?number }], void>,\n    onError : (mixed) => ZalgoPromise<void>\n|};\n\nexport type PropRef =\n    {| type : typeof INITIAL_PROPS.RAW, uid? : string, value? : string |};\n\nexport type WindowRef =\n    {| type : typeof WINDOW_REFERENCES.OPENER |} |\n    {| type : typeof WINDOW_REFERENCES.PARENT, distance : number |} |\n    {| type : typeof WINDOW_REFERENCES.GLOBAL, uid : string |};\n\nexport type ChildPayload = {|\n    uid : string,\n    tag : string,\n    version : string,\n    context : $Values<typeof CONTEXT>,\n    parentDomain : string,\n    childDomain : string,\n    parent : WindowRef,\n    props : PropRef,\n    exports : string\n|};\n\nexport type StateType = Object;\n\nexport type ParentHelpers<P> = {|\n    state : StateType,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void>,\n    onError : (mixed) => ZalgoPromise<void>,\n    updateProps : PropsInputType<P> => ZalgoPromise<void>,\n    event : EventEmitterType\n|};\n\nexport class ParentComponent<P> {\n\n    component : Component<P>\n    driver : ContextDriverType\n    clean : CleanupType\n    event : EventEmitterType\n\n    initPromise : ZalgoPromise<void>\n    handledErrors : Array<mixed> // eslint-disable-line flowtype/no-mutable-array\n    \n    props : PropsType<P>\n    state : StateType\n    child : ?ChildExportsType<P>\n\n    proxyWin : ?ProxyWindow\n\n    constructor(component : Component<P>, props : PropsInputType<P>) {\n        this.initPromise = new ZalgoPromise();\n        this.handledErrors = [];\n\n        // $FlowFixMe\n        this.props = {};\n\n        this.clean = cleanup(this);\n        this.state = {};\n\n        this.component = component;\n\n        this.setupEvents(props.onError);\n        this.setProps(props);\n        this.component.registerActiveComponent(this);\n        this.clean.register(() => this.component.destroyActiveComponent(this));\n        this.watchForUnload();\n    }\n\n    setupEvents(onError : ?onErrorPropType) {\n        this.event = eventEmitter();\n        \n        this.event.on(EVENT.RENDER,   () => this.props.onRender());\n        this.event.on(EVENT.DISPLAY,  () => this.props.onDisplay());\n        this.event.on(EVENT.RENDERED, () => this.props.onRendered());\n        this.event.on(EVENT.CLOSE,    () => this.props.onClose());\n        this.event.on(EVENT.PROPS,    (props) => this.props.onProps(props));\n\n        this.event.on(EVENT.ERROR, err => {\n            if (this.props && this.props.onError) {\n                return this.props.onError(err);\n            } else if (onError) {\n                return onError(err);\n            } else {\n                return this.initPromise.reject(err).then(() => {\n                    setTimeout(() => {\n                        throw err;\n                    }, 1);\n                });\n            }\n        });\n    }\n\n    render(target : CrossDomainWindowType, container : string | HTMLElement, context : $Values<typeof CONTEXT>) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.component.log(`render`);\n\n            this.driver = RENDER_DRIVERS[context];\n            const uid = `${ ZOID }-${ this.component.tag }-${ uniqueID() }`;\n            const domain = this.getDomain();\n            const childDomain = this.getChildDomain();\n            \n            this.component.checkAllowRender(target, domain, container);\n\n            if (target !== window) {\n                this.delegate(context, target);\n            }\n\n            const tasks = {};\n\n            const init = this.initPromise;\n            const buildUrl = this.buildUrl();\n            const onRender = this.event.trigger(EVENT.RENDER);\n\n            const getProxyContainer = this.getProxyContainer(container);\n\n            const openFrame = this.openFrame();\n            const openPrerenderFrame = this.openPrerenderFrame();\n\n            const renderContainer = ZalgoPromise.hash({ proxyContainer: getProxyContainer, proxyFrame: openFrame, proxyPrerenderFrame: openPrerenderFrame }).then(({ proxyContainer, proxyFrame, proxyPrerenderFrame }) => {\n                return this.renderContainer(proxyContainer, { context, uid, proxyFrame, proxyPrerenderFrame });\n            });\n\n            const open = this.driver.openOnClick\n                ? this.open()\n                : openFrame.then(proxyFrame => this.open(proxyFrame));\n\n            const openPrerender = ZalgoPromise.hash({ proxyWin: open, proxyPrerenderFrame: openPrerenderFrame }).then(({ proxyWin, proxyPrerenderFrame }) => {\n                return this.openPrerender(proxyWin, proxyPrerenderFrame);\n            });\n\n            const setState = open.then(proxyWin => {\n                this.proxyWin = proxyWin;\n                return this.setProxyWin(proxyWin);\n            });\n            \n            const prerender = ZalgoPromise.hash({ proxyPrerenderWin: openPrerender, state: setState }).then(({ proxyPrerenderWin }) => {\n                return this.prerender(proxyPrerenderWin, { context, uid });\n            });\n\n            const buildWindowName = open.then(proxyWin => {\n                return this.buildWindowName({ proxyWin, childDomain, domain, target, context, uid });\n            });\n\n            const setWindowName =  ZalgoPromise.hash({ proxyWin: open, windowName: buildWindowName }).then(({ proxyWin, windowName }) => {\n                return proxyWin.setName(windowName);\n            });\n\n            const loadUrl = ZalgoPromise.hash({ proxyWin: open, url: buildUrl, windowName: setWindowName, prerender }).then(({ proxyWin, url }) => {\n                return proxyWin.setLocation(url);\n            });\n\n            const watchForClose = open.then(proxyWin => {\n                this.watchForClose(proxyWin);\n            });\n\n            const onDisplay = ZalgoPromise.hash({ container: renderContainer, prerender }).then(() => {\n                return this.event.trigger(EVENT.DISPLAY);\n            });\n\n            const openBridge = open.then(proxyWin => {\n                return this.openBridge(proxyWin, childDomain, context);\n            });\n\n            const runTimeout = loadUrl.then(() => {\n                return this.runTimeout();\n            });\n\n            const onRendered = init.then(() => {\n                return this.event.trigger(EVENT.RENDERED);\n            });\n\n            return ZalgoPromise.hash({\n                init, buildUrl, onRender, getProxyContainer, openFrame, openPrerenderFrame, renderContainer, open,\n                openPrerender, setState, prerender, loadUrl, buildWindowName, setWindowName, watchForClose, onDisplay,\n                openBridge, runTimeout, onRendered\n            }).catch(err => {\n                for (const taskName of Object.keys(tasks)) {\n                    tasks[taskName].reject(err);\n                }\n\n                throw err;\n            });\n            \n        }).catch(err => {\n            return ZalgoPromise.all([\n                this.onError(err),\n                this.destroy(err)\n            ]).then(() => {\n                throw err;\n            });\n        }).then(noop);\n    }\n\n    getProxyContainer(container : string | HTMLElement) : ZalgoPromise<ProxyObject<HTMLElement>> {\n        return ZalgoPromise.try(() => {\n            return elementReady(container);\n        }).then(containerElement => {\n            return getProxyObject(containerElement);\n        });\n    }\n\n    buildWindowName({ proxyWin, childDomain, domain, target, uid, context } : { proxyWin : ProxyWindow, childDomain : string, domain : string | RegExp, target : CrossDomainWindowType, context : $Values<typeof CONTEXT>, uid : string }) : string {\n        const childPayload = this.buildChildPayload({ proxyWin, childDomain, domain, target, context, uid });\n        return `__${ ZOID }__${ this.component.name }__${ base64encode(JSON.stringify(childPayload)) }__`;\n    }\n\n    getPropsRef(proxyWin : ProxyWindow, childDomain : string, domain : string | RegExp, uid : string) : PropRef {\n        const value = serializeMessage(proxyWin, domain, this.getPropsForChild(domain));\n\n        const propRef = (childDomain === getDomain())\n            ? { type: INITIAL_PROPS.UID, uid }\n            : { type: INITIAL_PROPS.RAW, value };\n\n        if (propRef.type === INITIAL_PROPS.UID) {\n            const global = getGlobal(window);\n            global.props = global.props || {};\n            global.props[uid] = value;\n\n            this.clean.register(() => {\n                delete global.props[uid];\n            });\n        }\n\n        return propRef;\n    }\n\n    buildChildPayload({ proxyWin, childDomain, domain, target = window, context, uid } : { proxyWin : ProxyWindow, childDomain : string, domain : string | RegExp, target : CrossDomainWindowType, context : $Values<typeof CONTEXT>, uid : string } = {}) : ChildPayload {\n        return {\n            uid,\n            context,\n            version:      __ZOID__.__VERSION__,\n            childDomain,\n            parentDomain: getDomain(window),\n            tag:          this.component.tag,\n            parent:       this.getWindowRef(target, childDomain, uid, context),\n            props:        this.getPropsRef(proxyWin, childDomain, domain, uid),\n            exports:      serializeMessage(proxyWin, domain, this.buildParentExports(proxyWin))\n        };\n    }\n\n    setProxyWin(proxyWin : ProxyWindow) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.proxyWin = proxyWin;\n        });\n    }\n\n    getHelpers() : ParentHelpers<P> {\n        return {\n            state:       this.state,\n            event:       this.event,\n            close:       () => this.close(),\n            focus:       () => this.focus(),\n            resize:      ({ width, height }) => this.resize({ width, height }),\n            onError:     (err) => this.onError(err),\n            updateProps: (props) => this.updateProps(props)\n        };\n    }\n\n    setProps(props : PropsInputType<P>, isUpdate : boolean = false) {\n        if (this.component.validate) {\n            this.component.validate({ props });\n        }\n\n        const helpers = this.getHelpers();\n        extendProps(this.component, this.props, props, helpers, isUpdate);\n    }\n\n    buildUrl() : ZalgoPromise<string> {\n        return propsToQuery({ ...this.component.props, ...this.component.builtinProps }, this.props).then(query => {\n            return extendUrl(normalizeMockUrl(this.component.getUrl(this.props)), { query });\n        });\n    }\n\n    getDomain() : string | RegExp {\n        return this.component.getDomain(this.props);\n    }\n\n    getChildDomain() : string {\n        return this.component.getChildDomain(this.props);\n    }\n\n    getPropsForChild(domain : string | RegExp) : (PropsType<P>) {\n        const result = {};\n\n        for (const key of Object.keys(this.props)) {\n            const prop = this.component.getPropDefinition(key);\n\n            if (prop && prop.sendToChild === false) {\n                continue;\n            }\n\n            if (prop && prop.sameDomain && !matchDomain(domain, getDomain(window))) {\n                continue;\n            }\n            \n            result[key] = this.props[key];\n        }\n\n        // $FlowFixMe\n        return result;\n    }\n\n    updateProps(props : PropsInputType<P>) : ZalgoPromise<void> {\n        this.setProps(props, true);\n\n        return this.initPromise.then(() => {\n            if (this.child) {\n                return this.child.updateProps(this.getPropsForChild(this.getDomain())).catch(err => {\n                    if (!this.child || !this.proxyWin) {\n                        return;\n                    }\n\n                    return this.checkClose(this.proxyWin).then(() => {\n                        if (this.child) {\n                            throw err;\n                        }\n                    });\n                });\n            }\n        });\n    }\n\n    openFrame() : ZalgoPromise<?ProxyObject<HTMLIFrameElement>> {\n        return ZalgoPromise.try(() => {\n            if (this.driver.openFrame) {\n                return this.driver.openFrame.call(this);\n            }\n        });\n    }\n\n    openPrerenderFrame() : ZalgoPromise<?ProxyObject<HTMLIFrameElement>> {\n        return ZalgoPromise.try(() => {\n            if (this.driver.openPrerenderFrame) {\n                return this.driver.openPrerenderFrame.call(this);\n            }\n        });\n    }\n    \n    open(proxyFrame : ?ProxyObject<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            this.component.log(`open`);\n\n            const windowProp = this.props.window;\n\n            if (windowProp) {\n                this.clean.register(() => windowProp.close());\n                return toProxyWindow(windowProp);\n            }\n\n            return this.driver.open.call(this, proxyFrame);\n\n        }).then(proxyWin => {\n            this.proxyWin = proxyWin;\n            return proxyWin;\n        });\n    }\n\n    openPrerender(proxyWin : ProxyWindow, proxyPrerenderFrame : ?ProxyObject<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            return this.driver.openPrerender.call(this, proxyWin, proxyPrerenderFrame);\n        });\n    }\n\n    focus() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (this.proxyWin) {\n                return this.proxyWin.focus().then(noop);\n            }\n        });\n    }\n\n    delegate(context : $Values<typeof CONTEXT>, target : CrossDomainWindowType) {\n        this.component.log(`delegate`);\n\n        const props = {};\n        for (const propName of this.component.getPropNames()) {\n            if (this.component.getPropDefinition(propName).allowDelegate) {\n                props[propName] = this.props[propName];\n            }\n        }\n\n        const overridesPromise = send(target, `${ POST_MESSAGE.DELEGATE }_${ this.component.name }`, {\n            context,\n            props,\n            overrides: {\n                event:   this.event,\n                close:   () => this.close(),\n                onError: (err) => this.onError(err)\n            }\n\n        }).then(({ data }) => {\n            this.clean.register(data.destroy);\n            return data.overrides;\n\n        }).catch(err => {\n            throw new Error(`Unable to delegate rendering. Possibly the component is not loaded in the target window.\\n\\n${ stringifyError(err) }`);\n        });\n\n        for (const key of this.driver.delegate) {\n            // $FlowFixMe\n            this[key] = function overriddenFunction() : ZalgoPromise<mixed> {\n                return overridesPromise.then(overrides => {\n                    return overrides[key].apply(this, arguments);\n                });\n            };\n        }\n    }\n\n    getWindowRef(target : CrossDomainWindowType, domain : string, uid : string, context : $Values<typeof CONTEXT>) : WindowRef {\n        \n        if (domain === getDomain(window)) {\n            const global = getGlobal(window);\n            global.windows = global.windows || {};\n            global.windows[uid] = window;\n            this.clean.register(() => {\n                delete global.windows[uid];\n            });\n    \n            return { type: WINDOW_REFERENCES.GLOBAL, uid };\n        }\n\n        if (context === CONTEXT.POPUP) {\n            return { type: WINDOW_REFERENCES.OPENER };\n        }\n\n        return { type: WINDOW_REFERENCES.PARENT, distance: getDistanceFromTop(window) };\n    }\n\n    watchForClose(proxyWin : ProxyWindow) : ZalgoPromise<void> {\n        let cancelled = false;\n\n        this.clean.register(() => {\n            cancelled = true;\n        });\n\n        return ZalgoPromise.delay(2000).then(() => {\n            return proxyWin.isClosed();\n        }).then(isClosed => {\n            if (isClosed) {\n                this.component.log(`detect_close_child`);\n                return this.close();\n            } else if (!cancelled) {\n                return this.watchForClose(proxyWin);\n            }\n        });\n    }\n\n    watchForUnload() {\n        const unloadWindowListener = addEventListener(window, 'unload', once(() => {\n            this.component.log(`navigate_away`);\n            this.destroy(new Error(`Window navigated away`));\n        }));\n\n        this.clean.register(unloadWindowListener.cancel);\n    }\n\n    runTimeout() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            const timeout = this.props.timeout;\n\n            if (timeout) {\n                return this.initPromise.timeout(timeout, new Error(`Loading component timed out after ${ timeout } milliseconds`));\n            }\n        });\n    }\n\n    initChild(child : ChildExportsType<P>) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.clean.set('child', child);\n            this.initPromise.resolve();\n        });\n    }\n\n    buildParentExports(win : ProxyWindow) : ParentExportsType<P> {\n        const onError    = (err) => this.onError(err);\n        const init       = (child) => this.initChild(child);\n        const close      = () => this.close();\n        const checkClose = () => this.checkClose(win);\n        const resize     = ({ width, height }) => this.resize({ width, height });\n\n        init.onError = onError;\n\n        return { init, close, checkClose, resize, onError };\n    }\n\n    resize({ width, height } : { width? : ?number, height? : ?number }) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.event.trigger(EVENT.RESIZE, { width, height });\n        });\n    }\n\n    checkClose(win : ProxyWindow) : ZalgoPromise<void> {\n        return win.isClosed().then(closed => {\n            if (closed) {\n                return this.close();\n            }\n\n            return ZalgoPromise.delay(200)\n                .then(() => win.isClosed())\n                .then(secondClosed => {\n                    if (secondClosed) {\n                        return this.close();\n                    }\n                });\n        });\n    }\n\n    close() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.component.log(`close`);\n            return this.event.trigger(EVENT.CLOSE);\n\n        }).then(() => {\n            if (this.child) {\n                this.child.close.fireAndForget().catch(noop);\n            }\n\n            return this.destroy(new Error(`Window closed`), false);\n        });\n    }\n\n    prerender(proxyPrerenderWin : ProxyWindow, { context, uid } : { context : $Values<typeof CONTEXT>, uid : string }) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            const prerenderTemplate = this.component.prerenderTemplate;\n\n            if (!prerenderTemplate) {\n                return;\n            }\n\n            let prerenderWindow = proxyPrerenderWin.getWindow();\n\n            if (!prerenderWindow || !isSameDomain(prerenderWindow) || !isBlankDomain(prerenderWindow)) {\n                return;\n            }\n\n            prerenderWindow = assertSameDomain(prerenderWindow);\n    \n            const doc = prerenderWindow.document;\n            const el = this.renderTemplate(prerenderTemplate, { context, uid, doc });\n\n            if (!el) {\n                return;\n            }\n\n            if (el.ownerDocument !== doc) {\n                throw new Error(`Expected prerender template to have been created with document from child window`);\n            }\n\n            writeElementToWindow(prerenderWindow, el);\n\n            let { width = false, height = false, element = 'body' } = this.component.autoResize || {};\n            element = getElementSafe(element, doc);\n            \n            if (element && (width || height)) {\n                onResize(element, ({ width: newWidth, height: newHeight }) => {\n                    this.resize({\n                        width:  width ? newWidth : undefined,\n                        height: height ? newHeight : undefined\n                    });\n                }, { width, height, win: prerenderWindow });\n            }\n        });\n    }\n\n    renderTemplate(renderer : (RenderOptionsType<P>) => ?HTMLElement, { context, uid, container, doc, frame, prerenderFrame } : { context : $Values<typeof CONTEXT>, uid : string, container? : HTMLElement, doc : Document, frame? : ?HTMLIFrameElement, prerenderFrame? : ?HTMLIFrameElement }) : ?HTMLElement {\n        // $FlowFixMe\n        return renderer.call(this, {\n            container,\n            context,\n            uid,\n            doc,\n            frame,\n            prerenderFrame,\n            focus:      () => this.focus(),\n            close:      () => this.close(),\n            state:      this.state,\n            props:      this.props,\n            tag:        this.component.tag,\n            dimensions: this.component.dimensions,\n            event:      this.event\n        });\n    }\n\n    renderContainer(proxyContainer : ProxyObject<HTMLElement>, { proxyFrame, proxyPrerenderFrame, context, uid } :\n        { context : $Values<typeof CONTEXT>, uid : string, proxyFrame : ?ProxyObject<HTMLIFrameElement>, proxyPrerenderFrame : ?ProxyObject<HTMLIFrameElement> }) : ZalgoPromise<?ProxyObject<HTMLElement>> {\n        \n\n        return ZalgoPromise.hash({\n            container:      proxyContainer.get().then(elementReady),\n            // $FlowFixMe\n            frame:          proxyFrame ? proxyFrame.get() : null,\n            // $FlowFixMe\n            prerenderFrame: proxyPrerenderFrame ? proxyPrerenderFrame.get() : null\n        }).then(({ container, frame, prerenderFrame }) => {\n            const innerContainer = this.renderTemplate(this.component.containerTemplate, { context, uid, container, frame, prerenderFrame, doc: document });\n            if (innerContainer) {\n                appendChild(container, innerContainer);\n                this.clean.register(() => destroyElement(innerContainer));\n                return getProxyObject(innerContainer);\n            }\n        });\n    }\n\n    destroy(err? : mixed, trigger? : boolean = true) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (!err) {\n                trigger = false;\n                err = new Error('Component destroyed');\n            }\n            this.component.log(`destroy`);\n            return this.onError(err, trigger);\n        }).then(() => {\n            return this.clean.all();\n        });\n    }\n\n    onError(err : mixed, trigger? : boolean = true) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (this.handledErrors.indexOf(err) !== -1) {\n                return;\n            }\n\n            this.handledErrors.push(err);\n            this.initPromise.asyncReject(err);\n\n            if (trigger) {\n                return this.event.trigger(EVENT.ERROR, err);\n            }\n        });\n    }\n\n    openBridge(proxyWin : ProxyWindow, domain : string, context : $Values<typeof CONTEXT>) : ?ZalgoPromise<?CrossDomainWindowType> {\n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            return ZalgoPromise.try(() => {\n                return proxyWin.awaitWindow();\n                \n            }).then(win => {\n                if (!bridge || !bridge.needsBridge({ win, domain }) || bridge.hasBridge(domain, domain)) {\n                    return;\n                }\n\n                const bridgeUrl = this.component.getBridgeUrl();\n\n                if (!bridgeUrl) {\n                    throw new Error(`Bridge needed to render ${ context }`);\n                }\n\n                const bridgeDomain = getDomainFromUrl(bridgeUrl);\n                bridge.linkUrl(win, domain);\n                return bridge.openBridge(normalizeMockUrl(bridgeUrl), bridgeDomain);\n            });\n        }\n    }\n}\n","/* @flow */\n\nimport { onCloseWindow, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { ProxyWindow } from 'post-robot/src';\nimport { cleanup, type CleanupType, type EventEmitterType } from 'belter/src';\n\nimport { ParentComponent } from '../parent';\nimport { RENDER_DRIVERS, type ContextDriverType } from '../parent/drivers';\nimport type { Component } from '../component';\n\nexport type DelegatePropsType = {|\n    onClose : () => ?ZalgoPromise<void>,\n    onDisplay : () => ?ZalgoPromise<void>,\n    window : ?ProxyWindow\n|};\n\nexport type DelegateOptionsType = {|\n    context : string,\n    props : DelegatePropsType,\n    overrides : {\n        close : () => ZalgoPromise<void>,\n        onError : (mixed) => ZalgoPromise<void>,\n        event : EventEmitterType\n    }\n|};\n\nexport type DelegateReturnType = {|\n    overrides : Object,\n    destroy : () => ZalgoPromise<void>\n|};\n\nexport class DelegateComponent<P>  {\n\n    component : Component<P>\n    source : CrossDomainWindowType\n    context : string\n    driver : ContextDriverType\n    props : DelegatePropsType\n    clean : CleanupType\n\n    focus : () => ZalgoPromise<void>\n    resize : ({ width? : ?number, height? : ?number }) => ZalgoPromise<void>\n    renderTemplate : Function\n\n    close : () => ZalgoPromise<void>\n    onError : (mixed) => ZalgoPromise<void>\n    event : EventEmitterType\n\n    constructor(component : Component<P>, source : CrossDomainWindowType, options : DelegateOptionsType) {\n        this.component = component;\n        this.context = options.context;\n        this.driver = RENDER_DRIVERS[options.context];\n        this.clean = cleanup(this);\n        \n        this.focus = ParentComponent.prototype.focus;\n        this.resize = ParentComponent.prototype.resize;\n        this.renderTemplate = ParentComponent.prototype.renderTemplate;\n\n        // $FlowFixMe\n        this.props = {};\n        \n        for (const propName of Object.keys(options.props)) {\n            const propDef = this.component.getPropDefinition(propName);\n            if (propDef && propDef.allowDelegate && options.props[propName]) {\n                // $FlowFixMe\n                this.props[propName] = options.props[propName];\n            }\n        }\n\n        this.close   = options.overrides.close;\n        this.onError = options.overrides.onError;\n        this.event   = options.overrides.event;\n\n        this.component.registerActiveComponent(this);\n        this.clean.register(() => this.component.destroyActiveComponent(this));\n\n        this.watchForSourceClose(source);\n    }\n\n    getDelegate() : DelegateReturnType {\n        return {\n            overrides: this.getOverrides(),\n            destroy:   () => this.destroy()\n        };\n    }\n\n    watchForSourceClose(source : CrossDomainWindowType) {\n        const closeSourceWindowListener = onCloseWindow(source, () => this.destroy(), 3000);\n        this.clean.register(closeSourceWindowListener.cancel);\n    }\n\n    getOverrides() : { [string] : mixed } {\n        const overrides = {};\n        const self = this;\n\n        for (const key of this.driver.delegate) {\n            overrides[key] = function delegateOverride() : mixed {\n                // $FlowFixMe\n                return ParentComponent.prototype[key].apply(self, arguments);\n            };\n            overrides[key].__name__ = key;\n        }\n\n        return overrides;\n    }\n\n    destroy() : ZalgoPromise<void> {\n        return this.clean.all();\n    }\n}\n","/* @flow */\n/* eslint react/react-in-jsx-scope: off */\n\nimport { destroyElement, toCSS } from 'belter/src';\n\nimport { type RenderOptionsType } from '../../parent';\nimport { EVENT } from '../../constants';\n\nconst CLASS = {\n    VISIBLE:   'visible',\n    INVISIBLE: 'invisible'\n};\n\nexport function defaultContainerTemplate<P>({ uid, frame, prerenderFrame, doc, props, event, dimensions : { width, height } } : RenderOptionsType<P>) : ?HTMLElement {\n    if (__ZOID__.__DEFAULT_CONTAINER__) {\n        if (!frame || !prerenderFrame) {\n            return;\n        }\n\n        const div = doc.createElement('div');\n        div.setAttribute('id', uid);\n        const style = doc.createElement('style');\n        if (props.cspNonce) {\n            style.setAttribute('nonce', props.cspNonce);\n        }\n\n        style.appendChild(doc.createTextNode(`\n            #${ uid } {\n                display: inline-block;\n                position: static;\n                width: ${ width };\n                height: ${ height };\n            }\n\n            #${ uid } > iframe {\n                display: inline-block;\n                position: absolute;\n                width: 100%;\n                height: 100%;\n                top: 0;\n                left: 0;\n                transition: opacity .2s ease-in-out;\n            }\n\n            #${ uid } > iframe.${ CLASS.INVISIBLE } {\n                opacity: 0;\n            }\n\n            #${ uid } > iframe.${ CLASS.VISIBLE } {\n                opacity: 1;\n        }\n        `));\n\n        div.appendChild(frame);\n        div.appendChild(prerenderFrame);\n        div.appendChild(style);\n\n        prerenderFrame.classList.add(CLASS.VISIBLE);\n        frame.classList.add(CLASS.INVISIBLE);\n    \n        event.on(EVENT.RENDERED, () => {\n            prerenderFrame.classList.remove(CLASS.VISIBLE);\n            prerenderFrame.classList.add(CLASS.INVISIBLE);\n    \n            frame.classList.remove(CLASS.INVISIBLE);\n            frame.classList.add(CLASS.VISIBLE);\n    \n            setTimeout(() => {\n                destroyElement(prerenderFrame);\n            }, 1);\n        });\n\n        event.on(EVENT.RESIZE, ({ width: newWidth, height: newHeight }) => {\n            if (typeof newWidth === 'number') {\n                div.style.width = toCSS(newWidth);\n            }\n    \n            if (typeof newHeight === 'number') {\n                div.style.height = toCSS(newHeight);\n            }\n        });\n\n        return div;\n    }\n}\n","/* @flow */\n/* eslint react/react-in-jsx-scope: off */\n\nimport { type RenderOptionsType } from '../../parent';\n\nexport function defaultPrerenderTemplate<P>({ doc, props } : RenderOptionsType<P>) : ?HTMLElement {\n    if (__ZOID__.__DEFAULT_PRERENDER__) {\n        const html = doc.createElement('html');\n        const body = doc.createElement('body');\n        const style = doc.createElement('style');\n        const spinner = doc.createElement('div');\n        spinner.classList.add('spinner');\n\n        if (props.cspNonce) {\n            style.setAttribute('nonce', props.cspNonce);\n        }\n\n        html.appendChild(body);\n        body.appendChild(spinner);\n        body.appendChild(style);\n        style.appendChild(doc.createTextNode(`\n            html, body {\n                width: 100%;\n                height: 100%;\n            }\n\n            .spinner {\n                position: fixed;\n                max-height: 60vmin;\n                max-width: 60vmin;\n                height: 40px;\n                width: 40px;\n                top: 50%;\n                left: 50%;\n                box-sizing: border-box;\n                border: 3px solid rgba(0, 0, 0, .2);\n                border-top-color: rgba(33, 128, 192, 0.8);\n                border-radius: 100%;\n                animation: rotation .7s infinite linear;\n            }\n\n            @keyframes rotation {\n                from {\n                    transform: translateX(-50%) translateY(-50%) rotate(0deg);\n                }\n                to {\n                    transform: translateX(-50%) translateY(-50%) rotate(359deg);\n                }\n            }\n        `));\n\n        return html;\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { once, noop } from 'belter/src';\nimport { isWindow, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ProxyWindow, toProxyWindow } from 'post-robot/src';\n\nimport { PROP_SERIALIZATION } from '../constants';\n\nexport type EventHandlerType<T> = (T) => void | ZalgoPromise<void>;\n\nexport type timeoutPropType = number;\nexport type windowPropType = CrossDomainWindowType | ProxyWindow;\nexport type cspNoncePropType = string;\nexport type closePropType = () => ZalgoPromise<void>;\nexport type focusPropType = () => ZalgoPromise<void>;\nexport type resizePropType = ({ width : ?number, height : ?number }) => ZalgoPromise<void>;\n\nexport type onDisplayPropType = EventHandlerType<void>;\nexport type onRenderedPropType = EventHandlerType<void>;\nexport type onRenderPropType = EventHandlerType<void>;\nexport type onClosePropType = EventHandlerType<void>;\nexport type onErrorPropType = EventHandlerType<mixed>;\nexport type onPropsPropType<P> = ((PropsType<P>) => void) => void; // eslint-disable-line no-use-before-define\n\nexport type PropsInputType<P> = {\n    timeout? : timeoutPropType,\n    window? : windowPropType,\n    cspNonce? : cspNoncePropType,\n\n    onDisplay? : onDisplayPropType,\n    onRendered? : onRenderedPropType,\n    onRender? : onRenderPropType,\n    onClose? : onClosePropType,\n    onError? : onErrorPropType,\n    onProps? : onPropsPropType<P>\n} & P;\n\nexport type PropsType<P> = {|\n    timeout? : timeoutPropType,\n    window? : ?windowPropType,\n    close? : ?closePropType,\n    focus? : ?focusPropType,\n    resize? : ?resizePropType,\n    cspNonce? : ?cspNoncePropType,\n\n    onDisplay : onDisplayPropType,\n    onRendered : onRenderedPropType,\n    onRender : onRenderPropType,\n    onClose : onClosePropType,\n    onError : onErrorPropType,\n    onProps : onPropsPropType<P>\n|} & P;\n\ntype PropDefinitionType<T, P, S : string> = {|\n    type : S,\n    alias? : string,\n    value? : ({ props : P, state : Object, close : () => ZalgoPromise<void>, focus : () => ZalgoPromise<void>, onError : (mixed) => ZalgoPromise<void> }) => ?T,\n    required? : boolean,\n    queryParam? : boolean | string | ({ value : T }) => (string | ZalgoPromise<string>),\n    queryValue? : ({ value : T }) => (ZalgoPromise<mixed> | mixed),\n    sendToChild? : boolean,\n    allowDelegate? : boolean,\n    validate? : ({ value : T, props : PropsInputType<P> }) => void,\n    decorate? : ({ value : T, props : PropsType<P>, state : Object, close : () => ZalgoPromise<void>, focus : () => ZalgoPromise<void>, onError : (mixed) => ZalgoPromise<void> }) => T,\n    default? : ({ props : P, state : Object }) => ?T,\n    sameDomain? : boolean,\n    serialization? : $Values<typeof PROP_SERIALIZATION>,\n    childDecorate? : ({ value : T, close : () => ZalgoPromise<void>, focus : () => ZalgoPromise<void>, onError : (mixed) => ZalgoPromise<void>, onProps : ((PropsType<P>) => void) => void, resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void> }) => ?T\n|};\n\nexport type BooleanPropDefinitionType<T : boolean, P> = PropDefinitionType<T, P, 'boolean'>;\nexport type StringPropDefinitionType<T : string, P> = PropDefinitionType<T, P, 'string'>;\nexport type NumberPropDefinitionType<T : number, P> = PropDefinitionType<T, P, 'number'>;\nexport type FunctionPropDefinitionType<T : Function, P> = PropDefinitionType<T, P, 'function'>;\nexport type ArrayPropDefinitionType<T : Array<*> | $ReadOnlyArray<*>, P> = PropDefinitionType<T, P, 'array'>; // eslint-disable-line flowtype/no-mutable-array\nexport type ObjectPropDefinitionType<T : Object, P> = PropDefinitionType<T, P, 'object'>;\n\nexport type MixedPropDefinitionType<P> = BooleanPropDefinitionType<*, P> | StringPropDefinitionType<*, P> | NumberPropDefinitionType<*, P> | FunctionPropDefinitionType<*, P> | ObjectPropDefinitionType<*, P> | ArrayPropDefinitionType<*, P>;\n\nexport type UserPropsDefinitionType<P> = {\n    [string] : MixedPropDefinitionType<P>\n};\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type BuiltInPropsDefinitionType<P> = {\n    timeout : NumberPropDefinitionType<timeoutPropType, P>,\n    window : ObjectPropDefinitionType<windowPropType, P>,\n    close : FunctionPropDefinitionType<closePropType, P>,\n    focus : FunctionPropDefinitionType<focusPropType, P>,\n    resize : FunctionPropDefinitionType<resizePropType, P>,\n\n    onDisplay : FunctionPropDefinitionType<onDisplayPropType, P>,\n    onRendered : FunctionPropDefinitionType<onRenderedPropType, P>,\n    onRender : FunctionPropDefinitionType<onRenderPropType, P>,\n    onClose : FunctionPropDefinitionType<onClosePropType, P>,\n    onError : FunctionPropDefinitionType<onErrorPropType, P>,\n    onProps : FunctionPropDefinitionType<onPropsPropType<P>, P>\n};\n\nconst defaultNoop = () => noop;\nconst decorateOnce = ({ value }) => once(value);\n\nexport function getBuiltInProps<P>() : BuiltInPropsDefinitionType<P> {\n    return {\n        window: {\n            type:          'object',\n            sendToChild:   false,\n            required:      false,\n            allowDelegate: true,\n            validate({ value } : { value : CrossDomainWindowType | ProxyWindow }) {\n                if (!isWindow(value) && !ProxyWindow.isProxyWindow(value)) {\n                    throw new Error(`Expected Window or ProxyWindow`);\n                }\n            },\n            decorate({ value } : { value : CrossDomainWindowType | ProxyWindow }) : ProxyWindow {\n                return toProxyWindow(value);\n            }\n        },\n\n        timeout: {\n            type:        'number',\n            required:    false,\n            sendToChild: false\n        },\n\n        close: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ close }) => close\n        },\n\n        focus: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ focus }) => focus\n        },\n\n        resize: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ resize }) => resize\n        },\n\n        cspNonce: {\n            type:     'string',\n            required: false\n        },\n\n        getParent: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ getParent }) => getParent\n        },\n\n        getParentDomain: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ getParentDomain }) => getParentDomain\n        },\n\n        onDisplay: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop,\n            decorate:      decorateOnce\n        },\n\n        onRendered: {\n            type:        'function',\n            required:    false,\n            sendToChild: false,\n            default:     defaultNoop,\n            decorate:    decorateOnce\n        },\n\n        onRender: {\n            type:        'function',\n            required:    false,\n            sendToChild: false,\n            default:     defaultNoop,\n            decorate:    decorateOnce\n        },\n\n        onClose: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop,\n            decorate:      decorateOnce\n        },\n\n        onError: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ onError }) => onError\n        },\n\n        onProps: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            default:       defaultNoop,\n            childDecorate: ({ onProps }) => onProps\n        }\n    };\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { setup as setupPostRobot, on, send, bridge, toProxyWindow, destroy as destroyPostRobot } from 'post-robot/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindow, getDomainFromUrl, type CrossDomainWindowType, isSameTopWindow, getDomain, matchDomain, isSameDomain } from 'cross-domain-utils/src';\nimport { isRegex, noop, isElement } from 'belter/src';\n\nimport { ChildComponent, getChildPayload } from '../child';\nimport { ParentComponent, type RenderOptionsType, type ParentHelpers } from '../parent';\nimport { DelegateComponent } from '../delegate';\nimport { CONTEXT, POST_MESSAGE, WILDCARD, DEFAULT_DIMENSIONS } from '../constants';\nimport { react, angular, vue, angular2 } from '../drivers';\nimport { getGlobal, destroyGlobal } from '../lib';\nimport type { CssDimensionsType, StringMatcherType } from '../types';\n\nimport { validate } from './validate';\nimport { defaultContainerTemplate, defaultPrerenderTemplate } from './templates';\nimport { getBuiltInProps, type UserPropsDefinitionType, type BuiltInPropsDefinitionType, type PropsInputType, type PropsType, type MixedPropDefinitionType } from './props';\n\ntype LoggerPayload = { [string] : ?string };\n\n// eslint-disable-next-line flowtype/require-exact-type\ntype Logger = {\n    debug : (event : string, payload? : LoggerPayload) => any, // eslint-disable-line flowtype/no-weak-types\n    info : (event : string, payload? : LoggerPayload) => any, // eslint-disable-line flowtype/no-weak-types\n    warn : (event : string, payload? : LoggerPayload) => any, // eslint-disable-line flowtype/no-weak-types\n    error : (event : string, payload? : LoggerPayload) => any // eslint-disable-line flowtype/no-weak-types\n};\n\n/*  Component\n    ---------\n\n    This is the spec for the component. The idea is, when I call zoid.create(), it will create a new instance\n    of Component with the blueprint needed to set up ParentComponents and ChildComponents.\n\n    This is the one portion of code which is required by -- and shared to -- both the parent and child windows, and\n    contains all of the configuration needed for them to set themselves up.\n*/\n\nexport type ComponentOptionsType<P> = {|\n\n    tag : string,\n\n    url : string | ({ props : PropsType<P> }) => string,\n    domain? : string | RegExp,\n    bridgeUrl? : string,\n\n    props? : UserPropsDefinitionType<P>,\n\n    dimensions? : CssDimensionsType,\n    autoResize? : { width? : boolean, height? : boolean, element? : string },\n\n    allowedParentDomains? : StringMatcherType,\n\n    attributes? : {\n        iframe? : { [string] : string },\n        popup? : { [string] : string }\n    },\n\n    defaultContext? : $Values<typeof CONTEXT>,\n\n    containerTemplate? : (RenderOptionsType<P>) => ?HTMLElement,\n    prerenderTemplate? : (RenderOptionsType<P>) => ?HTMLElement,\n\n    validate? : ({ props : PropsInputType<P> }) => void,\n\n    logger? : Logger\n|};\n\ntype ZoidRenderer = {|\n    render : (container? : string | HTMLElement, context? : $Values<typeof CONTEXT>) => ZalgoPromise<void>,\n    renderTo : (target : CrossDomainWindowType, container? : string, context? : $Values<typeof CONTEXT>) => ZalgoPromise<void>\n|};\n\nexport type ZoidComponentInstance<P> = {| ...ParentHelpers<P>, ...ZoidRenderer |};\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type ZoidComponent<P> = {\n    (PropsInputType<P>) : ZoidComponentInstance<P>,\n    driver : (string, mixed) => mixed,\n    isChild : () => boolean,\n    xprops? : PropsType<P>,\n    canRenderTo : (CrossDomainWindowType) => ZalgoPromise<boolean>\n};\n\nexport class Component<P> {\n\n    tag : string\n    name : string\n    \n    url : string | ({ props : PropsType<P> }) => string\n    domain : void | string | RegExp\n    bridgeUrl : void | string\n\n    props : UserPropsDefinitionType<P>\n    builtinProps : BuiltInPropsDefinitionType<P>\n\n    dimensions : CssDimensionsType\n    autoResize : void | { width? : boolean, height? : boolean, element? : string }\n\n    allowedParentDomains : StringMatcherType\n\n    defaultContext : $Values<typeof CONTEXT>\n    \n    attributes : {\n        iframe? : { [string] : string },\n        popup? : { [string] : string }\n    }\n\n    containerTemplate : (RenderOptionsType<P>) => ?HTMLElement\n    prerenderTemplate : ?(RenderOptionsType<P>) => ?HTMLElement\n\n    validate : void | ({ props : PropsInputType<P> }) => void\n\n    driverCache : { [string] : mixed }\n\n    xprops : ?PropsType<P>\n\n    logger : Logger\n\n    propNames : $ReadOnlyArray<string>\n\n    constructor(options : ComponentOptionsType<P>) {\n        validate(options);\n\n        // The tag name of the component. Used by some drivers (e.g. angular) to turn the component into an html element,\n        // e.g. <my-component>\n\n        this.tag = options.tag;\n        this.name = this.tag.replace(/-/g, '_');\n\n        this.allowedParentDomains = options.allowedParentDomains || WILDCARD;\n\n        const global = getGlobal();\n        global.components = global.components || {};\n\n        if (global.components[this.tag]) {\n            throw new Error(`Can not register multiple components with the same tag: ${ this.tag }`);\n        }\n\n        // A json based spec describing what kind of props the component accepts. This is used to validate any props before\n        // they are passed down to the child.\n\n        this.builtinProps = getBuiltInProps();\n        this.props = options.props || {};\n\n        // The dimensions of the component, e.g. { width: '300px', height: '150px' }\n\n        const { width = DEFAULT_DIMENSIONS.WIDTH, height = DEFAULT_DIMENSIONS.HEIGHT } = options.dimensions || {};\n        this.dimensions = { width, height };\n\n        this.url = options.url;\n        this.domain = options.domain;\n        this.bridgeUrl = options.bridgeUrl;\n\n        this.attributes = options.attributes || {};\n        this.attributes.iframe = this.attributes.iframe || {};\n        this.attributes.popup = this.attributes.popup || {};\n\n        this.defaultContext = options.defaultContext || CONTEXT.IFRAME;\n\n        this.autoResize = options.autoResize;\n\n        if (options.containerTemplate) {\n            this.containerTemplate = options.containerTemplate;\n        } else if (__ZOID__.__DEFAULT_CONTAINER__) {\n            this.containerTemplate = defaultContainerTemplate;\n        }\n\n        if (options.prerenderTemplate) {\n            this.prerenderTemplate = options.prerenderTemplate;\n        } else if (__ZOID__.__DEFAULT_PRERENDER__) {\n            this.prerenderTemplate = defaultPrerenderTemplate;\n        }\n\n        this.validate = options.validate;\n\n        this.logger = options.logger || {\n            debug: noop,\n            info:  noop,\n            warn:  noop,\n            error: noop\n        };\n\n        this.registerChild();\n        this.listenDelegate();\n\n        global.components[this.tag] = this;\n    }\n\n    getPropNames() : $ReadOnlyArray<string> {\n        if (this.propNames) {\n            return this.propNames;\n        }\n\n        const propNames = Object.keys(this.props);\n        for (const key of Object.keys(this.builtinProps)) {\n            if (propNames.indexOf(key) === -1) {\n                propNames.push(key);\n            }\n        }\n\n        this.propNames = propNames;\n        return propNames;\n    }\n\n    getPropDefinition(name : string) : MixedPropDefinitionType<P> {\n        return this.props[name] || this.builtinProps[name];\n    }\n\n    driver(name : string, dep : mixed) : mixed {\n        if (__ZOID__.__FRAMEWORK_SUPPORT__) {\n            const drivers = { react, angular, vue, angular2 };\n\n            if (!drivers[name]) {\n                throw new Error(`Could not find driver for framework: ${ name }`);\n            }\n    \n            this.driverCache = this.driverCache || {};\n    \n            if (!this.driverCache[name]) {\n                this.driverCache[name] = drivers[name].register(this, dep);\n            }\n    \n            return this.driverCache[name];\n        } else {\n            throw new Error(`Driver support not enabled`);\n        }\n    }\n\n    registerChild() {\n        if (this.isChild()) {\n            if (window.xprops) {\n                throw new Error(`Can not register ${ this.name } as child - can not attach multiple components to the same window`);\n            }\n\n            const child = new ChildComponent(this);\n            window.xprops = this.xprops = child.getProps();\n        }\n    }\n\n    listenDelegate() {\n        on(`${ POST_MESSAGE.ALLOW_DELEGATE }_${ this.name }`, () => {\n            return true;\n        });\n\n        on(`${ POST_MESSAGE.DELEGATE }_${ this.name }`, ({ source, data: { context, props, overrides } }) => {\n            const delegate = new DelegateComponent(this, source, { context, props, overrides });\n            return delegate.getDelegate();\n        });\n    }\n\n    canRenderTo(win : CrossDomainWindowType) : ZalgoPromise<boolean> {\n        return send(win, `${ POST_MESSAGE.ALLOW_DELEGATE }_${ this.name }`).then(({ data }) => {\n            return data;\n        }).catch(() => {\n            return false;\n        });\n    }\n\n    getUrl(props : PropsType<P>) : string {\n        if (typeof this.url === 'function') {\n            return this.url({ props });\n        }\n\n        return this.url;\n    }\n\n    getChildDomain(props : PropsType<P>) : string {\n        if (this.domain && typeof this.domain === 'string') {\n            return this.domain;\n        }\n\n        return getDomainFromUrl(this.getUrl(props));\n    }\n\n    getDomain(props : PropsType<P>) : string | RegExp {\n        if (this.domain && isRegex(this.domain)) {\n            return this.domain;\n        }\n\n        return this.getChildDomain(props);\n    }\n\n    getBridgeUrl() : ?string {\n        if (this.bridgeUrl) {\n            return this.bridgeUrl;\n        }\n    }\n\n    isChild() : boolean {\n        const payload = getChildPayload();\n        return Boolean(payload && payload.tag === this.tag && payload.childDomain === getDomain());\n    }\n\n    getDefaultContainer(context : $Values<typeof CONTEXT>, container? : string | HTMLElement) : string | HTMLElement {\n        if (container) {\n            if (typeof container !== 'string' && !isElement(container)) {\n                throw new TypeError(`Expected string or element selector to be passed`);\n            }\n\n            return container;\n        }\n\n        if (context === CONTEXT.POPUP) {\n            return 'body';\n        }\n\n        throw new Error(`Expected element to be passed to render iframe`);\n    }\n\n    getDefaultContext(context : ?$Values<typeof CONTEXT>, props : PropsInputType<P>) : $Values<typeof CONTEXT> {\n        if (props.window) {\n            return toProxyWindow(props.window).getType();\n        }\n\n        if (context) {\n            if (context !== CONTEXT.IFRAME && context !== CONTEXT.POPUP) {\n                throw new Error(`Unrecognized context: ${ context }`);\n            }\n            \n            return context;\n        }\n\n        return this.defaultContext;\n    }\n\n    init(props : PropsInputType<P>) : ZoidComponentInstance<P> {\n\n        // $FlowFixMe\n        props = props || {};\n        \n        const parent = new ParentComponent(this, props);\n\n        const render = (target, container, context) => ZalgoPromise.try(() => {\n            if (!isWindow(target)) {\n                throw new Error(`Must pass window to renderTo`);\n            }\n\n            context = this.getDefaultContext(context, props);\n            container = this.getDefaultContainer(context, container);\n            return parent.render(target, container, context);\n        });\n\n        return {\n            ...parent.getHelpers(),\n            render:   (container, context) => render(window, container, context),\n            renderTo: (target, container, context) => render(target, container, context)\n        };\n    }\n\n    checkAllowRender(target : CrossDomainWindowType, domain : string | RegExp, container : string | HTMLElement) {\n        if (target === window) {\n            return;\n        }\n\n        if (!isSameTopWindow(window, target)) {\n            throw new Error(`Can only renderTo an adjacent frame`);\n        }\n\n        const origin = getDomain();\n\n        if (!matchDomain(domain, origin) && !isSameDomain(target)) {\n            throw new Error(`Can not render remotely to ${ domain.toString() } - can only render to ${ origin }`);\n        }\n\n        if (container && typeof container !== 'string') {\n            throw new Error(`Container passed to renderTo must be a string selector, got ${ typeof container } }`);\n        }\n    }\n\n    log(event : string, payload? : LoggerPayload) {\n        this.logger.info(`${ this.name }_${ event }`, payload);\n    }\n\n    registerActiveComponent<Q>(instance : ParentComponent<Q> | DelegateComponent<Q>) {\n        const global = getGlobal();\n        global.activeComponents = global.activeComponents || [];\n        global.activeComponents.push(instance);\n    }\n\n    destroyActiveComponent<Q>(instance : ParentComponent<Q> | DelegateComponent<Q>) {\n        const global = getGlobal();\n        global.activeComponents = global.activeComponents || [];\n        global.activeComponents.splice(global.activeComponents.indexOf(instance), 1);\n    }\n}\n\nexport type ComponentDriverType<P, T : mixed> = {|\n    register : (Component<P>, T) => mixed\n|};\n\nexport function create<P>(options : ComponentOptionsType<P>) : ZoidComponent<P> {\n    setupPostRobot();\n\n    const component : Component<P> = new Component(options);\n\n    const init = (props) => component.init(props);\n    init.driver = (name, dep) => component.driver(name, dep);\n    init.isChild = () => component.isChild();\n    init.canRenderTo = (win) => component.canRenderTo(win);\n    init.xprops = component.xprops;\n    \n    return init;\n}\n\nexport function destroyAll() : ZalgoPromise<void> {\n    if (bridge) {\n        bridge.destroyBridges();\n    }\n\n    const results = [];\n\n    const global = getGlobal();\n    global.activeComponents = global.activeComponents || [];\n    while (global.activeComponents.length) {\n        results.push(global.activeComponents[0].destroy(new Error(`zoid destroyed all`), false));\n    }\n\n    return ZalgoPromise.all(results).then(noop);\n}\n\nexport const destroyComponents = destroyAll;\n\nexport function destroy() {\n    destroyAll();\n    destroyGlobal();\n    destroyPostRobot();\n}\n","/* @flow */\n\nimport { isPerc, isPx, values } from 'belter/src';\n\nimport { CONTEXT, PROP_TYPE } from '../constants';\n\nimport type { ComponentOptionsType } from './index';\n\nfunction validatePropDefinitions<P>(options : ComponentOptionsType<P>) {\n\n    if (options.props && !(typeof options.props === 'object')) {\n        throw new Error(`Expected options.props to be an object`);\n    }\n\n    const PROP_TYPE_LIST = values(PROP_TYPE);\n\n    if (options.props) {\n        for (const key of Object.keys(options.props)) {\n            const prop = options.props[key];\n\n            if (!prop || !(typeof prop === 'object')) {\n                throw new Error(`Expected options.props.${ key } to be an object`);\n            }\n\n            if (!prop.type) {\n                throw new Error(`Expected prop.type`);\n            }\n\n            if (PROP_TYPE_LIST.indexOf(prop.type) === -1) {\n                throw new Error(`Expected prop.type to be one of ${ PROP_TYPE_LIST.join(', ') }`);\n            }\n\n            if (prop.required && prop.default) {\n                throw new Error(`Required prop can not have a default value`);\n            }\n\n            if (prop.type === PROP_TYPE.FUNCTION && prop.queryParam && !prop.queryValue) {\n                throw new Error(`Do not pass queryParam for function prop`);\n            }\n        }\n    }\n}\n\n// eslint-disable-next-line complexity\nexport function validate<P>(options : ?ComponentOptionsType<P>) { // eslint-ignore-line\n\n    if (!options) {\n        throw new Error(`Expected options to be passed`);\n    }\n\n    // eslint-disable-next-line security/detect-unsafe-regex, unicorn/no-unsafe-regex\n    if (!options.tag || !options.tag.match(/^([a-z0-9]+-)+[a-z0-9]+$/)) {\n        throw new Error(`Invalid options.tag: ${ options.tag }`);\n    }\n\n    validatePropDefinitions(options);\n\n    if (options.dimensions) {\n        if (options.dimensions && !isPx(options.dimensions.width) && !isPerc(options.dimensions.width)) {\n            throw new Error(`Expected options.dimensions.width to be a px or % string value`);\n        }\n\n        if (options.dimensions && !isPx(options.dimensions.height) && !isPerc(options.dimensions.height)) {\n            throw new Error(`Expected options.dimensions.height to be a px or % string value`);\n        }\n    }\n\n    if (options.defaultContext) {\n        if (options.defaultContext !== CONTEXT.IFRAME && options.defaultContext !== CONTEXT.POPUP) {\n            throw new Error(`Unsupported context type: ${ options.defaultContext || 'unknown' }`);\n        }\n    }\n\n    if (!options.url) {\n        throw new Error(`Must pass url`);\n    }\n\n    if (typeof options.url !== 'string' && typeof options.url !== 'function') {\n        throw new TypeError(`Expected url to be string or function`);\n    }\n\n    if (options.prerenderTemplate && typeof options.prerenderTemplate !== 'function') {\n        throw new Error(`Expected options.prerenderTemplate to be a function`);\n    }\n\n    if ((options.containerTemplate || !__ZOID__.__DEFAULT_CONTAINER__) && typeof options.containerTemplate !== 'function') {\n        throw new Error(`Expected options.containerTemplate to be a function`);\n    }\n}\n","/* @flow */\n\nexport { PopupOpenError } from 'belter/src';\nexport { create, destroy, destroyComponents, destroyAll, Component } from './component';\nexport type { ZoidComponent, ZoidComponentInstance } from './component';\nexport type { RenderOptionsType } from './parent';\nexport { PROP_TYPE, PROP_SERIALIZATION, CONTEXT, EVENT } from './constants';\n"],"sourceRoot":""}